
FirstUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800b130  0800b130  0000c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b3d8  0800b3d8  0000c3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b3e0  0800b3e0  0000c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b3e4  0800b3e4  0000c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b3e8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800b44c  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b4ac  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  24000124  0800b50c  0000d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240009e0  0800b50c  0000d9e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0cb  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f5  00000000  00000000  0002c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0002f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107f  00000000  00000000  00030b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003918c  00000000  00000000  00031bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee6c  00000000  00000000  0006ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001669f6  00000000  00000000  00089bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f05ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006098  00000000  00000000  001f05f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001f6688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b118 	.word	0x0800b118

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800b118 	.word	0x0800b118

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f001 f8e5 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f857 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 fa37 	bl	8000b00 <MX_GPIO_Init>
  MX_ETH_Init();
 8000692:	f000 f8d3 	bl	800083c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000696:	f000 f9b5 	bl	8000a04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069a:	f000 f9ff 	bl	8000a9c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800069e:	f000 f919 	bl	80008d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006a2:	f000 f957 	bl	8000954 <MX_SPI1_Init>
  MAX7219_Init();
 80006a6:	f000 fcad 	bl	8001004 <MAX7219_Init>


  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006aa:	2208      	movs	r2, #8
 80006ac:	4920      	ldr	r1, [pc, #128]	@ (8000730 <main+0xb0>)
 80006ae:	4821      	ldr	r0, [pc, #132]	@ (8000734 <main+0xb4>)
 80006b0:	f007 f886 	bl	80077c0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(displayChar == 'L')
 80006b4:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <main+0xb8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b4c      	cmp	r3, #76	@ 0x4c
 80006ba:	d10f      	bne.n	80006dc <main+0x5c>
	{
		uint8_t Analogic = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	71fb      	strb	r3, [r7, #7]
		uint8_t LDR = PCF8591_ReadAnalog(Analogic);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fc74 	bl	8000fb0 <PCF8591_ReadAnalog>
 80006c8:	4603      	mov	r3, r0
 80006ca:	71bb      	strb	r3, [r7, #6]
		DisplaySync(displayChar, LDR);
 80006cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <main+0xb8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4610      	mov	r0, r2
 80006d8:	f000 fc3a 	bl	8000f50 <DisplaySync>
	}
	if(displayChar == 'T')
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <main+0xb8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b54      	cmp	r3, #84	@ 0x54
 80006e2:	d10f      	bne.n	8000704 <main+0x84>
	{
		uint8_t Analogic = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	717b      	strb	r3, [r7, #5]
		uint8_t Temp = PCF8591_ReadAnalog(Analogic);
 80006e8:	797b      	ldrb	r3, [r7, #5]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fc60 	bl	8000fb0 <PCF8591_ReadAnalog>
 80006f0:	4603      	mov	r3, r0
 80006f2:	713b      	strb	r3, [r7, #4]
		DisplaySync(displayChar, Temp);
 80006f4:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <main+0xb8>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	793b      	ldrb	r3, [r7, #4]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4610      	mov	r0, r2
 8000700:	f000 fc26 	bl	8000f50 <DisplaySync>
	}
	if(displayChar == 'V')
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <main+0xb8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b56      	cmp	r3, #86	@ 0x56
 800070a:	d1d3      	bne.n	80006b4 <main+0x34>
	{
		uint8_t Analogic = 3;
 800070c:	2303      	movs	r3, #3
 800070e:	70fb      	strb	r3, [r7, #3]
		uint8_t Volt = PCF8591_ReadAnalog(Analogic);
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fc4c 	bl	8000fb0 <PCF8591_ReadAnalog>
 8000718:	4603      	mov	r3, r0
 800071a:	70bb      	strb	r3, [r7, #2]
		DisplaySync(displayChar, Volt);
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <main+0xb8>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	78bb      	ldrb	r3, [r7, #2]
 8000724:	4619      	mov	r1, r3
 8000726:	4610      	mov	r0, r2
 8000728:	f000 fc12 	bl	8000f50 <DisplaySync>
	if(displayChar == 'L')
 800072c:	e7c2      	b.n	80006b4 <main+0x34>
 800072e:	bf00      	nop
 8000730:	24000880 	.word	0x24000880
 8000734:	24000304 	.word	0x24000304
 8000738:	24000000 	.word	0x24000000

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	@ 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	224c      	movs	r2, #76	@ 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00a f852 	bl	800a7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00a f84c 	bl	800a7f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800075c:	2002      	movs	r0, #2
 800075e:	f003 fcf3 	bl	8004148 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b33      	ldr	r3, [pc, #204]	@ (8000834 <SystemClock_Config+0xf8>)
 8000768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076a:	4a32      	ldr	r2, [pc, #200]	@ (8000834 <SystemClock_Config+0xf8>)
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000772:	4b30      	ldr	r3, [pc, #192]	@ (8000834 <SystemClock_Config+0xf8>)
 8000774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <SystemClock_Config+0xfc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000784:	4a2c      	ldr	r2, [pc, #176]	@ (8000838 <SystemClock_Config+0xfc>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <SystemClock_Config+0xfc>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000798:	bf00      	nop
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <SystemClock_Config+0xfc>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007a6:	d1f8      	bne.n	800079a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007a8:	2303      	movs	r3, #3
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	2302      	movs	r3, #2
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 80007c6:	2313      	movs	r3, #19
 80007c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007ce:	2303      	movs	r3, #3
 80007d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d6:	230c      	movs	r3, #12
 80007d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007da:	2302      	movs	r3, #2
 80007dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fcf8 	bl	80041dc <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007f2:	f000 fc1f 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	233f      	movs	r3, #63	@ 0x3f
 80007f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f004 f938 	bl	8004a90 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000826:	f000 fc05 	bl	8001034 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3770      	adds	r7, #112	@ 0x70
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	58000400 	.word	0x58000400
 8000838:	58024800 	.word	0x58024800

0800083c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_ETH_Init+0x80>)
 8000842:	4a1f      	ldr	r2, [pc, #124]	@ (80008c0 <MX_ETH_Init+0x84>)
 8000844:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_ETH_Init+0x88>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800084c:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <MX_ETH_Init+0x88>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_ETH_Init+0x88>)
 8000854:	22e1      	movs	r2, #225	@ 0xe1
 8000856:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_ETH_Init+0x88>)
 800085a:	2200      	movs	r2, #0
 800085c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800085e:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_ETH_Init+0x88>)
 8000860:	2200      	movs	r2, #0
 8000862:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_ETH_Init+0x88>)
 8000866:	2200      	movs	r2, #0
 8000868:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_ETH_Init+0x80>)
 800086c:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <MX_ETH_Init+0x88>)
 800086e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_ETH_Init+0x80>)
 8000872:	2201      	movs	r2, #1
 8000874:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_ETH_Init+0x80>)
 8000878:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <MX_ETH_Init+0x8c>)
 800087a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_ETH_Init+0x80>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_ETH_Init+0x90>)
 8000880:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_ETH_Init+0x80>)
 8000884:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000888:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800088a:	480c      	ldr	r0, [pc, #48]	@ (80008bc <MX_ETH_Init+0x80>)
 800088c:	f001 ff2c 	bl	80026e8 <HAL_ETH_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000896:	f000 fbcd 	bl	8001034 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800089a:	2238      	movs	r2, #56	@ 0x38
 800089c:	2100      	movs	r1, #0
 800089e:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <MX_ETH_Init+0x94>)
 80008a0:	f009 ffa8 	bl	800a7f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <MX_ETH_Init+0x94>)
 80008a6:	2221      	movs	r2, #33	@ 0x21
 80008a8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_ETH_Init+0x94>)
 80008ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008b0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <MX_ETH_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000178 	.word	0x24000178
 80008c0:	40028000 	.word	0x40028000
 80008c4:	24000888 	.word	0x24000888
 80008c8:	240000c4 	.word	0x240000c4
 80008cc:	24000064 	.word	0x24000064
 80008d0:	24000140 	.word	0x24000140

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */

  hi2c1.Instance = I2C1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_I2C1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <MX_I2C1_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000910:	f002 fd02 	bl	8003318 <HAL_I2C_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 fb8b 	bl	8001034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000922:	f003 fa49 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 fb82 	bl	8001034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_I2C1_Init+0x74>)
 8000934:	f003 fa8b 	bl	8003e4e <HAL_I2CEx_ConfigDigitalFilter>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 fb79 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	24000228 	.word	0x24000228
 800094c:	40005400 	.word	0x40005400
 8000950:	10707dbc 	.word	0x10707dbc

08000954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <MX_SPI1_Init+0xa8>)
 800095a:	4a29      	ldr	r2, [pc, #164]	@ (8000a00 <MX_SPI1_Init+0xac>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000960:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000968:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800096c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000970:	2207      	movs	r2, #7
 8000972:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000974:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097a:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <MX_SPI1_Init+0xa8>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000982:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000986:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_SPI1_Init+0xa8>)
 800098a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800098e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_SPI1_Init+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_SPI1_Init+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	659a      	str	r2, [r3, #88]	@ 0x58

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_SPI1_Init+0xa8>)
 80009e8:	f006 fa0a 	bl	8006e00 <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80009f2:	f000 fb1f 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2400027c 	.word	0x2400027c
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <MX_USART3_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f006 fdd2 	bl	80075f6 <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 faec 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a60:	f009 fad5 	bl	800a00e <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 fae3 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a72:	f009 fb0a 	bl	800a08a <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 fada 	bl	8001034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a82:	f009 fa8b 	bl	8009f9c <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 fad2 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000304 	.word	0x24000304
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa2:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa8:	2209      	movs	r2, #9
 8000aaa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae4:	f003 f9ff 	bl	8003ee6 <HAL_PCD_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 faa1 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	24000398 	.word	0x24000398
 8000afc:	40080000 	.word	0x40080000

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	@ 0x30
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b70      	ldr	r3, [pc, #448]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b34:	4b68      	ldr	r3, [pc, #416]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a67      	ldr	r2, [pc, #412]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b64      	ldr	r3, [pc, #400]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b61      	ldr	r3, [pc, #388]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a5f      	ldr	r2, [pc, #380]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b59      	ldr	r3, [pc, #356]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a58      	ldr	r2, [pc, #352]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b55      	ldr	r3, [pc, #340]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b52      	ldr	r3, [pc, #328]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a50      	ldr	r2, [pc, #320]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bac:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a49      	ldr	r2, [pc, #292]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b46      	ldr	r3, [pc, #280]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	4b43      	ldr	r3, [pc, #268]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a41      	ldr	r2, [pc, #260]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd8 <MX_GPIO_Init+0x1d8>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	483b      	ldr	r0, [pc, #236]	@ (8000cdc <MX_GPIO_Init+0x1dc>)
 8000bee:	f002 fb5f 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bf8:	4839      	ldr	r0, [pc, #228]	@ (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000bfa:	f002 fb59 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c04:	4837      	ldr	r0, [pc, #220]	@ (8000ce4 <MX_GPIO_Init+0x1e4>)
 8000c06:	f002 fb53 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4836      	ldr	r0, [pc, #216]	@ (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000c10:	f002 fb4e 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4830      	ldr	r0, [pc, #192]	@ (8000cec <MX_GPIO_Init+0x1ec>)
 8000c2c:	f002 f990 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c30:	2340      	movs	r3, #64	@ 0x40
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4825      	ldr	r0, [pc, #148]	@ (8000cdc <MX_GPIO_Init+0x1dc>)
 8000c48:	f002 f982 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c4c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	@ (8000ce0 <MX_GPIO_Init+0x1e0>)
 8000c66:	f002 f973 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <MX_GPIO_Init+0x1e4>)
 8000c84:	f002 f964 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4814      	ldr	r0, [pc, #80]	@ (8000cf0 <MX_GPIO_Init+0x1f0>)
 8000c9e:	f002 f957 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000cba:	f002 f949 	bl	8002f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2028      	movs	r0, #40	@ 0x28
 8000cc4:	f000 ff77 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc8:	2028      	movs	r0, #40	@ 0x28
 8000cca:	f000 ff8e 	bl	8001bea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cce:	bf00      	nop
 8000cd0:	3730      	adds	r7, #48	@ 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	58020400 	.word	0x58020400
 8000ce4:	58020c00 	.word	0x58020c00
 8000ce8:	58021000 	.word	0x58021000
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58021800 	.word	0x58021800

08000cf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d04:	d104      	bne.n	8000d10 <HAL_GPIO_EXTI_Callback+0x1c>
  {
	  counter++;
 8000d06:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a03      	ldr	r2, [pc, #12]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d0e:	6013      	str	r3, [r2, #0]
  }
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2400087c 	.word	0x2400087c

08000d20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if (strncmp(rx_buffer, "Read_AN0", 8) == 0)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	4935      	ldr	r1, [pc, #212]	@ (8000e00 <HAL_UART_RxCpltCallback+0xe0>)
 8000d2c:	4835      	ldr	r0, [pc, #212]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000d2e:	f009 fd69 	bl	800a804 <strncmp>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10d      	bne.n	8000d54 <HAL_UART_RxCpltCallback+0x34>
	{
		uint8_t Analogic = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
		uint8_t LDR = PCF8591_ReadAnalog(Analogic);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f936 	bl	8000fb0 <PCF8591_ReadAnalog>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73bb      	strb	r3, [r7, #14]

		SendMessage(LDR, Analogic);
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f868 	bl	8000e24 <SendMessage>
	}

	if (strncmp(rx_buffer, "Read_AN1", 8) == 0)
 8000d54:	2208      	movs	r2, #8
 8000d56:	492c      	ldr	r1, [pc, #176]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000d58:	482a      	ldr	r0, [pc, #168]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000d5a:	f009 fd53 	bl	800a804 <strncmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10d      	bne.n	8000d80 <HAL_UART_RxCpltCallback+0x60>
	{
		uint8_t Analogic = 1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	737b      	strb	r3, [r7, #13]
		uint8_t Temp = PCF8591_ReadAnalog(Analogic);
 8000d68:	7b7b      	ldrb	r3, [r7, #13]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f920 	bl	8000fb0 <PCF8591_ReadAnalog>
 8000d70:	4603      	mov	r3, r0
 8000d72:	733b      	strb	r3, [r7, #12]

		SendMessage(Temp, Analogic);
 8000d74:	7b7a      	ldrb	r2, [r7, #13]
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f852 	bl	8000e24 <SendMessage>
	}

	if (strncmp(rx_buffer, "Read_AN3", 8) == 0)
 8000d80:	2208      	movs	r2, #8
 8000d82:	4922      	ldr	r1, [pc, #136]	@ (8000e0c <HAL_UART_RxCpltCallback+0xec>)
 8000d84:	481f      	ldr	r0, [pc, #124]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000d86:	f009 fd3d 	bl	800a804 <strncmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10d      	bne.n	8000dac <HAL_UART_RxCpltCallback+0x8c>
	{
		uint8_t Analogic = 3;
 8000d90:	2303      	movs	r3, #3
 8000d92:	72fb      	strb	r3, [r7, #11]
		uint8_t Volt = PCF8591_ReadAnalog(Analogic);
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f90a 	bl	8000fb0 <PCF8591_ReadAnalog>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	72bb      	strb	r3, [r7, #10]

		SendMessage(Volt, Analogic);
 8000da0:	7afa      	ldrb	r2, [r7, #11]
 8000da2:	7abb      	ldrb	r3, [r7, #10]
 8000da4:	4611      	mov	r1, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f83c 	bl	8000e24 <SendMessage>
	}

	// LED MATRIX UART SELECTION

	if (strncmp(rx_buffer, "Read_LDR", 8) == 0)
 8000dac:	2208      	movs	r2, #8
 8000dae:	4918      	ldr	r1, [pc, #96]	@ (8000e10 <HAL_UART_RxCpltCallback+0xf0>)
 8000db0:	4814      	ldr	r0, [pc, #80]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000db2:	f009 fd27 	bl	800a804 <strncmp>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <HAL_UART_RxCpltCallback+0xa2>
	{
		displayChar = 'L';
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_UART_RxCpltCallback+0xf4>)
 8000dbe:	224c      	movs	r2, #76	@ 0x4c
 8000dc0:	701a      	strb	r2, [r3, #0]
	}

	if (strncmp(rx_buffer, "Read_Tem", 8) == 0)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4914      	ldr	r1, [pc, #80]	@ (8000e18 <HAL_UART_RxCpltCallback+0xf8>)
 8000dc6:	480f      	ldr	r0, [pc, #60]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000dc8:	f009 fd1c 	bl	800a804 <strncmp>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <HAL_UART_RxCpltCallback+0xb8>
	{
		displayChar = 'T';
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <HAL_UART_RxCpltCallback+0xf4>)
 8000dd4:	2254      	movs	r2, #84	@ 0x54
 8000dd6:	701a      	strb	r2, [r3, #0]
	}

	if (strncmp(rx_buffer, "Read_Vol", 8) == 0)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	4910      	ldr	r1, [pc, #64]	@ (8000e1c <HAL_UART_RxCpltCallback+0xfc>)
 8000ddc:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000dde:	f009 fd11 	bl	800a804 <strncmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <HAL_UART_RxCpltCallback+0xce>
	{
		displayChar = 'V';
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_UART_RxCpltCallback+0xf4>)
 8000dea:	2256      	movs	r2, #86	@ 0x56
 8000dec:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8000dee:	2208      	movs	r2, #8
 8000df0:	4904      	ldr	r1, [pc, #16]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000df2:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <HAL_UART_RxCpltCallback+0x100>)
 8000df4:	f006 fce4 	bl	80077c0 <HAL_UART_Receive_IT>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	0800b130 	.word	0x0800b130
 8000e04:	24000880 	.word	0x24000880
 8000e08:	0800b13c 	.word	0x0800b13c
 8000e0c:	0800b148 	.word	0x0800b148
 8000e10:	0800b154 	.word	0x0800b154
 8000e14:	24000000 	.word	0x24000000
 8000e18:	0800b160 	.word	0x0800b160
 8000e1c:	0800b16c 	.word	0x0800b16c
 8000e20:	24000304 	.word	0x24000304

08000e24 <SendMessage>:

void SendMessage(uint8_t value, uint8_t port)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	char message[10];

	sprintf(message, "AIN%d: %d\r\n", port, value);
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f107 000c 	add.w	r0, r7, #12
 8000e3c:	4909      	ldr	r1, [pc, #36]	@ (8000e64 <SendMessage+0x40>)
 8000e3e:	f009 fcb9 	bl	800a7b4 <siprintf>

	HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message));
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fa4a 	bl	80002e0 <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <SendMessage+0x44>)
 8000e58:	f006 fc1e 	bl	8007698 <HAL_UART_Transmit_IT>
}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0800b178 	.word	0x0800b178
 8000e68:	24000304 	.word	0x24000304

08000e6c <MAX7219_SendData>:

void MAX7219_SendData(uint8_t reg, uint8_t data)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	71bb      	strb	r3, [r7, #6]
	uint8_t txData[2] = {reg, data};
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	733b      	strb	r3, [r7, #12]
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull CS low
 8000e84:	2200      	movs	r2, #0
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <MAX7219_SendData+0x44>)
 8000e8a:	f002 fa11 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register and data
 8000e8e:	f107 010c 	add.w	r1, r7, #12
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	2202      	movs	r2, #2
 8000e98:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <MAX7219_SendData+0x48>)
 8000e9a:	f006 f8d5 	bl	8007048 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull CS high
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2140      	movs	r1, #64	@ 0x40
 8000ea2:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <MAX7219_SendData+0x44>)
 8000ea4:	f002 fa04 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	58020000 	.word	0x58020000
 8000eb4:	2400027c 	.word	0x2400027c

08000eb8 <DisplayCharacter>:


void DisplayCharacter(uint8_t character)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t charIndex = character - 65; // ASCII offset
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	3b41      	subs	r3, #65	@ 0x41
 8000ec6:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < 8; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e010      	b.n	8000ef0 <DisplayCharacter+0x38>
		MAX7219_SendData(MAX7219_REG_DIGIT0 + i, ascii_font[charIndex][i]);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <DisplayCharacter+0x48>)
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	441a      	add	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff ffc1 	bl	8000e6c <MAX7219_SendData>
	for (int i = 0; i < 8; i++) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	ddeb      	ble.n	8000ece <DisplayCharacter+0x16>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800b184 	.word	0x0800b184

08000f04 <DisplayEspecialCharacter>:

void DisplayEspecialCharacter(uint8_t character)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	uint8_t charIndex = character; // ASCII offset
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < 8; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e010      	b.n	8000f3a <DisplayEspecialCharacter+0x36>
		MAX7219_SendData(MAX7219_REG_DIGIT0 + i, ascii_especial_font[charIndex][i]);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2d8      	uxtb	r0, r3
 8000f20:	7afb      	ldrb	r3, [r7, #11]
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <DisplayEspecialCharacter+0x48>)
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	441a      	add	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff ff9c 	bl	8000e6c <MAX7219_SendData>
	for (int i = 0; i < 8; i++) {
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	ddeb      	ble.n	8000f18 <DisplayEspecialCharacter+0x14>
	}
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0800b35c 	.word	0x0800b35c

08000f50 <DisplaySync>:

void DisplaySync(char displayChar, uint8_t value)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	if(value < 128)
 8000f60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0f      	blt.n	8000f88 <DisplaySync+0x38>
	{
		DisplayCharacter(displayChar);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffa4 	bl	8000eb8 <DisplayCharacter>
		HAL_Delay(500);
 8000f70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f74:	f000 fd00 	bl	8001978 <HAL_Delay>
		DisplayEspecialCharacter(0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff ffc3 	bl	8000f04 <DisplayEspecialCharacter>
		HAL_Delay(500);
 8000f7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f82:	f000 fcf9 	bl	8001978 <HAL_Delay>
		DisplayCharacter(displayChar);
		HAL_Delay(500);
		DisplayEspecialCharacter(1);
		HAL_Delay(500);
	}
}
 8000f86:	e00e      	b.n	8000fa6 <DisplaySync+0x56>
		DisplayCharacter(displayChar);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff94 	bl	8000eb8 <DisplayCharacter>
		HAL_Delay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f94:	f000 fcf0 	bl	8001978 <HAL_Delay>
		DisplayEspecialCharacter(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ffb3 	bl	8000f04 <DisplayEspecialCharacter>
		HAL_Delay(500);
 8000f9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa2:	f000 fce9 	bl	8001978 <HAL_Delay>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <PCF8591_ReadAnalog>:

uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000fce:	f107 020f 	add.w	r2, r7, #15
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2190      	movs	r1, #144	@ 0x90
 8000fdc:	4808      	ldr	r0, [pc, #32]	@ (8001000 <PCF8591_ReadAnalog+0x50>)
 8000fde:	f002 fa37 	bl	8003450 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	2190      	movs	r1, #144	@ 0x90
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <PCF8591_ReadAnalog+0x50>)
 8000ff2:	f002 fb45 	bl	8003680 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	24000228 	.word	0x24000228

08001004 <MAX7219_Init>:

void MAX7219_Init(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    // Desativar modo de teste
    MAX7219_SendData(MAX7219_REG_DISPLAYTEST, 0x00);
 8001008:	2100      	movs	r1, #0
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff ff2e 	bl	8000e6c <MAX7219_SendData>
    // Configurar para modo de exibição normal
    MAX7219_SendData(MAX7219_REG_SHUTDOWN, 0x01);
 8001010:	2101      	movs	r1, #1
 8001012:	200c      	movs	r0, #12
 8001014:	f7ff ff2a 	bl	8000e6c <MAX7219_SendData>
    // Configurar decodificação para 0 (modo gráfico)
    MAX7219_SendData(MAX7219_REG_DECODEMODE, 0x00);
 8001018:	2100      	movs	r1, #0
 800101a:	2009      	movs	r0, #9
 800101c:	f7ff ff26 	bl	8000e6c <MAX7219_SendData>
    // Configurar brilho (0x00 a 0x0F, 0x0F é o mais brilhante)
    MAX7219_SendData(MAX7219_REG_INTENSITY, 0x08);
 8001020:	2108      	movs	r1, #8
 8001022:	200a      	movs	r0, #10
 8001024:	f7ff ff22 	bl	8000e6c <MAX7219_SendData>
    // Configurar limite de escaneamento (todas as 8 linhas ativas)
    MAX7219_SendData(MAX7219_REG_SCANLIMIT, 0x07);
 8001028:	2107      	movs	r1, #7
 800102a:	200b      	movs	r0, #11
 800102c:	f7ff ff1e 	bl	8000e6c <MAX7219_SendData>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <Error_Handler+0x8>

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_MspInit+0x30>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800104c:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_MspInit+0x30>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_MspInit+0x30>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a59      	ldr	r2, [pc, #356]	@ (80011f8 <HAL_ETH_MspInit+0x184>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 80ab 	bne.w	80011ee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001098:	4b58      	ldr	r3, [pc, #352]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 800109a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800109e:	4a57      	ldr	r2, [pc, #348]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010a8:	4b54      	ldr	r3, [pc, #336]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010b6:	4b51      	ldr	r3, [pc, #324]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010bc:	4a4f      	ldr	r2, [pc, #316]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010d4:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010da:	4a48      	ldr	r2, [pc, #288]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010e4:	4b45      	ldr	r3, [pc, #276]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b42      	ldr	r3, [pc, #264]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	4a40      	ldr	r2, [pc, #256]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001102:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a39      	ldr	r2, [pc, #228]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b36      	ldr	r3, [pc, #216]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4a31      	ldr	r2, [pc, #196]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 8001154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_ETH_MspInit+0x188>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800116a:	2332      	movs	r3, #50	@ 0x32
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117a:	230b      	movs	r3, #11
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	481e      	ldr	r0, [pc, #120]	@ (8001200 <HAL_ETH_MspInit+0x18c>)
 8001186:	f001 fee3 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800118a:	2386      	movs	r3, #134	@ 0x86
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119a:	230b      	movs	r3, #11
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	4817      	ldr	r0, [pc, #92]	@ (8001204 <HAL_ETH_MspInit+0x190>)
 80011a6:	f001 fed3 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011bc:	230b      	movs	r3, #11
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4810      	ldr	r0, [pc, #64]	@ (8001208 <HAL_ETH_MspInit+0x194>)
 80011c8:	f001 fec2 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011cc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011de:	230b      	movs	r3, #11
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <HAL_ETH_MspInit+0x198>)
 80011ea:	f001 feb1 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	@ 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40028000 	.word	0x40028000
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020800 	.word	0x58020800
 8001204:	58020000 	.word	0x58020000
 8001208:	58020400 	.word	0x58020400
 800120c:	58021800 	.word	0x58021800

08001210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0ba      	sub	sp, #232	@ 0xe8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	22c0      	movs	r2, #192	@ 0xc0
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f009 fadf 	bl	800a7f4 <memset>
  if(hi2c->Instance==I2C1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <HAL_I2C_MspInit+0xc8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d146      	bne.n	80012ce <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001240:	f04f 0208 	mov.w	r2, #8
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f003 ffa6 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001262:	f7ff fee7 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001284:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129e:	2304      	movs	r3, #4
 80012a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <HAL_I2C_MspInit+0xd0>)
 80012ac:	f001 fe50 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 80012b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 80012c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012ce:	bf00      	nop
 80012d0:	37e8      	adds	r7, #232	@ 0xe8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020400 	.word	0x58020400

080012e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0bc      	sub	sp, #240	@ 0xf0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	22c0      	movs	r2, #192	@ 0xc0
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f009 fa75 	bl	800a7f4 <memset>
  if(hspi->Instance==SPI1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a41      	ldr	r2, [pc, #260]	@ (8001414 <HAL_SPI_MspInit+0x130>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d17a      	bne.n	800140a <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001314:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001324:	2320      	movs	r3, #32
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001330:	2302      	movs	r3, #2
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001334:	23c0      	movs	r3, #192	@ 0xc0
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 2048;
 800133c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001340:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4618      	mov	r0, r3
 800134e:	f003 ff2b 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001358:	f7ff fe6c 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 800135e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001362:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 8001364:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001368:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 800136e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_SPI_MspInit+0x134>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b6:	2320      	movs	r3, #32
 80013b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ce:	2305      	movs	r3, #5
 80013d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013d8:	4619      	mov	r1, r3
 80013da:	4810      	ldr	r0, [pc, #64]	@ (800141c <HAL_SPI_MspInit+0x138>)
 80013dc:	f001 fdb8 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e0:	2320      	movs	r3, #32
 80013e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f8:	2305      	movs	r3, #5
 80013fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001402:	4619      	mov	r1, r3
 8001404:	4806      	ldr	r0, [pc, #24]	@ (8001420 <HAL_SPI_MspInit+0x13c>)
 8001406:	f001 fda3 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800140a:	bf00      	nop
 800140c:	37f0      	adds	r7, #240	@ 0xf0
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40013000 	.word	0x40013000
 8001418:	58024400 	.word	0x58024400
 800141c:	58020000 	.word	0x58020000
 8001420:	58020400 	.word	0x58020400

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0ba      	sub	sp, #232	@ 0xe8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	22c0      	movs	r2, #192	@ 0xc0
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f009 f9d5 	bl	800a7f4 <memset>
  if(huart->Instance==USART3)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a2b      	ldr	r2, [pc, #172]	@ (80014fc <HAL_UART_MspInit+0xd8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d14e      	bne.n	80014f2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001454:	f04f 0202 	mov.w	r2, #2
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001466:	f107 0310 	add.w	r3, r7, #16
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fe9c 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001476:	f7ff fddd 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <HAL_UART_MspInit+0xdc>)
 800147c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001480:	4a1f      	ldr	r2, [pc, #124]	@ (8001500 <HAL_UART_MspInit+0xdc>)
 8001482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001486:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_UART_MspInit+0xdc>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <HAL_UART_MspInit+0xdc>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <HAL_UART_MspInit+0xdc>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_UART_MspInit+0xdc>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014d0:	2307      	movs	r3, #7
 80014d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014da:	4619      	mov	r1, r3
 80014dc:	4809      	ldr	r0, [pc, #36]	@ (8001504 <HAL_UART_MspInit+0xe0>)
 80014de:	f001 fd37 	bl	8002f50 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2027      	movs	r0, #39	@ 0x27
 80014e8:	f000 fb65 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014ec:	2027      	movs	r0, #39	@ 0x27
 80014ee:	f000 fb7c 	bl	8001bea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80014f2:	bf00      	nop
 80014f4:	37e8      	adds	r7, #232	@ 0xe8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40004800 	.word	0x40004800
 8001500:	58024400 	.word	0x58024400
 8001504:	58020c00 	.word	0x58020c00

08001508 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0ba      	sub	sp, #232	@ 0xe8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	22c0      	movs	r2, #192	@ 0xc0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f009 f963 	bl	800a7f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a30      	ldr	r2, [pc, #192]	@ (80015f4 <HAL_PCD_MspInit+0xec>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d159      	bne.n	80015ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001538:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001544:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fe29 	bl	80051a8 <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800155c:	f7ff fd6a 	bl	8001034 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001560:	f002 fe2c 	bl	80041bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_PCD_MspInit+0xf0>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <HAL_PCD_MspInit+0xf0>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_PCD_MspInit+0xf0>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001582:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001586:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800159c:	230a      	movs	r3, #10
 800159e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4814      	ldr	r0, [pc, #80]	@ (80015fc <HAL_PCD_MspInit+0xf4>)
 80015aa:	f001 fcd1 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <HAL_PCD_MspInit+0xf4>)
 80015ca:	f001 fcc1 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_PCD_MspInit+0xf0>)
 80015d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d4:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <HAL_PCD_MspInit+0xf0>)
 80015d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_PCD_MspInit+0xf0>)
 80015e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015ec:	bf00      	nop
 80015ee:	37e8      	adds	r7, #232	@ 0xe8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40080000 	.word	0x40080000
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58020000 	.word	0x58020000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f96f 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <USART3_IRQHandler+0x10>)
 8001666:	f006 f8f7 	bl	8007858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	24000304 	.word	0x24000304

08001674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001678:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800167c:	f001 fe31 	bl	80032e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f009 f8b8 	bl	800a828 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	24080000 	.word	0x24080000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	24000890 	.word	0x24000890
 80016ec:	240009e0 	.word	0x240009e0

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f4:	f000 f826 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f009 f889 	bl	800a834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7fe ffad 	bl	8000680 <main>
  bx  lr
 8001726:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800172c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001730:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001734:	0800b3e8 	.word	0x0800b3e8
  ldr r2, =_sbss
 8001738:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 800173c:	240009e0 	.word	0x240009e0

08001740 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC3_IRQHandler>
	...

08001744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001748:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <SystemInit+0xe4>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174e:	4a36      	ldr	r2, [pc, #216]	@ (8001828 <SystemInit+0xe4>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001758:	4b34      	ldr	r3, [pc, #208]	@ (800182c <SystemInit+0xe8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	2b06      	cmp	r3, #6
 8001762:	d807      	bhi.n	8001774 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001764:	4b31      	ldr	r3, [pc, #196]	@ (800182c <SystemInit+0xe8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 030f 	bic.w	r3, r3, #15
 800176c:	4a2f      	ldr	r2, [pc, #188]	@ (800182c <SystemInit+0xe8>)
 800176e:	f043 0307 	orr.w	r3, r3, #7
 8001772:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <SystemInit+0xec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <SystemInit+0xec>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <SystemInit+0xec>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <SystemInit+0xec>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4929      	ldr	r1, [pc, #164]	@ (8001830 <SystemInit+0xec>)
 800178c:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <SystemInit+0xf0>)
 800178e:	4013      	ands	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <SystemInit+0xe8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800179e:	4b23      	ldr	r3, [pc, #140]	@ (800182c <SystemInit+0xe8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 030f 	bic.w	r3, r3, #15
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <SystemInit+0xe8>)
 80017a8:	f043 0307 	orr.w	r3, r3, #7
 80017ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <SystemInit+0xec>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <SystemInit+0xec>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <SystemInit+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <SystemInit+0xec>)
 80017c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <SystemInit+0xf4>)
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <SystemInit+0xec>)
 80017c8:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <SystemInit+0xf8>)
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <SystemInit+0xec>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001840 <SystemInit+0xfc>)
 80017d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <SystemInit+0xec>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <SystemInit+0xec>)
 80017da:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <SystemInit+0xfc>)
 80017dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <SystemInit+0xec>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <SystemInit+0xec>)
 80017e6:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <SystemInit+0xfc>)
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <SystemInit+0xec>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <SystemInit+0xec>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <SystemInit+0xec>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <SystemInit+0xec>)
 80017fe:	2200      	movs	r2, #0
 8001800:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <SystemInit+0x100>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <SystemInit+0x104>)
 8001808:	4013      	ands	r3, r2
 800180a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800180e:	d202      	bcs.n	8001816 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <SystemInit+0x108>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <SystemInit+0x10c>)
 8001818:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800181c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	52002000 	.word	0x52002000
 8001830:	58024400 	.word	0x58024400
 8001834:	eaf6ed7f 	.word	0xeaf6ed7f
 8001838:	02020200 	.word	0x02020200
 800183c:	01ff0000 	.word	0x01ff0000
 8001840:	01010280 	.word	0x01010280
 8001844:	5c001000 	.word	0x5c001000
 8001848:	ffff0000 	.word	0xffff0000
 800184c:	51008108 	.word	0x51008108
 8001850:	52004000 	.word	0x52004000

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185a:	2003      	movs	r0, #3
 800185c:	f000 f9a0 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001860:	f003 facc 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_Init+0x68>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	4913      	ldr	r1, [pc, #76]	@ (80018c0 <HAL_Init+0x6c>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_Init+0x68>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_Init+0x6c>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	4a0b      	ldr	r2, [pc, #44]	@ (80018c4 <HAL_Init+0x70>)
 8001896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <HAL_Init+0x74>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 f814 	bl	80018cc <HAL_InitTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e002      	b.n	80018b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ae:	f7ff fbc7 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	58024400 	.word	0x58024400
 80018c0:	0800b36c 	.word	0x0800b36c
 80018c4:	24000008 	.word	0x24000008
 80018c8:	24000004 	.word	0x24000004

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_InitTick+0x60>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e021      	b.n	8001924 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_InitTick+0x64>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f985 	bl	8001c06 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f94f 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <HAL_InitTick+0x68>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24000010 	.word	0x24000010
 8001930:	24000004 	.word	0x24000004
 8001934:	2400000c 	.word	0x2400000c

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	24000010 	.word	0x24000010
 800195c:	24000894 	.word	0x24000894

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	24000894 	.word	0x24000894

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	24000010 	.word	0x24000010

080019c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GetREVID+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0c1b      	lsrs	r3, r3, #16
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	5c001000 	.word	0x5c001000

080019d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80019e8:	4904      	ldr	r1, [pc, #16]	@ (80019fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	58000400 	.word	0x58000400

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x40>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x40>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00
 8001a44:	05fa0000 	.word	0x05fa0000

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	@ (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	@ (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	@ 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	@ 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff29 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff40 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff90 	bl	8001af4 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5f 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff33 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffa4 	bl	8001b5c <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fe9a 	bl	8001960 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e2dc      	b.n	80021f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d008      	beq.n	8001c56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e2cd      	b.n	80021f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a76      	ldr	r2, [pc, #472]	@ (8001e34 <HAL_DMA_Abort+0x214>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d04a      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a74      	ldr	r2, [pc, #464]	@ (8001e38 <HAL_DMA_Abort+0x218>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d045      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a73      	ldr	r2, [pc, #460]	@ (8001e3c <HAL_DMA_Abort+0x21c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d040      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a71      	ldr	r2, [pc, #452]	@ (8001e40 <HAL_DMA_Abort+0x220>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d03b      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a70      	ldr	r2, [pc, #448]	@ (8001e44 <HAL_DMA_Abort+0x224>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d036      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e48 <HAL_DMA_Abort+0x228>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d031      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <HAL_DMA_Abort+0x22c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d02c      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e50 <HAL_DMA_Abort+0x230>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d027      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <HAL_DMA_Abort+0x234>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d022      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a68      	ldr	r2, [pc, #416]	@ (8001e58 <HAL_DMA_Abort+0x238>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01d      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a67      	ldr	r2, [pc, #412]	@ (8001e5c <HAL_DMA_Abort+0x23c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d018      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a65      	ldr	r2, [pc, #404]	@ (8001e60 <HAL_DMA_Abort+0x240>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a64      	ldr	r2, [pc, #400]	@ (8001e64 <HAL_DMA_Abort+0x244>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a62      	ldr	r2, [pc, #392]	@ (8001e68 <HAL_DMA_Abort+0x248>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d009      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a61      	ldr	r2, [pc, #388]	@ (8001e6c <HAL_DMA_Abort+0x24c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d004      	beq.n	8001cf6 <HAL_DMA_Abort+0xd6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5f      	ldr	r2, [pc, #380]	@ (8001e70 <HAL_DMA_Abort+0x250>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_DMA_Abort+0xda>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_DMA_Abort+0xdc>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 021e 	bic.w	r2, r2, #30
 8001d0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e00a      	b.n	8001d3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020e 	bic.w	r2, r2, #14
 8001d36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a3c      	ldr	r2, [pc, #240]	@ (8001e34 <HAL_DMA_Abort+0x214>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d072      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <HAL_DMA_Abort+0x218>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d06d      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a39      	ldr	r2, [pc, #228]	@ (8001e3c <HAL_DMA_Abort+0x21c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d068      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a37      	ldr	r2, [pc, #220]	@ (8001e40 <HAL_DMA_Abort+0x220>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d063      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a36      	ldr	r2, [pc, #216]	@ (8001e44 <HAL_DMA_Abort+0x224>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d05e      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a34      	ldr	r2, [pc, #208]	@ (8001e48 <HAL_DMA_Abort+0x228>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d059      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a33      	ldr	r2, [pc, #204]	@ (8001e4c <HAL_DMA_Abort+0x22c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d054      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a31      	ldr	r2, [pc, #196]	@ (8001e50 <HAL_DMA_Abort+0x230>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d04f      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a30      	ldr	r2, [pc, #192]	@ (8001e54 <HAL_DMA_Abort+0x234>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04a      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e58 <HAL_DMA_Abort+0x238>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d045      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e5c <HAL_DMA_Abort+0x23c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d040      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <HAL_DMA_Abort+0x240>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d03b      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2a      	ldr	r2, [pc, #168]	@ (8001e64 <HAL_DMA_Abort+0x244>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d036      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a28      	ldr	r2, [pc, #160]	@ (8001e68 <HAL_DMA_Abort+0x248>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d031      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_DMA_Abort+0x24c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d02c      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <HAL_DMA_Abort+0x250>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d027      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <HAL_DMA_Abort+0x254>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a22      	ldr	r2, [pc, #136]	@ (8001e78 <HAL_DMA_Abort+0x258>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	@ (8001e7c <HAL_DMA_Abort+0x25c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1f      	ldr	r2, [pc, #124]	@ (8001e80 <HAL_DMA_Abort+0x260>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e84 <HAL_DMA_Abort+0x264>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_DMA_Abort+0x268>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <HAL_DMA_Abort+0x26c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_DMA_Abort+0x20e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_DMA_Abort+0x270>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d132      	bne.n	8001e94 <HAL_DMA_Abort+0x274>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e031      	b.n	8001e96 <HAL_DMA_Abort+0x276>
 8001e32:	bf00      	nop
 8001e34:	40020010 	.word	0x40020010
 8001e38:	40020028 	.word	0x40020028
 8001e3c:	40020040 	.word	0x40020040
 8001e40:	40020058 	.word	0x40020058
 8001e44:	40020070 	.word	0x40020070
 8001e48:	40020088 	.word	0x40020088
 8001e4c:	400200a0 	.word	0x400200a0
 8001e50:	400200b8 	.word	0x400200b8
 8001e54:	40020410 	.word	0x40020410
 8001e58:	40020428 	.word	0x40020428
 8001e5c:	40020440 	.word	0x40020440
 8001e60:	40020458 	.word	0x40020458
 8001e64:	40020470 	.word	0x40020470
 8001e68:	40020488 	.word	0x40020488
 8001e6c:	400204a0 	.word	0x400204a0
 8001e70:	400204b8 	.word	0x400204b8
 8001e74:	58025408 	.word	0x58025408
 8001e78:	5802541c 	.word	0x5802541c
 8001e7c:	58025430 	.word	0x58025430
 8001e80:	58025444 	.word	0x58025444
 8001e84:	58025458 	.word	0x58025458
 8001e88:	5802546c 	.word	0x5802546c
 8001e8c:	58025480 	.word	0x58025480
 8001e90:	58025494 	.word	0x58025494
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6d      	ldr	r2, [pc, #436]	@ (8002064 <HAL_DMA_Abort+0x444>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04a      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002068 <HAL_DMA_Abort+0x448>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d045      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6a      	ldr	r2, [pc, #424]	@ (800206c <HAL_DMA_Abort+0x44c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d040      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a68      	ldr	r2, [pc, #416]	@ (8002070 <HAL_DMA_Abort+0x450>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d03b      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a67      	ldr	r2, [pc, #412]	@ (8002074 <HAL_DMA_Abort+0x454>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d036      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a65      	ldr	r2, [pc, #404]	@ (8002078 <HAL_DMA_Abort+0x458>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a64      	ldr	r2, [pc, #400]	@ (800207c <HAL_DMA_Abort+0x45c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d02c      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a62      	ldr	r2, [pc, #392]	@ (8002080 <HAL_DMA_Abort+0x460>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d027      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a61      	ldr	r2, [pc, #388]	@ (8002084 <HAL_DMA_Abort+0x464>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a5f      	ldr	r2, [pc, #380]	@ (8002088 <HAL_DMA_Abort+0x468>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01d      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5e      	ldr	r2, [pc, #376]	@ (800208c <HAL_DMA_Abort+0x46c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d018      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002090 <HAL_DMA_Abort+0x470>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_DMA_Abort+0x474>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a59      	ldr	r2, [pc, #356]	@ (8002098 <HAL_DMA_Abort+0x478>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a58      	ldr	r2, [pc, #352]	@ (800209c <HAL_DMA_Abort+0x47c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_Abort+0x32a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a56      	ldr	r2, [pc, #344]	@ (80020a0 <HAL_DMA_Abort+0x480>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <HAL_DMA_Abort+0x33c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_DMA_Abort+0x34c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f6c:	e013      	b.n	8001f96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f6e:	f7ff fcf7 	bl	8001960 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d90c      	bls.n	8001f96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2203      	movs	r2, #3
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e12d      	b.n	80021f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1e5      	bne.n	8001f6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8002064 <HAL_DMA_Abort+0x444>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d04a      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <HAL_DMA_Abort+0x448>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d045      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	@ (800206c <HAL_DMA_Abort+0x44c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d040      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002070 <HAL_DMA_Abort+0x450>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d03b      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a29      	ldr	r2, [pc, #164]	@ (8002074 <HAL_DMA_Abort+0x454>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d036      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a27      	ldr	r2, [pc, #156]	@ (8002078 <HAL_DMA_Abort+0x458>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d031      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a26      	ldr	r2, [pc, #152]	@ (800207c <HAL_DMA_Abort+0x45c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d02c      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a24      	ldr	r2, [pc, #144]	@ (8002080 <HAL_DMA_Abort+0x460>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d027      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <HAL_DMA_Abort+0x464>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_DMA_Abort+0x468>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01d      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a20      	ldr	r2, [pc, #128]	@ (800208c <HAL_DMA_Abort+0x46c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d018      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <HAL_DMA_Abort+0x470>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <HAL_DMA_Abort+0x474>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00e      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_DMA_Abort+0x478>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d009      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <HAL_DMA_Abort+0x47c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_DMA_Abort+0x422>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <HAL_DMA_Abort+0x480>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_DMA_Abort+0x426>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_DMA_Abort+0x428>
 8002046:	2300      	movs	r3, #0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d02b      	beq.n	80020a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	223f      	movs	r2, #63	@ 0x3f
 800205c:	409a      	lsls	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	e02a      	b.n	80020ba <HAL_DMA_Abort+0x49a>
 8002064:	40020010 	.word	0x40020010
 8002068:	40020028 	.word	0x40020028
 800206c:	40020040 	.word	0x40020040
 8002070:	40020058 	.word	0x40020058
 8002074:	40020070 	.word	0x40020070
 8002078:	40020088 	.word	0x40020088
 800207c:	400200a0 	.word	0x400200a0
 8002080:	400200b8 	.word	0x400200b8
 8002084:	40020410 	.word	0x40020410
 8002088:	40020428 	.word	0x40020428
 800208c:	40020440 	.word	0x40020440
 8002090:	40020458 	.word	0x40020458
 8002094:	40020470 	.word	0x40020470
 8002098:	40020488 	.word	0x40020488
 800209c:	400204a0 	.word	0x400204a0
 80020a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2201      	movs	r2, #1
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a4f      	ldr	r2, [pc, #316]	@ (80021fc <HAL_DMA_Abort+0x5dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d072      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_DMA_Abort+0x5e0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d06d      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002204 <HAL_DMA_Abort+0x5e4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d068      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_DMA_Abort+0x5e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d063      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a49      	ldr	r2, [pc, #292]	@ (800220c <HAL_DMA_Abort+0x5ec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d05e      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <HAL_DMA_Abort+0x5f0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d059      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a46      	ldr	r2, [pc, #280]	@ (8002214 <HAL_DMA_Abort+0x5f4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d054      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a44      	ldr	r2, [pc, #272]	@ (8002218 <HAL_DMA_Abort+0x5f8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04f      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a43      	ldr	r2, [pc, #268]	@ (800221c <HAL_DMA_Abort+0x5fc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d04a      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a41      	ldr	r2, [pc, #260]	@ (8002220 <HAL_DMA_Abort+0x600>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d045      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a40      	ldr	r2, [pc, #256]	@ (8002224 <HAL_DMA_Abort+0x604>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d040      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3e      	ldr	r2, [pc, #248]	@ (8002228 <HAL_DMA_Abort+0x608>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d03b      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3d      	ldr	r2, [pc, #244]	@ (800222c <HAL_DMA_Abort+0x60c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d036      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3b      	ldr	r2, [pc, #236]	@ (8002230 <HAL_DMA_Abort+0x610>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d031      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <HAL_DMA_Abort+0x614>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d02c      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a38      	ldr	r2, [pc, #224]	@ (8002238 <HAL_DMA_Abort+0x618>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d027      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a37      	ldr	r2, [pc, #220]	@ (800223c <HAL_DMA_Abort+0x61c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d022      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a35      	ldr	r2, [pc, #212]	@ (8002240 <HAL_DMA_Abort+0x620>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <HAL_DMA_Abort+0x624>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d018      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a32      	ldr	r2, [pc, #200]	@ (8002248 <HAL_DMA_Abort+0x628>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a31      	ldr	r2, [pc, #196]	@ (800224c <HAL_DMA_Abort+0x62c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00e      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2f      	ldr	r2, [pc, #188]	@ (8002250 <HAL_DMA_Abort+0x630>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2e      	ldr	r2, [pc, #184]	@ (8002254 <HAL_DMA_Abort+0x634>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_DMA_Abort+0x58a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002258 <HAL_DMA_Abort+0x638>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_DMA_Abort+0x58e>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_DMA_Abort+0x590>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40020010 	.word	0x40020010
 8002200:	40020028 	.word	0x40020028
 8002204:	40020040 	.word	0x40020040
 8002208:	40020058 	.word	0x40020058
 800220c:	40020070 	.word	0x40020070
 8002210:	40020088 	.word	0x40020088
 8002214:	400200a0 	.word	0x400200a0
 8002218:	400200b8 	.word	0x400200b8
 800221c:	40020410 	.word	0x40020410
 8002220:	40020428 	.word	0x40020428
 8002224:	40020440 	.word	0x40020440
 8002228:	40020458 	.word	0x40020458
 800222c:	40020470 	.word	0x40020470
 8002230:	40020488 	.word	0x40020488
 8002234:	400204a0 	.word	0x400204a0
 8002238:	400204b8 	.word	0x400204b8
 800223c:	58025408 	.word	0x58025408
 8002240:	5802541c 	.word	0x5802541c
 8002244:	58025430 	.word	0x58025430
 8002248:	58025444 	.word	0x58025444
 800224c:	58025458 	.word	0x58025458
 8002250:	5802546c 	.word	0x5802546c
 8002254:	58025480 	.word	0x58025480
 8002258:	58025494 	.word	0x58025494

0800225c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e237      	b.n	80026de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d004      	beq.n	8002284 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2280      	movs	r2, #128	@ 0x80
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e22c      	b.n	80026de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5c      	ldr	r2, [pc, #368]	@ (80023fc <HAL_DMA_Abort_IT+0x1a0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d04a      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5b      	ldr	r2, [pc, #364]	@ (8002400 <HAL_DMA_Abort_IT+0x1a4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d045      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a59      	ldr	r2, [pc, #356]	@ (8002404 <HAL_DMA_Abort_IT+0x1a8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d040      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a58      	ldr	r2, [pc, #352]	@ (8002408 <HAL_DMA_Abort_IT+0x1ac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d03b      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a56      	ldr	r2, [pc, #344]	@ (800240c <HAL_DMA_Abort_IT+0x1b0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d036      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a55      	ldr	r2, [pc, #340]	@ (8002410 <HAL_DMA_Abort_IT+0x1b4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d031      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a53      	ldr	r2, [pc, #332]	@ (8002414 <HAL_DMA_Abort_IT+0x1b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02c      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a52      	ldr	r2, [pc, #328]	@ (8002418 <HAL_DMA_Abort_IT+0x1bc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d027      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a50      	ldr	r2, [pc, #320]	@ (800241c <HAL_DMA_Abort_IT+0x1c0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d022      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002420 <HAL_DMA_Abort_IT+0x1c4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d01d      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002424 <HAL_DMA_Abort_IT+0x1c8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d018      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002428 <HAL_DMA_Abort_IT+0x1cc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a4a      	ldr	r2, [pc, #296]	@ (800242c <HAL_DMA_Abort_IT+0x1d0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a49      	ldr	r2, [pc, #292]	@ (8002430 <HAL_DMA_Abort_IT+0x1d4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a47      	ldr	r2, [pc, #284]	@ (8002434 <HAL_DMA_Abort_IT+0x1d8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_DMA_Abort_IT+0xc8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a46      	ldr	r2, [pc, #280]	@ (8002438 <HAL_DMA_Abort_IT+0x1dc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Abort_IT+0xcc>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_DMA_Abort_IT+0xce>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8086 	beq.w	800243c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2204      	movs	r2, #4
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2f      	ldr	r2, [pc, #188]	@ (80023fc <HAL_DMA_Abort_IT+0x1a0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04a      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2e      	ldr	r2, [pc, #184]	@ (8002400 <HAL_DMA_Abort_IT+0x1a4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d045      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2c      	ldr	r2, [pc, #176]	@ (8002404 <HAL_DMA_Abort_IT+0x1a8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2b      	ldr	r2, [pc, #172]	@ (8002408 <HAL_DMA_Abort_IT+0x1ac>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d03b      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a29      	ldr	r2, [pc, #164]	@ (800240c <HAL_DMA_Abort_IT+0x1b0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d036      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a28      	ldr	r2, [pc, #160]	@ (8002410 <HAL_DMA_Abort_IT+0x1b4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a26      	ldr	r2, [pc, #152]	@ (8002414 <HAL_DMA_Abort_IT+0x1b8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02c      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <HAL_DMA_Abort_IT+0x1bc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a23      	ldr	r2, [pc, #140]	@ (800241c <HAL_DMA_Abort_IT+0x1c0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a22      	ldr	r2, [pc, #136]	@ (8002420 <HAL_DMA_Abort_IT+0x1c4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a20      	ldr	r2, [pc, #128]	@ (8002424 <HAL_DMA_Abort_IT+0x1c8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002428 <HAL_DMA_Abort_IT+0x1cc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <HAL_DMA_Abort_IT+0x1d0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <HAL_DMA_Abort_IT+0x1d4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <HAL_DMA_Abort_IT+0x1d8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x17c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a19      	ldr	r2, [pc, #100]	@ (8002438 <HAL_DMA_Abort_IT+0x1dc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d108      	bne.n	80023ea <HAL_DMA_Abort_IT+0x18e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e178      	b.n	80026dc <HAL_DMA_Abort_IT+0x480>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e16f      	b.n	80026dc <HAL_DMA_Abort_IT+0x480>
 80023fc:	40020010 	.word	0x40020010
 8002400:	40020028 	.word	0x40020028
 8002404:	40020040 	.word	0x40020040
 8002408:	40020058 	.word	0x40020058
 800240c:	40020070 	.word	0x40020070
 8002410:	40020088 	.word	0x40020088
 8002414:	400200a0 	.word	0x400200a0
 8002418:	400200b8 	.word	0x400200b8
 800241c:	40020410 	.word	0x40020410
 8002420:	40020428 	.word	0x40020428
 8002424:	40020440 	.word	0x40020440
 8002428:	40020458 	.word	0x40020458
 800242c:	40020470 	.word	0x40020470
 8002430:	40020488 	.word	0x40020488
 8002434:	400204a0 	.word	0x400204a0
 8002438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 020e 	bic.w	r2, r2, #14
 800244a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6c      	ldr	r2, [pc, #432]	@ (8002604 <HAL_DMA_Abort_IT+0x3a8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d04a      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6b      	ldr	r2, [pc, #428]	@ (8002608 <HAL_DMA_Abort_IT+0x3ac>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d045      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a69      	ldr	r2, [pc, #420]	@ (800260c <HAL_DMA_Abort_IT+0x3b0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d040      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a68      	ldr	r2, [pc, #416]	@ (8002610 <HAL_DMA_Abort_IT+0x3b4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d03b      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a66      	ldr	r2, [pc, #408]	@ (8002614 <HAL_DMA_Abort_IT+0x3b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d036      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a65      	ldr	r2, [pc, #404]	@ (8002618 <HAL_DMA_Abort_IT+0x3bc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d031      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a63      	ldr	r2, [pc, #396]	@ (800261c <HAL_DMA_Abort_IT+0x3c0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02c      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a62      	ldr	r2, [pc, #392]	@ (8002620 <HAL_DMA_Abort_IT+0x3c4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d027      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a60      	ldr	r2, [pc, #384]	@ (8002624 <HAL_DMA_Abort_IT+0x3c8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d022      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002628 <HAL_DMA_Abort_IT+0x3cc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d01d      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a5d      	ldr	r2, [pc, #372]	@ (800262c <HAL_DMA_Abort_IT+0x3d0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d018      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5c      	ldr	r2, [pc, #368]	@ (8002630 <HAL_DMA_Abort_IT+0x3d4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002634 <HAL_DMA_Abort_IT+0x3d8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a59      	ldr	r2, [pc, #356]	@ (8002638 <HAL_DMA_Abort_IT+0x3dc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a57      	ldr	r2, [pc, #348]	@ (800263c <HAL_DMA_Abort_IT+0x3e0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_DMA_Abort_IT+0x290>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a56      	ldr	r2, [pc, #344]	@ (8002640 <HAL_DMA_Abort_IT+0x3e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <HAL_DMA_Abort_IT+0x2a2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e007      	b.n	800250e <HAL_DMA_Abort_IT+0x2b2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3c      	ldr	r2, [pc, #240]	@ (8002604 <HAL_DMA_Abort_IT+0x3a8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d072      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3a      	ldr	r2, [pc, #232]	@ (8002608 <HAL_DMA_Abort_IT+0x3ac>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d06d      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a39      	ldr	r2, [pc, #228]	@ (800260c <HAL_DMA_Abort_IT+0x3b0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d068      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a37      	ldr	r2, [pc, #220]	@ (8002610 <HAL_DMA_Abort_IT+0x3b4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d063      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a36      	ldr	r2, [pc, #216]	@ (8002614 <HAL_DMA_Abort_IT+0x3b8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d05e      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a34      	ldr	r2, [pc, #208]	@ (8002618 <HAL_DMA_Abort_IT+0x3bc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d059      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a33      	ldr	r2, [pc, #204]	@ (800261c <HAL_DMA_Abort_IT+0x3c0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d054      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <HAL_DMA_Abort_IT+0x3c4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d04f      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a30      	ldr	r2, [pc, #192]	@ (8002624 <HAL_DMA_Abort_IT+0x3c8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d04a      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2e      	ldr	r2, [pc, #184]	@ (8002628 <HAL_DMA_Abort_IT+0x3cc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d045      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2d      	ldr	r2, [pc, #180]	@ (800262c <HAL_DMA_Abort_IT+0x3d0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d040      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2b      	ldr	r2, [pc, #172]	@ (8002630 <HAL_DMA_Abort_IT+0x3d4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d03b      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2a      	ldr	r2, [pc, #168]	@ (8002634 <HAL_DMA_Abort_IT+0x3d8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d036      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a28      	ldr	r2, [pc, #160]	@ (8002638 <HAL_DMA_Abort_IT+0x3dc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d031      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a27      	ldr	r2, [pc, #156]	@ (800263c <HAL_DMA_Abort_IT+0x3e0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d02c      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a25      	ldr	r2, [pc, #148]	@ (8002640 <HAL_DMA_Abort_IT+0x3e4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d027      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <HAL_DMA_Abort_IT+0x3e8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d022      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a22      	ldr	r2, [pc, #136]	@ (8002648 <HAL_DMA_Abort_IT+0x3ec>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01d      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a21      	ldr	r2, [pc, #132]	@ (800264c <HAL_DMA_Abort_IT+0x3f0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d018      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002650 <HAL_DMA_Abort_IT+0x3f4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1e      	ldr	r2, [pc, #120]	@ (8002654 <HAL_DMA_Abort_IT+0x3f8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00e      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_DMA_Abort_IT+0x3fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <HAL_DMA_Abort_IT+0x400>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_Abort_IT+0x3a2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	@ (8002660 <HAL_DMA_Abort_IT+0x404>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d132      	bne.n	8002664 <HAL_DMA_Abort_IT+0x408>
 80025fe:	2301      	movs	r3, #1
 8002600:	e031      	b.n	8002666 <HAL_DMA_Abort_IT+0x40a>
 8002602:	bf00      	nop
 8002604:	40020010 	.word	0x40020010
 8002608:	40020028 	.word	0x40020028
 800260c:	40020040 	.word	0x40020040
 8002610:	40020058 	.word	0x40020058
 8002614:	40020070 	.word	0x40020070
 8002618:	40020088 	.word	0x40020088
 800261c:	400200a0 	.word	0x400200a0
 8002620:	400200b8 	.word	0x400200b8
 8002624:	40020410 	.word	0x40020410
 8002628:	40020428 	.word	0x40020428
 800262c:	40020440 	.word	0x40020440
 8002630:	40020458 	.word	0x40020458
 8002634:	40020470 	.word	0x40020470
 8002638:	40020488 	.word	0x40020488
 800263c:	400204a0 	.word	0x400204a0
 8002640:	400204b8 	.word	0x400204b8
 8002644:	58025408 	.word	0x58025408
 8002648:	5802541c 	.word	0x5802541c
 800264c:	58025430 	.word	0x58025430
 8002650:	58025444 	.word	0x58025444
 8002654:	58025458 	.word	0x58025458
 8002658:	5802546c 	.word	0x5802546c
 800265c:	58025480 	.word	0x58025480
 8002660:	58025494 	.word	0x58025494
 8002664:	2300      	movs	r3, #0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d028      	beq.n	80026bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002678:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2201      	movs	r2, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002698:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop

080026e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0e3      	b.n	80028c2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2223      	movs	r2, #35	@ 0x23
 8002708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe fcb1 	bl	8001074 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b6e      	ldr	r3, [pc, #440]	@ (80028cc <HAL_ETH_Init+0x1e4>)
 8002714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002718:	4a6c      	ldr	r2, [pc, #432]	@ (80028cc <HAL_ETH_Init+0x1e4>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002722:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_ETH_Init+0x1e4>)
 8002724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7a1b      	ldrb	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff f94d 	bl	80019d8 <HAL_SYSCFG_ETHInterfaceSelect>
 800273e:	e003      	b.n	8002748 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002740:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002744:	f7ff f948 	bl	80019d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002748:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <HAL_ETH_Init+0x1e8>)
 800274a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002762:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002764:	f7ff f8fc 	bl	8001960 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800276a:	e011      	b.n	8002790 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800276c:	f7ff f8f8 	bl	8001960 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800277a:	d909      	bls.n	8002790 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2204      	movs	r2, #4
 8002780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	22e0      	movs	r2, #224	@ 0xe0
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e098      	b.n	80028c2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e4      	bne.n	800276c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f89e 	bl	80028e4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80027a8:	f002 fca2 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4a49      	ldr	r2, [pc, #292]	@ (80028d4 <HAL_ETH_Init+0x1ec>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9a      	lsrs	r2, r3, #18
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3a01      	subs	r2, #1
 80027bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fa81 	bl	8002cc8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80027d2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027e2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	22e0      	movs	r2, #224	@ 0xe0
 80027fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e05d      	b.n	80028c2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800280e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002812:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_ETH_Init+0x1f0>)
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6952      	ldr	r2, [r2, #20]
 800281a:	0051      	lsls	r1, r2, #1
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002826:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fae9 	bl	8002e02 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fb2f 	bl	8002e94 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	3305      	adds	r3, #5
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	021a      	lsls	r2, r3, #8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	3303      	adds	r3, #3
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	061a      	lsls	r2, r3, #24
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	3302      	adds	r3, #2
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	3301      	adds	r3, #1
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002874:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002882:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002884:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <HAL_ETH_Init+0x1f4>)
 8002896:	430b      	orrs	r3, r1
 8002898:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <HAL_ETH_Init+0x1f8>)
 80028aa:	430b      	orrs	r3, r1
 80028ac:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2210      	movs	r2, #16
 80028bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	58000400 	.word	0x58000400
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	ffff8001 	.word	0xffff8001
 80028dc:	0c020060 	.word	0x0c020060
 80028e0:	0c20c000 	.word	0x0c20c000

080028e4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028fe:	f002 fbf7 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8002902:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4a1a      	ldr	r2, [pc, #104]	@ (8002970 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d804      	bhi.n	8002916 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e022      	b.n	800295c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_ETH_SetMDIOClockRange+0x90>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d204      	bcs.n	8002928 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e019      	b.n	800295c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <HAL_ETH_SetMDIOClockRange+0x94>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d915      	bls.n	800295c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d804      	bhi.n	8002942 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e00c      	b.n	800295c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d804      	bhi.n	8002954 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e003      	b.n	800295c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	02160ebf 	.word	0x02160ebf
 8002974:	03938700 	.word	0x03938700
 8002978:	05f5e0ff 	.word	0x05f5e0ff
 800297c:	08f0d17f 	.word	0x08f0d17f
 8002980:	0ee6b27f 	.word	0x0ee6b27f

08002984 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800299e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7b1b      	ldrb	r3, [r3, #12]
 80029a4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80029a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	7b5b      	ldrb	r3, [r3, #13]
 80029ac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80029ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	7b9b      	ldrb	r3, [r3, #14]
 80029b4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80029b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7bdb      	ldrb	r3, [r3, #15]
 80029bc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80029be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	7c12      	ldrb	r2, [r2, #16]
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	d102      	bne.n	80029ce <ETH_SetMACConfig+0x4a>
 80029c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029cc:	e000      	b.n	80029d0 <ETH_SetMACConfig+0x4c>
 80029ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	7c52      	ldrb	r2, [r2, #17]
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	d102      	bne.n	80029e0 <ETH_SetMACConfig+0x5c>
 80029da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029de:	e000      	b.n	80029e2 <ETH_SetMACConfig+0x5e>
 80029e0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	7c9b      	ldrb	r3, [r3, #18]
 80029e8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029ea:	431a      	orrs	r2, r3
               macconf->Speed |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80029f0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80029f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	7f1b      	ldrb	r3, [r3, #28]
 80029fc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80029fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	7f5b      	ldrb	r3, [r3, #29]
 8002a04:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002a06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	7f92      	ldrb	r2, [r2, #30]
 8002a0c:	2a00      	cmp	r2, #0
 8002a0e:	d102      	bne.n	8002a16 <ETH_SetMACConfig+0x92>
 8002a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a14:	e000      	b.n	8002a18 <ETH_SetMACConfig+0x94>
 8002a16:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002a18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	7fdb      	ldrb	r3, [r3, #31]
 8002a1e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d102      	bne.n	8002a32 <ETH_SetMACConfig+0xae>
 8002a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a30:	e000      	b.n	8002a34 <ETH_SetMACConfig+0xb0>
 8002a32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002a34:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a42:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002a44:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b56      	ldr	r3, [pc, #344]	@ (8002bb0 <ETH_SetMACConfig+0x22c>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a66:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a6e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a70:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a78:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002a7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002a82:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002a84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	d102      	bne.n	8002a96 <ETH_SetMACConfig+0x112>
 8002a90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a94:	e000      	b.n	8002a98 <ETH_SetMACConfig+0x114>
 8002a96:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002a98:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4b42      	ldr	r3, [pc, #264]	@ (8002bb4 <ETH_SetMACConfig+0x230>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002abc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb8 <ETH_SetMACConfig+0x234>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ae0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ae6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d101      	bne.n	8002af6 <ETH_SetMACConfig+0x172>
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	e000      	b.n	8002af8 <ETH_SetMACConfig+0x174>
 8002af6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002af8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b0a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002b20:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002b28:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	f023 0103 	bic.w	r1, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002b4e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002b6a:	2a00      	cmp	r2, #0
 8002b6c:	d101      	bne.n	8002b72 <ETH_SetMACConfig+0x1ee>
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	e000      	b.n	8002b74 <ETH_SetMACConfig+0x1f0>
 8002b72:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002b74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002b7c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002b86:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002b94:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	00048083 	.word	0x00048083
 8002bb4:	c0f88000 	.word	0xc0f88000
 8002bb8:	fffffef0 	.word	0xfffffef0

08002bbc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <ETH_SetDMAConfig+0xf8>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6811      	ldr	r1, [r2, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002be2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	791b      	ldrb	r3, [r3, #4]
 8002be8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	7b1b      	ldrb	r3, [r3, #12]
 8002bf4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb8 <ETH_SetDMAConfig+0xfc>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c14:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	7b5b      	ldrb	r3, [r3, #13]
 8002c1a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002c30:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <ETH_SetDMAConfig+0x100>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c40:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7d1b      	ldrb	r3, [r3, #20]
 8002c4c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c4e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	7f5b      	ldrb	r3, [r3, #29]
 8002c54:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c62:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002c66:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <ETH_SetDMAConfig+0x104>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c76:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	7f1b      	ldrb	r3, [r3, #28]
 8002c7e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c90:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <ETH_SetDMAConfig+0x108>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ca4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	ffff87fd 	.word	0xffff87fd
 8002cb8:	ffff2ffe 	.word	0xffff2ffe
 8002cbc:	fffec000 	.word	0xfffec000
 8002cc0:	ffc0efef 	.word	0xffc0efef
 8002cc4:	7fc0ffff 	.word	0x7fc0ffff

08002cc8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b0a4      	sub	sp, #144	@ 0x90
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d08:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002d20:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002d24:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002d42:	2300      	movs	r3, #0
 8002d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002d60:	2320      	movs	r3, #32
 8002d62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002d72:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d7c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002da2:	2300      	movs	r3, #0
 8002da4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fde6 	bl	8002984 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dd2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002dd6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ddc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002de0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002de8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002dec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fee1 	bl	8002bbc <ETH_SetDMAConfig>
}
 8002dfa:	bf00      	nop
 8002dfc:	3790      	adds	r7, #144	@ 0x90
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e01d      	b.n	8002e4c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68d9      	ldr	r1, [r3, #12]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	3206      	adds	r2, #6
 8002e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d9de      	bls.n	8002e10 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e60:	461a      	mov	r2, r3
 8002e62:	2303      	movs	r3, #3
 8002e64:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e74:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e84:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e023      	b.n	8002eea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	3212      	adds	r2, #18
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d9d8      	bls.n	8002ea2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f16:	461a      	mov	r2, r3
 8002f18:	2303      	movs	r3, #3
 8002f1a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f3e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f5e:	4b89      	ldr	r3, [pc, #548]	@ (8003184 <HAL_GPIO_Init+0x234>)
 8002f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f62:	e194      	b.n	800328e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8186 	beq.w	8003288 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d005      	beq.n	8002f94 <HAL_GPIO_Init+0x44>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d130      	bne.n	8002ff6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fca:	2201      	movs	r2, #1
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0201 	and.w	r2, r3, #1
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d017      	beq.n	8003032 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d123      	bne.n	8003086 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	08da      	lsrs	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3208      	adds	r2, #8
 8003046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	69b9      	ldr	r1, [r7, #24]
 8003082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	2203      	movs	r2, #3
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80e0 	beq.w	8003288 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003188 <HAL_GPIO_Init+0x238>)
 80030ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003188 <HAL_GPIO_Init+0x238>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80030d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003188 <HAL_GPIO_Init+0x238>)
 80030da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e6:	4a29      	ldr	r2, [pc, #164]	@ (800318c <HAL_GPIO_Init+0x23c>)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a20      	ldr	r2, [pc, #128]	@ (8003190 <HAL_GPIO_Init+0x240>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d052      	beq.n	80031b8 <HAL_GPIO_Init+0x268>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_GPIO_Init+0x244>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_GPIO_Init+0x22e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1e      	ldr	r2, [pc, #120]	@ (8003198 <HAL_GPIO_Init+0x248>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02b      	beq.n	800317a <HAL_GPIO_Init+0x22a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <HAL_GPIO_Init+0x24c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d025      	beq.n	8003176 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1c      	ldr	r2, [pc, #112]	@ (80031a0 <HAL_GPIO_Init+0x250>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_GPIO_Init+0x254>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_GPIO_Init+0x258>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x21a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_GPIO_Init+0x25c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x216>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <HAL_GPIO_Init+0x260>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x212>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <HAL_GPIO_Init+0x264>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x20e>
 800315a:	2309      	movs	r3, #9
 800315c:	e02d      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 800315e:	230a      	movs	r3, #10
 8003160:	e02b      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 8003162:	2308      	movs	r3, #8
 8003164:	e029      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 8003166:	2307      	movs	r3, #7
 8003168:	e027      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 800316a:	2306      	movs	r3, #6
 800316c:	e025      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 800316e:	2305      	movs	r3, #5
 8003170:	e023      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 8003172:	2304      	movs	r3, #4
 8003174:	e021      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 8003176:	2303      	movs	r3, #3
 8003178:	e01f      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 800317a:	2302      	movs	r3, #2
 800317c:	e01d      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 800317e:	2301      	movs	r3, #1
 8003180:	e01b      	b.n	80031ba <HAL_GPIO_Init+0x26a>
 8003182:	bf00      	nop
 8003184:	58000080 	.word	0x58000080
 8003188:	58024400 	.word	0x58024400
 800318c:	58000400 	.word	0x58000400
 8003190:	58020000 	.word	0x58020000
 8003194:	58020400 	.word	0x58020400
 8003198:	58020800 	.word	0x58020800
 800319c:	58020c00 	.word	0x58020c00
 80031a0:	58021000 	.word	0x58021000
 80031a4:	58021400 	.word	0x58021400
 80031a8:	58021800 	.word	0x58021800
 80031ac:	58021c00 	.word	0x58021c00
 80031b0:	58022000 	.word	0x58022000
 80031b4:	58022400 	.word	0x58022400
 80031b8:	2300      	movs	r3, #0
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	f002 0203 	and.w	r2, r2, #3
 80031c0:	0092      	lsls	r2, r2, #2
 80031c2:	4093      	lsls	r3, r2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ca:	4938      	ldr	r1, [pc, #224]	@ (80032ac <HAL_GPIO_Init+0x35c>)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800322c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	3301      	adds	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	f47f ae63 	bne.w	8002f64 <HAL_GPIO_Init+0x14>
  }
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	3724      	adds	r7, #36	@ 0x24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	58000400 	.word	0x58000400

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032cc:	e003      	b.n	80032d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fcf3 	bl	8000cf4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e08b      	b.n	8003442 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd ff66 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	@ 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e006      	b.n	80033a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800339e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d108      	bne.n	80033ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	e007      	b.n	80033ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <HAL_I2C_Init+0x134>)
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69d9      	ldr	r1, [r3, #28]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	02008000 	.word	0x02008000

08003450 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	461a      	mov	r2, r3
 800345c:	460b      	mov	r3, r1
 800345e:	817b      	strh	r3, [r7, #10]
 8003460:	4613      	mov	r3, r2
 8003462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b20      	cmp	r3, #32
 800346e:	f040 80fd 	bne.w	800366c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_Master_Transmit+0x30>
 800347c:	2302      	movs	r3, #2
 800347e:	e0f6      	b.n	800366e <HAL_I2C_Master_Transmit+0x21e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003488:	f7fe fa6a 	bl	8001960 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2319      	movs	r3, #25
 8003494:	2201      	movs	r2, #1
 8003496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa0a 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0e1      	b.n	800366e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2221      	movs	r2, #33	@ 0x21
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2210      	movs	r2, #16
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2bff      	cmp	r3, #255	@ 0xff
 80034da:	d906      	bls.n	80034ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	22ff      	movs	r2, #255	@ 0xff
 80034e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80034e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e007      	b.n	80034fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80034f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d024      	beq.n	800354c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	8979      	ldrh	r1, [r7, #10]
 800353e:	4b4e      	ldr	r3, [pc, #312]	@ (8003678 <HAL_I2C_Master_Transmit+0x228>)
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fc05 	bl	8003d54 <I2C_TransferConfig>
 800354a:	e066      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	4b48      	ldr	r3, [pc, #288]	@ (8003678 <HAL_I2C_Master_Transmit+0x228>)
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fbfa 	bl	8003d54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003560:	e05b      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	6a39      	ldr	r1, [r7, #32]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f9fd 	bl	8003966 <I2C_WaitOnTXISFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07b      	b.n	800366e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d034      	beq.n	800361a <HAL_I2C_Master_Transmit+0x1ca>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d130      	bne.n	800361a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2200      	movs	r2, #0
 80035c0:	2180      	movs	r1, #128	@ 0x80
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f976 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e04d      	b.n	800366e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2bff      	cmp	r3, #255	@ 0xff
 80035da:	d90e      	bls.n	80035fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	22ff      	movs	r2, #255	@ 0xff
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	8979      	ldrh	r1, [r7, #10]
 80035ea:	2300      	movs	r3, #0
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fbae 	bl	8003d54 <I2C_TransferConfig>
 80035f8:	e00f      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fb9d 	bl	8003d54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d19e      	bne.n	8003562 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	6a39      	ldr	r1, [r7, #32]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f9e3 	bl	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e01a      	b.n	800366e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2220      	movs	r2, #32
 800363e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <HAL_I2C_Master_Transmit+0x22c>)
 800364c:	400b      	ands	r3, r1
 800364e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	80002000 	.word	0x80002000
 800367c:	fe00e800 	.word	0xfe00e800

08003680 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	460b      	mov	r3, r1
 800368e:	817b      	strh	r3, [r7, #10]
 8003690:	4613      	mov	r3, r2
 8003692:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b20      	cmp	r3, #32
 800369e:	f040 80db 	bne.w	8003858 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_I2C_Master_Receive+0x30>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e0d4      	b.n	800385a <HAL_I2C_Master_Receive+0x1da>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe f952 	bl	8001960 <HAL_GetTick>
 80036bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2319      	movs	r3, #25
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8f2 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0bf      	b.n	800385a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2222      	movs	r2, #34	@ 0x22
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2210      	movs	r2, #16
 80036e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	893a      	ldrh	r2, [r7, #8]
 80036fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2bff      	cmp	r3, #255	@ 0xff
 800370a:	d90e      	bls.n	800372a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	22ff      	movs	r2, #255	@ 0xff
 8003710:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003716:	b2da      	uxtb	r2, r3
 8003718:	8979      	ldrh	r1, [r7, #10]
 800371a:	4b52      	ldr	r3, [pc, #328]	@ (8003864 <HAL_I2C_Master_Receive+0x1e4>)
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fb16 	bl	8003d54 <I2C_TransferConfig>
 8003728:	e06d      	b.n	8003806 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	b2da      	uxtb	r2, r3
 800373a:	8979      	ldrh	r1, [r7, #10]
 800373c:	4b49      	ldr	r3, [pc, #292]	@ (8003864 <HAL_I2C_Master_Receive+0x1e4>)
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb05 	bl	8003d54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800374a:	e05c      	b.n	8003806 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	6a39      	ldr	r1, [r7, #32]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f993 	bl	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e07c      	b.n	800385a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d034      	beq.n	8003806 <HAL_I2C_Master_Receive+0x186>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d130      	bne.n	8003806 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2180      	movs	r1, #128	@ 0x80
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f880 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e04d      	b.n	800385a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2bff      	cmp	r3, #255	@ 0xff
 80037c6:	d90e      	bls.n	80037e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22ff      	movs	r2, #255	@ 0xff
 80037cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fab8 	bl	8003d54 <I2C_TransferConfig>
 80037e4:	e00f      	b.n	8003806 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	8979      	ldrh	r1, [r7, #10]
 80037f8:	2300      	movs	r3, #0
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 faa7 	bl	8003d54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d19d      	bne.n	800374c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	6a39      	ldr	r1, [r7, #32]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f8ed 	bl	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01a      	b.n	800385a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2220      	movs	r2, #32
 800382a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <HAL_I2C_Master_Receive+0x1e8>)
 8003838:	400b      	ands	r3, r1
 800383a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	80002400 	.word	0x80002400
 8003868:	fe00e800 	.word	0xfe00e800

0800386c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d103      	bne.n	800388a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d007      	beq.n	80038a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	619a      	str	r2, [r3, #24]
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	e03b      	b.n	800393e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f962 	bl	8003b94 <I2C_IsErrorOccurred>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e041      	b.n	800395e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d02d      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe f83d 	bl	8001960 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d122      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	429a      	cmp	r2, r3
 8003914:	d113      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d0b4      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003972:	e033      	b.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f90b 	bl	8003b94 <I2C_IsErrorOccurred>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e031      	b.n	80039ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d025      	beq.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7fd ffe6 	bl	8001960 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11a      	bne.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d013      	beq.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e007      	b.n	80039ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d1c4      	bne.n	8003974 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a00:	e02f      	b.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f8c4 	bl	8003b94 <I2C_IsErrorOccurred>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e02d      	b.n	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fd ffa3 	bl	8001960 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11a      	bne.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d013      	beq.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e007      	b.n	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d1c8      	bne.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a8c:	e071      	b.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f87e 	bl	8003b94 <I2C_IsErrorOccurred>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d13b      	bne.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d138      	bne.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d105      	bne.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d121      	bne.n	8003b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2220      	movs	r2, #32
 8003af2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003b00:	400b      	ands	r3, r1
 8003b02:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	75fb      	strb	r3, [r7, #23]
 8003b20:	e002      	b.n	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003b28:	f7fd ff1a 	bl	8001960 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d119      	bne.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d116      	bne.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d00f      	beq.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d002      	beq.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d083      	beq.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	fe00e800 	.word	0xfe00e800

08003b94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d068      	beq.n	8003c92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bc8:	e049      	b.n	8003c5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d045      	beq.n	8003c5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fd fec5 	bl	8001960 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_IsErrorOccurred+0x54>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d13a      	bne.n	8003c5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c0a:	d121      	bne.n	8003c50 <I2C_IsErrorOccurred+0xbc>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c12:	d01d      	beq.n	8003c50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d01a      	beq.n	8003c50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c2a:	f7fd fe99 	bl	8001960 <HAL_GetTick>
 8003c2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c30:	e00e      	b.n	8003c50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c32:	f7fd fe95 	bl	8001960 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b19      	cmp	r3, #25
 8003c3e:	d907      	bls.n	8003c50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f043 0320 	orr.w	r3, r3, #32
 8003c46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c4e:	e006      	b.n	8003c5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d1e9      	bne.n	8003c32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d003      	beq.n	8003c74 <I2C_IsErrorOccurred+0xe0>
 8003c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0aa      	beq.n	8003bca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d103      	bne.n	8003c84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f043 0308 	orr.w	r3, r3, #8
 8003ccc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01c      	beq.n	8003d42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fdaf 	bl	800386c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <I2C_IsErrorOccurred+0x1bc>)
 8003d1a:	400b      	ands	r3, r1
 8003d1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3728      	adds	r7, #40	@ 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	4613      	mov	r3, r2
 8003d64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d6c:	7a7b      	ldrb	r3, [r7, #9]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	0d5b      	lsrs	r3, r3, #21
 8003d8e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d92:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <I2C_TransferConfig+0x60>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	43db      	mvns	r3, r3
 8003d98:	ea02 0103 	and.w	r1, r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	03ff63ff 	.word	0x03ff63ff

08003db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d138      	bne.n	8003e40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e032      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	@ 0x24
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d139      	bne.n	8003ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e033      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	@ 0x24
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0fe      	b.n	80040f6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fd fafb 	bl	8001508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f006 f9b2 	bl	800a288 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7c1a      	ldrb	r2, [r3, #16]
 8003f2c:	f88d 2000 	strb.w	r2, [sp]
 8003f30:	3304      	adds	r3, #4
 8003f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f34:	f006 f936 	bl	800a1a4 <USB_CoreInit>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0d5      	b.n	80040f6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f006 f9aa 	bl	800a2aa <USB_SetCurrentMode>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0c6      	b.n	80040f6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e04a      	b.n	8004004 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3315      	adds	r3, #21
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3314      	adds	r3, #20
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	b298      	uxth	r0, r3
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	332e      	adds	r3, #46	@ 0x2e
 8003faa:	4602      	mov	r2, r0
 8003fac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	331c      	adds	r3, #28
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3324      	adds	r3, #36	@ 0x24
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	3301      	adds	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	791b      	ldrb	r3, [r3, #4]
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	429a      	cmp	r2, r3
 800400c:	d3af      	bcc.n	8003f6e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e044      	b.n	800409e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	3301      	adds	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3b5      	bcc.n	8004014 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7c1a      	ldrb	r2, [r3, #16]
 80040b0:	f88d 2000 	strb.w	r2, [sp]
 80040b4:	3304      	adds	r3, #4
 80040b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b8:	f006 f944 	bl	800a344 <USB_DevInit>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e013      	b.n	80040f6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7b1b      	ldrb	r3, [r3, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d102      	bne.n	80040ea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f80b 	bl	8004100 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f006 faff 	bl	800a6f2 <USB_DevDisconnect>

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_PCDEx_ActivateLPM+0x44>)
 8004130:	4313      	orrs	r3, r2
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	10000003 	.word	0x10000003

08004148 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004150:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d00a      	beq.n	8004172 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800415c:	4b16      	ldr	r3, [pc, #88]	@ (80041b8 <HAL_PWREx_ConfigSupply+0x70>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e01f      	b.n	80041ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e01d      	b.n	80041ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004172:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	490f      	ldr	r1, [pc, #60]	@ (80041b8 <HAL_PWREx_ConfigSupply+0x70>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4313      	orrs	r3, r2
 8004180:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004182:	f7fd fbed 	bl	8001960 <HAL_GetTick>
 8004186:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004188:	e009      	b.n	800419e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800418a:	f7fd fbe9 	bl	8001960 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004198:	d901      	bls.n	800419e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e007      	b.n	80041ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_PWREx_ConfigSupply+0x70>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041aa:	d1ee      	bne.n	800418a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	58024800 	.word	0x58024800

080041bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80041c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ca:	60d3      	str	r3, [r2, #12]
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58024800 	.word	0x58024800

080041dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	@ 0x30
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f000 bc48 	b.w	8004a80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8088 	beq.w	800430e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041fe:	4b99      	ldr	r3, [pc, #612]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004208:	4b96      	ldr	r3, [pc, #600]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004210:	2b10      	cmp	r3, #16
 8004212:	d007      	beq.n	8004224 <HAL_RCC_OscConfig+0x48>
 8004214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004216:	2b18      	cmp	r3, #24
 8004218:	d111      	bne.n	800423e <HAL_RCC_OscConfig+0x62>
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d10c      	bne.n	800423e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	4b8f      	ldr	r3, [pc, #572]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d06d      	beq.n	800430c <HAL_RCC_OscConfig+0x130>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d169      	bne.n	800430c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f000 bc21 	b.w	8004a80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x7a>
 8004248:	4b86      	ldr	r3, [pc, #536]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a85      	ldr	r2, [pc, #532]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e02e      	b.n	80042b4 <HAL_RCC_OscConfig+0xd8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x9c>
 800425e:	4b81      	ldr	r3, [pc, #516]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a80      	ldr	r2, [pc, #512]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b7e      	ldr	r3, [pc, #504]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7d      	ldr	r2, [pc, #500]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xd8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0xc0>
 8004282:	4b78      	ldr	r3, [pc, #480]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a77      	ldr	r2, [pc, #476]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b75      	ldr	r3, [pc, #468]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a74      	ldr	r2, [pc, #464]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xd8>
 800429c:	4b71      	ldr	r3, [pc, #452]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a70      	ldr	r2, [pc, #448]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b6e      	ldr	r3, [pc, #440]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6d      	ldr	r2, [pc, #436]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fb50 	bl	8001960 <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fd fb4c 	bl	8001960 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	@ 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e3d4      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d6:	4b63      	ldr	r3, [pc, #396]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe8>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fb3c 	bl	8001960 <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fd fb38 	bl	8001960 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	@ 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e3c0      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042fe:	4b59      	ldr	r3, [pc, #356]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x110>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80ca 	beq.w	80044b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800431c:	4b51      	ldr	r3, [pc, #324]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004324:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004326:	4b4f      	ldr	r3, [pc, #316]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_RCC_OscConfig+0x166>
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	2b18      	cmp	r3, #24
 8004336:	d156      	bne.n	80043e6 <HAL_RCC_OscConfig+0x20a>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d151      	bne.n	80043e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004342:	4b48      	ldr	r3, [pc, #288]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x17e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e392      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800435a:	4b42      	ldr	r3, [pc, #264]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0219 	bic.w	r2, r3, #25
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	493f      	ldr	r1, [pc, #252]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd faf8 	bl	8001960 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004374:	f7fd faf4 	bl	8001960 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e37c      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004386:	4b37      	ldr	r3, [pc, #220]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	f7fd fb15 	bl	80019c0 <HAL_GetREVID>
 8004396:	4603      	mov	r3, r0
 8004398:	f241 0203 	movw	r2, #4099	@ 0x1003
 800439c:	4293      	cmp	r3, r2
 800439e:	d817      	bhi.n	80043d0 <HAL_RCC_OscConfig+0x1f4>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d108      	bne.n	80043ba <HAL_RCC_OscConfig+0x1de>
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80043b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b8:	e07a      	b.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	4926      	ldr	r1, [pc, #152]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ce:	e06f      	b.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d0:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	4921      	ldr	r1, [pc, #132]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e4:	e064      	b.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d047      	beq.n	800447e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0219 	bic.w	r2, r3, #25
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	491a      	ldr	r1, [pc, #104]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd faae 	bl	8001960 <HAL_GetTick>
 8004404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004408:	f7fd faaa 	bl	8001960 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e332      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800441a:	4b12      	ldr	r3, [pc, #72]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004426:	f7fd facb 	bl	80019c0 <HAL_GetREVID>
 800442a:	4603      	mov	r3, r0
 800442c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004430:	4293      	cmp	r3, r2
 8004432:	d819      	bhi.n	8004468 <HAL_RCC_OscConfig+0x28c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b40      	cmp	r3, #64	@ 0x40
 800443a:	d108      	bne.n	800444e <HAL_RCC_OscConfig+0x272>
 800443c:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e030      	b.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
 800444e:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	031b      	lsls	r3, r3, #12
 800445c:	4901      	ldr	r1, [pc, #4]	@ (8004464 <HAL_RCC_OscConfig+0x288>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
 8004462:	e025      	b.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
 8004464:	58024400 	.word	0x58024400
 8004468:	4b9a      	ldr	r3, [pc, #616]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	4997      	ldr	r1, [pc, #604]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
 800447c:	e018      	b.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447e:	4b95      	ldr	r3, [pc, #596]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a94      	ldr	r2, [pc, #592]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fd fa69 	bl	8001960 <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd fa65 	bl	8001960 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e2ed      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044a4:	4b8b      	ldr	r3, [pc, #556]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a9 	beq.w	8004610 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044be:	4b85      	ldr	r3, [pc, #532]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044c8:	4b82      	ldr	r3, [pc, #520]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d007      	beq.n	80044e4 <HAL_RCC_OscConfig+0x308>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b18      	cmp	r3, #24
 80044d8:	d13a      	bne.n	8004550 <HAL_RCC_OscConfig+0x374>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d135      	bne.n	8004550 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044e4:	4b7b      	ldr	r3, [pc, #492]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_OscConfig+0x320>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e2c1      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044fc:	f7fd fa60 	bl	80019c0 <HAL_GetREVID>
 8004500:	4603      	mov	r3, r0
 8004502:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004506:	4293      	cmp	r3, r2
 8004508:	d817      	bhi.n	800453a <HAL_RCC_OscConfig+0x35e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	2b20      	cmp	r3, #32
 8004510:	d108      	bne.n	8004524 <HAL_RCC_OscConfig+0x348>
 8004512:	4b70      	ldr	r3, [pc, #448]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800451a:	4a6e      	ldr	r2, [pc, #440]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800451c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004520:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004522:	e075      	b.n	8004610 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004524:	4b6b      	ldr	r3, [pc, #428]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	069b      	lsls	r3, r3, #26
 8004532:	4968      	ldr	r1, [pc, #416]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004538:	e06a      	b.n	8004610 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800453a:	4b66      	ldr	r3, [pc, #408]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	4962      	ldr	r1, [pc, #392]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800454a:	4313      	orrs	r3, r2
 800454c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800454e:	e05f      	b.n	8004610 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d042      	beq.n	80045de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004558:	4b5e      	ldr	r3, [pc, #376]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a5d      	ldr	r2, [pc, #372]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800455e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd f9fc 	bl	8001960 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800456c:	f7fd f9f8 	bl	8001960 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e280      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800457e:	4b55      	ldr	r3, [pc, #340]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800458a:	f7fd fa19 	bl	80019c0 <HAL_GetREVID>
 800458e:	4603      	mov	r3, r0
 8004590:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004594:	4293      	cmp	r3, r2
 8004596:	d817      	bhi.n	80045c8 <HAL_RCC_OscConfig+0x3ec>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	2b20      	cmp	r3, #32
 800459e:	d108      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3d6>
 80045a0:	4b4c      	ldr	r3, [pc, #304]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045a8:	4a4a      	ldr	r2, [pc, #296]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045ae:	6053      	str	r3, [r2, #4]
 80045b0:	e02e      	b.n	8004610 <HAL_RCC_OscConfig+0x434>
 80045b2:	4b48      	ldr	r3, [pc, #288]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	069b      	lsls	r3, r3, #26
 80045c0:	4944      	ldr	r1, [pc, #272]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	604b      	str	r3, [r1, #4]
 80045c6:	e023      	b.n	8004610 <HAL_RCC_OscConfig+0x434>
 80045c8:	4b42      	ldr	r3, [pc, #264]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	493f      	ldr	r1, [pc, #252]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
 80045dc:	e018      	b.n	8004610 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045de:	4b3d      	ldr	r3, [pc, #244]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3c      	ldr	r2, [pc, #240]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd f9b9 	bl	8001960 <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045f2:	f7fd f9b5 	bl	8001960 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e23d      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004604:	4b33      	ldr	r3, [pc, #204]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d036      	beq.n	800468a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d019      	beq.n	8004658 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004624:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004628:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fd f996 	bl	8001960 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004638:	f7fd f992 	bl	8001960 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e21a      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800464a:	4b22      	ldr	r3, [pc, #136]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800464c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x45c>
 8004656:	e018      	b.n	800468a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004658:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800465a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465c:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd f97c 	bl	8001960 <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466c:	f7fd f978 	bl	8001960 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e200      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 8004680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d039      	beq.n	800470a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a0c      	ldr	r2, [pc, #48]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80046a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046aa:	f7fd f959 	bl	8001960 <HAL_GetTick>
 80046ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b2:	f7fd f955 	bl	8001960 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e1dd      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c4:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <HAL_RCC_OscConfig+0x4f8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x4d6>
 80046d0:	e01b      	b.n	800470a <HAL_RCC_OscConfig+0x52e>
 80046d2:	bf00      	nop
 80046d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046d8:	4b9b      	ldr	r3, [pc, #620]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a9a      	ldr	r2, [pc, #616]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80046de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046e4:	f7fd f93c 	bl	8001960 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ec:	f7fd f938 	bl	8001960 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1c0      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046fe:	4b92      	ldr	r3, [pc, #584]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8081 	beq.w	800481a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004718:	4b8c      	ldr	r3, [pc, #560]	@ (800494c <HAL_RCC_OscConfig+0x770>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a8b      	ldr	r2, [pc, #556]	@ (800494c <HAL_RCC_OscConfig+0x770>)
 800471e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004724:	f7fd f91c 	bl	8001960 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472c:	f7fd f918 	bl	8001960 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1a0      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800473e:	4b83      	ldr	r3, [pc, #524]	@ (800494c <HAL_RCC_OscConfig+0x770>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x584>
 8004752:	4b7d      	ldr	r3, [pc, #500]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
 800475e:	e02d      	b.n	80047bc <HAL_RCC_OscConfig+0x5e0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10c      	bne.n	8004782 <HAL_RCC_OscConfig+0x5a6>
 8004768:	4b77      	ldr	r3, [pc, #476]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a76      	ldr	r2, [pc, #472]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
 8004774:	4b74      	ldr	r3, [pc, #464]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	4a73      	ldr	r2, [pc, #460]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800477a:	f023 0304 	bic.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004780:	e01c      	b.n	80047bc <HAL_RCC_OscConfig+0x5e0>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x5c8>
 800478a:	4b6f      	ldr	r3, [pc, #444]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	4a6e      	ldr	r2, [pc, #440]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004790:	f043 0304 	orr.w	r3, r3, #4
 8004794:	6713      	str	r3, [r2, #112]	@ 0x70
 8004796:	4b6c      	ldr	r3, [pc, #432]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	4a6b      	ldr	r2, [pc, #428]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_OscConfig+0x5e0>
 80047a4:	4b68      	ldr	r3, [pc, #416]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	4a67      	ldr	r2, [pc, #412]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b0:	4b65      	ldr	r3, [pc, #404]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	4a64      	ldr	r2, [pc, #400]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fd f8cc 	bl	8001960 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fd f8c8 	bl	8001960 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e14e      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e2:	4b59      	ldr	r3, [pc, #356]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ee      	beq.n	80047cc <HAL_RCC_OscConfig+0x5f0>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd f8b6 	bl	8001960 <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fd f8b2 	bl	8001960 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e138      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800480e:	4b4e      	ldr	r3, [pc, #312]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ee      	bne.n	80047f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 812d 	beq.w	8004a7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004824:	4b48      	ldr	r3, [pc, #288]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800482c:	2b18      	cmp	r3, #24
 800482e:	f000 80bd 	beq.w	80049ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	2b02      	cmp	r3, #2
 8004838:	f040 809e 	bne.w	8004978 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483c:	4b42      	ldr	r3, [pc, #264]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a41      	ldr	r2, [pc, #260]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd f88a 	bl	8001960 <HAL_GetTick>
 800484c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd f886 	bl	8001960 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e10e      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004862:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800486e:	4b36      	ldr	r3, [pc, #216]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004872:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCC_OscConfig+0x774>)
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	430a      	orrs	r2, r1
 8004882:	4931      	ldr	r1, [pc, #196]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	628b      	str	r3, [r1, #40]	@ 0x28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	3b01      	subs	r3, #1
 800488e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004896:	3b01      	subs	r3, #1
 8004898:	025b      	lsls	r3, r3, #9
 800489a:	b29b      	uxth	r3, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	3b01      	subs	r3, #1
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	3b01      	subs	r3, #1
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048b8:	4923      	ldr	r1, [pc, #140]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80048be:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	4a21      	ldr	r2, [pc, #132]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ce:	4b21      	ldr	r3, [pc, #132]	@ (8004954 <HAL_RCC_OscConfig+0x778>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048d6:	00d2      	lsls	r2, r2, #3
 80048d8:	491b      	ldr	r1, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048de:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	f023 020c 	bic.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	4917      	ldr	r1, [pc, #92]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048f0:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	f023 0202 	bic.w	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fc:	4912      	ldr	r1, [pc, #72]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	4a10      	ldr	r2, [pc, #64]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	4a0d      	ldr	r2, [pc, #52]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004918:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	4a0a      	ldr	r2, [pc, #40]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004926:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	4a07      	ldr	r2, [pc, #28]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004932:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a04      	ldr	r2, [pc, #16]	@ (8004948 <HAL_RCC_OscConfig+0x76c>)
 8004938:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800493c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fd f80f 	bl	8001960 <HAL_GetTick>
 8004942:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004944:	e011      	b.n	800496a <HAL_RCC_OscConfig+0x78e>
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
 800494c:	58024800 	.word	0x58024800
 8004950:	fffffc0c 	.word	0xfffffc0c
 8004954:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd f802 	bl	8001960 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e08a      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800496a:	4b47      	ldr	r3, [pc, #284]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x77c>
 8004976:	e082      	b.n	8004a7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004978:	4b43      	ldr	r3, [pc, #268]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a42      	ldr	r2, [pc, #264]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 800497e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fc ffec 	bl	8001960 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fc ffe8 	bl	8001960 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e070      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800499e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x7b0>
 80049aa:	e068      	b.n	8004a7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049ac:	4b36      	ldr	r3, [pc, #216]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049b2:	4b35      	ldr	r3, [pc, #212]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d031      	beq.n	8004a24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f003 0203 	and.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d12a      	bne.n	8004a24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d122      	bne.n	8004a24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d11a      	bne.n	8004a24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	0a5b      	lsrs	r3, r3, #9
 80049f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d111      	bne.n	8004a24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d108      	bne.n	8004a24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e02b      	b.n	8004a80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a28:	4b17      	ldr	r3, [pc, #92]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2c:	08db      	lsrs	r3, r3, #3
 8004a2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d01f      	beq.n	8004a7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a3e:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a11      	ldr	r2, [pc, #68]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a4a:	f7fc ff89 	bl	8001960 <HAL_GetTick>
 8004a4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a50:	bf00      	nop
 8004a52:	f7fc ff85 	bl	8001960 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d0f9      	beq.n	8004a52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a62:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <HAL_RCC_OscConfig+0x8b0>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a6a:	00d2      	lsls	r2, r2, #3
 8004a6c:	4906      	ldr	r1, [pc, #24]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a72:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	4a04      	ldr	r2, [pc, #16]	@ (8004a88 <HAL_RCC_OscConfig+0x8ac>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	@ 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	ffff0007 	.word	0xffff0007

08004a90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e19c      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d910      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b87      	ldr	r3, [pc, #540]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020f 	bic.w	r2, r3, #15
 8004aba:	4985      	ldr	r1, [pc, #532]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b83      	ldr	r3, [pc, #524]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e184      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d908      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004af0:	4b78      	ldr	r3, [pc, #480]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4975      	ldr	r1, [pc, #468]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	4b70      	ldr	r3, [pc, #448]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d908      	bls.n	8004b30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	496a      	ldr	r1, [pc, #424]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	4b64      	ldr	r3, [pc, #400]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d908      	bls.n	8004b5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b4c:	4b61      	ldr	r3, [pc, #388]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	495e      	ldr	r1, [pc, #376]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d908      	bls.n	8004b8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b7a:	4b56      	ldr	r3, [pc, #344]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4953      	ldr	r1, [pc, #332]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d908      	bls.n	8004bba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f023 020f 	bic.w	r2, r3, #15
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4947      	ldr	r1, [pc, #284]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d055      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004bc6:	4b43      	ldr	r3, [pc, #268]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4940      	ldr	r1, [pc, #256]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004be0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d121      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0f6      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bf8:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0ea      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c10:	4b30      	ldr	r3, [pc, #192]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0de      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c20:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0d6      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c30:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f023 0207 	bic.w	r2, r3, #7
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4925      	ldr	r1, [pc, #148]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c42:	f7fc fe8d 	bl	8001960 <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4a:	f7fc fe89 	bl	8001960 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0be      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c60:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d1eb      	bne.n	8004c4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d010      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d208      	bcs.n	8004ca0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8e:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f023 020f 	bic.w	r2, r3, #15
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	490e      	ldr	r1, [pc, #56]	@ (8004cd4 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d214      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 020f 	bic.w	r2, r3, #15
 8004cb6:	4906      	ldr	r1, [pc, #24]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <HAL_RCC_ClockConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e086      	b.n	8004dde <HAL_RCC_ClockConfig+0x34e>
 8004cd0:	52002000 	.word	0x52002000
 8004cd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	4b3f      	ldr	r3, [pc, #252]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d208      	bcs.n	8004d06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	4939      	ldr	r1, [pc, #228]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d010      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	4b34      	ldr	r3, [pc, #208]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d208      	bcs.n	8004d34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d22:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	492e      	ldr	r1, [pc, #184]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d010      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d208      	bcs.n	8004d62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d50:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4922      	ldr	r1, [pc, #136]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d208      	bcs.n	8004d90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	4917      	ldr	r1, [pc, #92]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d90:	f000 f834 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	4912      	ldr	r1, [pc, #72]	@ (8004dec <HAL_RCC_ClockConfig+0x35c>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <HAL_RCC_ClockConfig+0x358>)
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	4a0d      	ldr	r2, [pc, #52]	@ (8004dec <HAL_RCC_ClockConfig+0x35c>)
 8004db8:	5cd3      	ldrb	r3, [r2, r3]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8004df0 <HAL_RCC_ClockConfig+0x360>)
 8004dc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <HAL_RCC_ClockConfig+0x364>)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004dce:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <HAL_RCC_ClockConfig+0x368>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fc fd7a 	bl	80018cc <HAL_InitTick>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
 8004dec:	0800b36c 	.word	0x0800b36c
 8004df0:	24000008 	.word	0x24000008
 8004df4:	24000004 	.word	0x24000004
 8004df8:	2400000c 	.word	0x2400000c

08004dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	@ 0x24
 8004e00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e02:	4bb3      	ldr	r3, [pc, #716]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e0a:	2b18      	cmp	r3, #24
 8004e0c:	f200 8155 	bhi.w	80050ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004e10:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e7d 	.word	0x08004e7d
 8004e1c:	080050bb 	.word	0x080050bb
 8004e20:	080050bb 	.word	0x080050bb
 8004e24:	080050bb 	.word	0x080050bb
 8004e28:	080050bb 	.word	0x080050bb
 8004e2c:	080050bb 	.word	0x080050bb
 8004e30:	080050bb 	.word	0x080050bb
 8004e34:	080050bb 	.word	0x080050bb
 8004e38:	08004ea3 	.word	0x08004ea3
 8004e3c:	080050bb 	.word	0x080050bb
 8004e40:	080050bb 	.word	0x080050bb
 8004e44:	080050bb 	.word	0x080050bb
 8004e48:	080050bb 	.word	0x080050bb
 8004e4c:	080050bb 	.word	0x080050bb
 8004e50:	080050bb 	.word	0x080050bb
 8004e54:	080050bb 	.word	0x080050bb
 8004e58:	08004ea9 	.word	0x08004ea9
 8004e5c:	080050bb 	.word	0x080050bb
 8004e60:	080050bb 	.word	0x080050bb
 8004e64:	080050bb 	.word	0x080050bb
 8004e68:	080050bb 	.word	0x080050bb
 8004e6c:	080050bb 	.word	0x080050bb
 8004e70:	080050bb 	.word	0x080050bb
 8004e74:	080050bb 	.word	0x080050bb
 8004e78:	08004eaf 	.word	0x08004eaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e7c:	4b94      	ldr	r3, [pc, #592]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e88:	4b91      	ldr	r3, [pc, #580]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	08db      	lsrs	r3, r3, #3
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	4a90      	ldr	r2, [pc, #576]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e9a:	e111      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e9c:	4b8d      	ldr	r3, [pc, #564]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e9e:	61bb      	str	r3, [r7, #24]
      break;
 8004ea0:	e10e      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ea4:	61bb      	str	r3, [r7, #24]
      break;
 8004ea6:	e10b      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004eaa:	61bb      	str	r3, [r7, #24]
      break;
 8004eac:	e108      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eae:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004eb8:	4b85      	ldr	r3, [pc, #532]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ec4:	4b82      	ldr	r3, [pc, #520]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ece:	4b80      	ldr	r3, [pc, #512]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed2:	08db      	lsrs	r3, r3, #3
 8004ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80e1 	beq.w	80050b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	f000 8083 	beq.w	8005000 <HAL_RCC_GetSysClockFreq+0x204>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	f200 80a1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x248>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x114>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d056      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f0e:	e099      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f10:	4b6f      	ldr	r3, [pc, #444]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02d      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	08db      	lsrs	r3, r3, #3
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	4a6b      	ldr	r2, [pc, #428]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b62      	ldr	r3, [pc, #392]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80050e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f76:	e087      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80050e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b51      	ldr	r3, [pc, #324]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80050e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fba:	e065      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80050e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b40      	ldr	r3, [pc, #256]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80050e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ffe:	e043      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80050ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b2f      	ldr	r3, [pc, #188]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a02 	vldr	s12, [r7, #8]
 8005026:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80050e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005042:	e021      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80050e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a02 	vldr	s12, [r7, #8]
 800506a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80050e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005086:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005088:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	0a5b      	lsrs	r3, r3, #9
 800508e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005092:	3301      	adds	r3, #1
 8005094:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	ee07 3a90 	vmov	s15, r3
 800509c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ac:	ee17 3a90 	vmov	r3, s15
 80050b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80050b2:	e005      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
      break;
 80050b8:	e002      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80050ba:	4b07      	ldr	r3, [pc, #28]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050bc:	61bb      	str	r3, [r7, #24]
      break;
 80050be:	bf00      	nop
  }

  return sysclockfreq;
 80050c0:	69bb      	ldr	r3, [r7, #24]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	@ 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	58024400 	.word	0x58024400
 80050d4:	03d09000 	.word	0x03d09000
 80050d8:	003d0900 	.word	0x003d0900
 80050dc:	007a1200 	.word	0x007a1200
 80050e0:	46000000 	.word	0x46000000
 80050e4:	4c742400 	.word	0x4c742400
 80050e8:	4a742400 	.word	0x4a742400
 80050ec:	4af42400 	.word	0x4af42400

080050f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050f6:	f7ff fe81 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 80050fa:	4602      	mov	r2, r0
 80050fc:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <HAL_RCC_GetHCLKFreq+0x50>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	490f      	ldr	r1, [pc, #60]	@ (8005144 <HAL_RCC_GetHCLKFreq+0x54>)
 8005108:	5ccb      	ldrb	r3, [r1, r3]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005114:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <HAL_RCC_GetHCLKFreq+0x50>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	4a09      	ldr	r2, [pc, #36]	@ (8005144 <HAL_RCC_GetHCLKFreq+0x54>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a07      	ldr	r2, [pc, #28]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x58>)
 800512c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x58>)
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	58024400 	.word	0x58024400
 8005144:	0800b36c 	.word	0x0800b36c
 8005148:	24000008 	.word	0x24000008
 800514c:	24000004 	.word	0x24000004

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005154:	f7ff ffcc 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4904      	ldr	r1, [pc, #16]	@ (8005178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	58024400 	.word	0x58024400
 8005178:	0800b36c 	.word	0x0800b36c

0800517c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005180:	f7ff ffb6 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4904      	ldr	r1, [pc, #16]	@ (80051a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	58024400 	.word	0x58024400
 80051a4:	0800b36c 	.word	0x0800b36c

080051a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ac:	b0ca      	sub	sp, #296	@ 0x128
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80051cc:	2500      	movs	r5, #0
 80051ce:	ea54 0305 	orrs.w	r3, r4, r5
 80051d2:	d049      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051de:	d02f      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80051e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051e4:	d828      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051ea:	d01a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051f0:	d822      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051fa:	d007      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051fc:	e01c      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fe:	4bb8      	ldr	r3, [pc, #736]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4ab7      	ldr	r2, [pc, #732]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800520a:	e01a      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	3308      	adds	r3, #8
 8005212:	2102      	movs	r1, #2
 8005214:	4618      	mov	r0, r3
 8005216:	f001 fc8f 	bl	8006b38 <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005220:	e00f      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	3328      	adds	r3, #40	@ 0x28
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f001 fd36 	bl	8006c9c <RCCEx_PLL3_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800524a:	4ba5      	ldr	r3, [pc, #660]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800524c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005258:	4aa1      	ldr	r2, [pc, #644]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800525a:	430b      	orrs	r3, r1
 800525c:	6513      	str	r3, [r2, #80]	@ 0x50
 800525e:	e003      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005274:	f04f 0900 	mov.w	r9, #0
 8005278:	ea58 0309 	orrs.w	r3, r8, r9
 800527c:	d047      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005284:	2b04      	cmp	r3, #4
 8005286:	d82a      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a5 	.word	0x080052a5
 8005294:	080052b3 	.word	0x080052b3
 8005298:	080052c9 	.word	0x080052c9
 800529c:	080052e7 	.word	0x080052e7
 80052a0:	080052e7 	.word	0x080052e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a4:	4b8e      	ldr	r3, [pc, #568]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	4a8d      	ldr	r2, [pc, #564]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052b0:	e01a      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	3308      	adds	r3, #8
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fc3c 	bl	8006b38 <RCCEx_PLL2_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052c6:	e00f      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052cc:	3328      	adds	r3, #40	@ 0x28
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 fce3 	bl	8006c9c <RCCEx_PLL3_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80052e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f0:	4b7b      	ldr	r3, [pc, #492]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f4:	f023 0107 	bic.w	r1, r3, #7
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	4a78      	ldr	r2, [pc, #480]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005300:	430b      	orrs	r3, r1
 8005302:	6513      	str	r3, [r2, #80]	@ 0x50
 8005304:	e003      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800531a:	f04f 0b00 	mov.w	fp, #0
 800531e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005322:	d04c      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800532e:	d030      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005334:	d829      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005336:	2bc0      	cmp	r3, #192	@ 0xc0
 8005338:	d02d      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800533a:	2bc0      	cmp	r3, #192	@ 0xc0
 800533c:	d825      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800533e:	2b80      	cmp	r3, #128	@ 0x80
 8005340:	d018      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005342:	2b80      	cmp	r3, #128	@ 0x80
 8005344:	d821      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d007      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800534e:	e01c      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005350:	4b63      	ldr	r3, [pc, #396]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	4a62      	ldr	r2, [pc, #392]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800535c:	e01c      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	3308      	adds	r3, #8
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f001 fbe6 	bl	8006b38 <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005372:	e011      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005378:	3328      	adds	r3, #40	@ 0x28
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fc8d 	bl	8006c9c <RCCEx_PLL3_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005388:	e006      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005390:	e002      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053a0:	4b4f      	ldr	r3, [pc, #316]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ae:	4a4c      	ldr	r2, [pc, #304]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80053ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80053d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80053d8:	460b      	mov	r3, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	d053      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80053de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80053e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ea:	d035      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053f0:	d82e      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80053f6:	d031      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80053fc:	d828      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005402:	d01a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005408:	d822      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800540e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005412:	d007      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005414:	e01c      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005416:	4b32      	ldr	r3, [pc, #200]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	4a31      	ldr	r2, [pc, #196]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800541c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005422:	e01c      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	3308      	adds	r3, #8
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fb83 	bl	8006b38 <RCCEx_PLL2_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005438:	e011      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543e:	3328      	adds	r3, #40	@ 0x28
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fc2a 	bl	8006c9c <RCCEx_PLL3_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800544e:	e006      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005466:	4b1e      	ldr	r3, [pc, #120]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005472:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005476:	4a1a      	ldr	r2, [pc, #104]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005478:	430b      	orrs	r3, r1
 800547a:	6593      	str	r3, [r2, #88]	@ 0x58
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005492:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005496:	2300      	movs	r3, #0
 8005498:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800549c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	d056      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054b2:	d038      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80054b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054b8:	d831      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054be:	d034      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80054c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054c4:	d82b      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ca:	d01d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80054cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054d0:	d825      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d006      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80054d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80054dc:	e01f      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054de:	bf00      	nop
 80054e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e4:	4ba2      	ldr	r3, [pc, #648]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	4aa1      	ldr	r2, [pc, #644]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054f0:	e01c      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	3308      	adds	r3, #8
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fb1c 	bl	8006b38 <RCCEx_PLL2_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005506:	e011      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550c:	3328      	adds	r3, #40	@ 0x28
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f001 fbc3 	bl	8006c9c <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800551c:	e006      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005524:	e002      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005526:	bf00      	nop
 8005528:	e000      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800552a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005534:	4b8e      	ldr	r3, [pc, #568]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005544:	4a8a      	ldr	r2, [pc, #552]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005546:	430b      	orrs	r3, r1
 8005548:	6593      	str	r3, [r2, #88]	@ 0x58
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005560:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800556a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d03a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557a:	2b30      	cmp	r3, #48	@ 0x30
 800557c:	d01f      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800557e:	2b30      	cmp	r3, #48	@ 0x30
 8005580:	d819      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005582:	2b20      	cmp	r3, #32
 8005584:	d00c      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005586:	2b20      	cmp	r3, #32
 8005588:	d815      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d019      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800558e:	2b10      	cmp	r3, #16
 8005590:	d111      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005592:	4b77      	ldr	r3, [pc, #476]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	4a76      	ldr	r2, [pc, #472]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800559e:	e011      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	3308      	adds	r3, #8
 80055a6:	2102      	movs	r1, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fac5 	bl	8006b38 <RCCEx_PLL2_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055b4:	e006      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055cc:	4b68      	ldr	r3, [pc, #416]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055da:	4a65      	ldr	r2, [pc, #404]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055e0:	e003      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80055f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005600:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d051      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005614:	d035      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005616:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800561a:	d82e      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800561c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005620:	d031      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005622:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005626:	d828      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562c:	d01a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005632:	d822      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563c:	d007      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800563e:	e01c      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4b4b      	ldr	r3, [pc, #300]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	4a4a      	ldr	r2, [pc, #296]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800564c:	e01c      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005652:	3308      	adds	r3, #8
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fa6e 	bl	8006b38 <RCCEx_PLL2_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005662:	e011      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	3328      	adds	r3, #40	@ 0x28
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fb15 	bl	8006c9c <RCCEx_PLL3_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005678:	e006      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005690:	4b37      	ldr	r3, [pc, #220]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005694:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569e:	4a34      	ldr	r2, [pc, #208]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80056a4:	e003      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80056ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80056c8:	460b      	mov	r3, r1
 80056ca:	4313      	orrs	r3, r2
 80056cc:	d056      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056d8:	d033      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80056da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056de:	d82c      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056e4:	d02f      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80056e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056ea:	d826      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056f0:	d02b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80056f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056f6:	d820      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056fc:	d012      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80056fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005702:	d81a      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d022      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570c:	d115      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005712:	3308      	adds	r3, #8
 8005714:	2101      	movs	r1, #1
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fa0e 	bl	8006b38 <RCCEx_PLL2_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005722:	e015      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005728:	3328      	adds	r3, #40	@ 0x28
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fab5 	bl	8006c9c <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005738:	e00a      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005740:	e006      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005742:	bf00      	nop
 8005744:	e004      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800574e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10d      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800575a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005766:	4a02      	ldr	r2, [pc, #8]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005768:	430b      	orrs	r3, r1
 800576a:	6513      	str	r3, [r2, #80]	@ 0x50
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005792:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d055      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a8:	d033      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80057aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057ae:	d82c      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b4:	d02f      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ba:	d826      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057c0:	d02b      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80057c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057c6:	d820      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057cc:	d012      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80057ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d2:	d81a      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d022      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80057d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057dc:	d115      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e2:	3308      	adds	r3, #8
 80057e4:	2101      	movs	r1, #1
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f9a6 	bl	8006b38 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057f2:	e015      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f8:	3328      	adds	r3, #40	@ 0x28
 80057fa:	2101      	movs	r1, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fa4d 	bl	8006c9c <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005808:	e00a      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005812:	bf00      	nop
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005828:	4ba3      	ldr	r3, [pc, #652]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005838:	4a9f      	ldr	r2, [pc, #636]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583a:	430b      	orrs	r3, r1
 800583c:	6593      	str	r3, [r2, #88]	@ 0x58
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005854:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800585e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d037      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005872:	d00e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005878:	d816      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005882:	d111      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005884:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	4a8b      	ldr	r2, [pc, #556]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005890:	e00f      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	3308      	adds	r3, #8
 8005898:	2101      	movs	r1, #1
 800589a:	4618      	mov	r0, r3
 800589c:	f001 f94c 	bl	8006b38 <RCCEx_PLL2_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80058a6:	e004      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ae:	e000      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80058b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058ba:	4b7f      	ldr	r3, [pc, #508]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c8:	4a7b      	ldr	r2, [pc, #492]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80058ce:	e003      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80058e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80058ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	d039      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d81c      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005902:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	08005945 	.word	0x08005945
 800590c:	08005919 	.word	0x08005919
 8005910:	08005927 	.word	0x08005927
 8005914:	08005945 	.word	0x08005945
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4b67      	ldr	r3, [pc, #412]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	4a66      	ldr	r2, [pc, #408]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005924:	e00f      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	3308      	adds	r3, #8
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f902 	bl	8006b38 <RCCEx_PLL2_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800593a:	e004      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800594e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005952:	f023 0103 	bic.w	r1, r3, #3
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595c:	4a56      	ldr	r2, [pc, #344]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800595e:	430b      	orrs	r3, r1
 8005960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005962:	e003      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005982:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	f000 809f 	beq.w	8005acc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800598e:	4b4b      	ldr	r3, [pc, #300]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4a      	ldr	r2, [pc, #296]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005998:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800599a:	f7fb ffe1 	bl	8001960 <HAL_GetTick>
 800599e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a2:	e00b      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a4:	f7fb ffdc 	bl	8001960 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b64      	cmp	r3, #100	@ 0x64
 80059b2:	d903      	bls.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ba:	e005      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059bc:	4b3f      	ldr	r3, [pc, #252]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ed      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80059c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d179      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059d0:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059dc:	4053      	eors	r3, r2
 80059de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d015      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059e6:	4b34      	ldr	r3, [pc, #208]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059f2:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	4a30      	ldr	r2, [pc, #192]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059fe:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a08:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a10:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a1e:	d118      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fb ff9e 	bl	8001960 <HAL_GetTick>
 8005a24:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a28:	e00d      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fb ff99 	bl	8001960 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005a34:	1ad2      	subs	r2, r2, r3
 8005a36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d903      	bls.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005a44:	e005      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a46:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0eb      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d129      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a6a:	d10e      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a6c:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a7c:	091a      	lsrs	r2, r3, #4
 8005a7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6113      	str	r3, [r2, #16]
 8005a88:	e005      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a94:	6113      	str	r3, [r2, #16]
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a98:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	4a04      	ldr	r2, [pc, #16]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aac:	e00e      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005ab6:	e009      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	58024800 	.word	0x58024800
 8005ac0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f002 0301 	and.w	r3, r2, #1
 8005ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005adc:	2300      	movs	r3, #0
 8005ade:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ae2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f000 8089 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005af4:	2b28      	cmp	r3, #40	@ 0x28
 8005af6:	d86b      	bhi.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005af8:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005bd9 	.word	0x08005bd9
 8005b04:	08005bd1 	.word	0x08005bd1
 8005b08:	08005bd1 	.word	0x08005bd1
 8005b0c:	08005bd1 	.word	0x08005bd1
 8005b10:	08005bd1 	.word	0x08005bd1
 8005b14:	08005bd1 	.word	0x08005bd1
 8005b18:	08005bd1 	.word	0x08005bd1
 8005b1c:	08005bd1 	.word	0x08005bd1
 8005b20:	08005ba5 	.word	0x08005ba5
 8005b24:	08005bd1 	.word	0x08005bd1
 8005b28:	08005bd1 	.word	0x08005bd1
 8005b2c:	08005bd1 	.word	0x08005bd1
 8005b30:	08005bd1 	.word	0x08005bd1
 8005b34:	08005bd1 	.word	0x08005bd1
 8005b38:	08005bd1 	.word	0x08005bd1
 8005b3c:	08005bd1 	.word	0x08005bd1
 8005b40:	08005bbb 	.word	0x08005bbb
 8005b44:	08005bd1 	.word	0x08005bd1
 8005b48:	08005bd1 	.word	0x08005bd1
 8005b4c:	08005bd1 	.word	0x08005bd1
 8005b50:	08005bd1 	.word	0x08005bd1
 8005b54:	08005bd1 	.word	0x08005bd1
 8005b58:	08005bd1 	.word	0x08005bd1
 8005b5c:	08005bd1 	.word	0x08005bd1
 8005b60:	08005bd9 	.word	0x08005bd9
 8005b64:	08005bd1 	.word	0x08005bd1
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005bd1 	.word	0x08005bd1
 8005b70:	08005bd1 	.word	0x08005bd1
 8005b74:	08005bd1 	.word	0x08005bd1
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bd1 	.word	0x08005bd1
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005bd1 	.word	0x08005bd1
 8005b90:	08005bd1 	.word	0x08005bd1
 8005b94:	08005bd1 	.word	0x08005bd1
 8005b98:	08005bd1 	.word	0x08005bd1
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005bd9 	.word	0x08005bd9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	3308      	adds	r3, #8
 8005baa:	2101      	movs	r1, #1
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 ffc3 	bl	8006b38 <RCCEx_PLL2_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005bb8:	e00f      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	3328      	adds	r3, #40	@ 0x28
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f86a 	bl	8006c9c <RCCEx_PLL3_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005bce:	e004      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005be2:	4bbf      	ldr	r3, [pc, #764]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf0:	4abb      	ldr	r2, [pc, #748]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0302 	and.w	r3, r2, #2
 8005c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d041      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d824      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c7d 	.word	0x08005c7d
 8005c34:	08005c49 	.word	0x08005c49
 8005c38:	08005c5f 	.word	0x08005c5f
 8005c3c:	08005c7d 	.word	0x08005c7d
 8005c40:	08005c7d 	.word	0x08005c7d
 8005c44:	08005c7d 	.word	0x08005c7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 ff71 	bl	8006b38 <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c5c:	e00f      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	3328      	adds	r3, #40	@ 0x28
 8005c64:	2101      	movs	r1, #1
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 f818 	bl	8006c9c <RCCEx_PLL3_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c72:	e004      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c86:	4b96      	ldr	r3, [pc, #600]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	f023 0107 	bic.w	r1, r3, #7
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c94:	4a92      	ldr	r2, [pc, #584]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c9a:	e003      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f002 0304 	and.w	r3, r2, #4
 8005cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d044      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	d825      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005d25 	.word	0x08005d25
 8005cdc:	08005cf1 	.word	0x08005cf1
 8005ce0:	08005d07 	.word	0x08005d07
 8005ce4:	08005d25 	.word	0x08005d25
 8005ce8:	08005d25 	.word	0x08005d25
 8005cec:	08005d25 	.word	0x08005d25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 ff1d 	bl	8006b38 <RCCEx_PLL2_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d04:	e00f      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	3328      	adds	r3, #40	@ 0x28
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 ffc4 	bl	8006c9c <RCCEx_PLL3_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d32:	f023 0107 	bic.w	r1, r3, #7
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d3e:	4a68      	ldr	r2, [pc, #416]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f002 0320 	and.w	r3, r2, #32
 8005d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	d055      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d7a:	d033      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d80:	d82c      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d86:	d02f      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8c:	d826      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d92:	d02b      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d98:	d820      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d9e:	d012      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da4:	d81a      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d022      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dae:	d115      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	3308      	adds	r3, #8
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 febd 	bl	8006b38 <RCCEx_PLL2_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e015      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3328      	adds	r3, #40	@ 0x28
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 ff64 	bl	8006c9c <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005dda:	e00a      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de2:	e006      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005de4:	bf00      	nop
 8005de6:	e004      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005de8:	bf00      	nop
 8005dea:	e002      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005dec:	bf00      	nop
 8005dee:	e000      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dfa:	4b39      	ldr	r3, [pc, #228]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0a:	4a35      	ldr	r2, [pc, #212]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e10:	e003      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4313      	orrs	r3, r2
 8005e38:	d058      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e46:	d033      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005e48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e4c:	d82c      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e52:	d02f      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e58:	d826      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e5e:	d02b      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005e60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e64:	d820      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6a:	d012      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e70:	d81a      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d022      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7a:	d115      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e80:	3308      	adds	r3, #8
 8005e82:	2100      	movs	r1, #0
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fe57 	bl	8006b38 <RCCEx_PLL2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e90:	e015      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e96:	3328      	adds	r3, #40	@ 0x28
 8005e98:	2102      	movs	r1, #2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fefe 	bl	8006c9c <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eae:	e006      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005eb4:	bf00      	nop
 8005eb6:	e002      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005eb8:	bf00      	nop
 8005eba:	e000      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10e      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ec6:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ed6:	4a02      	ldr	r2, [pc, #8]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8005edc:	e006      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005ede:	bf00      	nop
 8005ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d055      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f18:	d033      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005f1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005f1e:	d82c      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f24:	d02f      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f2a:	d826      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005f30:	d02b      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005f32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005f36:	d820      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f3c:	d012      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005f3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f42:	d81a      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d022      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4c:	d115      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	3308      	adds	r3, #8
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fdee 	bl	8006b38 <RCCEx_PLL2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f62:	e015      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	3328      	adds	r3, #40	@ 0x28
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fe95 	bl	8006c9c <RCCEx_PLL3_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f78:	e00a      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f98:	4ba1      	ldr	r3, [pc, #644]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fa8:	4a9d      	ldr	r2, [pc, #628]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005faa:	430b      	orrs	r3, r1
 8005fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fae:	e003      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f002 0308 	and.w	r3, r2, #8
 8005fc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d01e      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	3328      	adds	r3, #40	@ 0x28
 8005fec:	2102      	movs	r1, #2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fe54 	bl	8006c9c <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006000:	4b87      	ldr	r3, [pc, #540]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006004:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006010:	4a83      	ldr	r2, [pc, #524]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006012:	430b      	orrs	r3, r1
 8006014:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f002 0310 	and.w	r3, r2, #16
 8006022:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006026:	2300      	movs	r3, #0
 8006028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800602c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d01e      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800603e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006042:	d10c      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	3328      	adds	r3, #40	@ 0x28
 800604a:	2102      	movs	r1, #2
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fe25 	bl	8006c9c <RCCEx_PLL3_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800605e:	4b70      	ldr	r3, [pc, #448]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800606e:	4a6c      	ldr	r2, [pc, #432]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800608a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800608e:	460b      	mov	r3, r1
 8006090:	4313      	orrs	r3, r2
 8006092:	d03e      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800609c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060a0:	d022      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80060a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060a6:	d81b      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b0:	d00b      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80060b2:	e015      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	3308      	adds	r3, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fd3b 	bl	8006b38 <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060c8:	e00f      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ce:	3328      	adds	r3, #40	@ 0x28
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fde2 	bl	8006c9c <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006102:	4a47      	ldr	r2, [pc, #284]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6593      	str	r3, [r2, #88]	@ 0x58
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800611e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006120:	2300      	movs	r3, #0
 8006122:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006124:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006128:	460b      	mov	r3, r1
 800612a:	4313      	orrs	r3, r2
 800612c:	d03b      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006136:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800613a:	d01f      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800613c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006140:	d818      	bhi.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006146:	d003      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006148:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800614c:	d007      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800614e:	e011      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006150:	4b33      	ldr	r3, [pc, #204]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	4a32      	ldr	r2, [pc, #200]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800615c:	e00f      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	3328      	adds	r3, #40	@ 0x28
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fd98 	bl	8006c9c <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006172:	e004      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800617c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006186:	4b26      	ldr	r3, [pc, #152]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	4a22      	ldr	r2, [pc, #136]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6553      	str	r3, [r2, #84]	@ 0x54
 800619c:	e003      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80061b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80061b4:	2300      	movs	r3, #0
 80061b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80061b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d034      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80061cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d0:	d007      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80061d2:	e011      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d4:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	4a11      	ldr	r2, [pc, #68]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061e0:	e00e      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	3308      	adds	r3, #8
 80061e8:	2102      	movs	r1, #2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fca4 	bl	8006b38 <RCCEx_PLL2_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10d      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006208:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800620a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006216:	4a02      	ldr	r2, [pc, #8]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006218:	430b      	orrs	r3, r1
 800621a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800621c:	e006      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006228:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800623a:	2300      	movs	r3, #0
 800623c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800623e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006242:	460b      	mov	r3, r1
 8006244:	4313      	orrs	r3, r2
 8006246:	d00c      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624c:	3328      	adds	r3, #40	@ 0x28
 800624e:	2102      	movs	r1, #2
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fd23 	bl	8006c9c <RCCEx_PLL3_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800626e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006270:	2300      	movs	r3, #0
 8006272:	667b      	str	r3, [r7, #100]	@ 0x64
 8006274:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d038      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800628a:	d018      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800628c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006290:	d811      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006292:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006296:	d014      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629c:	d80b      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d011      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a6:	d106      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4bc3      	ldr	r3, [pc, #780]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	4ac2      	ldr	r2, [pc, #776]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80062b4:	e008      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062bc:	e004      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80062be:	bf00      	nop
 80062c0:	e002      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80062c2:	bf00      	nop
 80062c4:	e000      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80062c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062d0:	4bb9      	ldr	r3, [pc, #740]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e0:	4ab5      	ldr	r2, [pc, #724]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062e2:	430b      	orrs	r3, r1
 80062e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80062fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062fe:	2300      	movs	r3, #0
 8006300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006302:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800630c:	4baa      	ldr	r3, [pc, #680]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800630e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006310:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631a:	4aa7      	ldr	r2, [pc, #668]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800632c:	653b      	str	r3, [r7, #80]	@ 0x50
 800632e:	2300      	movs	r3, #0
 8006330:	657b      	str	r3, [r7, #84]	@ 0x54
 8006332:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006336:	460b      	mov	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800633c:	4b9e      	ldr	r3, [pc, #632]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800634c:	4a9a      	ldr	r2, [pc, #616]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800634e:	430b      	orrs	r3, r1
 8006350:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800635e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006360:	2300      	movs	r3, #0
 8006362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006364:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800636e:	4b92      	ldr	r3, [pc, #584]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006372:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800637c:	4a8e      	ldr	r2, [pc, #568]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800637e:	430b      	orrs	r3, r1
 8006380:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800638e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006390:	2300      	movs	r3, #0
 8006392:	647b      	str	r3, [r7, #68]	@ 0x44
 8006394:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d00e      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800639e:	4b86      	ldr	r3, [pc, #536]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	4a85      	ldr	r2, [pc, #532]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063a8:	6113      	str	r3, [r2, #16]
 80063aa:	4b83      	ldr	r3, [pc, #524]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ac:	6919      	ldr	r1, [r3, #16]
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80063b6:	4a80      	ldr	r2, [pc, #512]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80063c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d009      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063d8:	4b77      	ldr	r3, [pc, #476]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e6:	4a74      	ldr	r2, [pc, #464]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063e8:	430b      	orrs	r3, r1
 80063ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80063f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006402:	460b      	mov	r3, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006408:	4b6b      	ldr	r3, [pc, #428]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800640a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006418:	4a67      	ldr	r2, [pc, #412]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800641a:	430b      	orrs	r3, r1
 800641c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	2100      	movs	r1, #0
 8006428:	62b9      	str	r1, [r7, #40]	@ 0x28
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006430:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006434:	460b      	mov	r3, r1
 8006436:	4313      	orrs	r3, r2
 8006438:	d011      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	3308      	adds	r3, #8
 8006440:	2100      	movs	r1, #0
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fb78 	bl	8006b38 <RCCEx_PLL2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800644e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	2100      	movs	r1, #0
 8006468:	6239      	str	r1, [r7, #32]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006470:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006474:	460b      	mov	r3, r1
 8006476:	4313      	orrs	r3, r2
 8006478:	d011      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	3308      	adds	r3, #8
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fb58 	bl	8006b38 <RCCEx_PLL2_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800648e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	2100      	movs	r1, #0
 80064a8:	61b9      	str	r1, [r7, #24]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d011      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	3308      	adds	r3, #8
 80064c0:	2102      	movs	r1, #2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fb38 	bl	8006b38 <RCCEx_PLL2_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80064ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	2100      	movs	r1, #0
 80064e8:	6139      	str	r1, [r7, #16]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064f4:	460b      	mov	r3, r1
 80064f6:	4313      	orrs	r3, r2
 80064f8:	d011      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	3328      	adds	r3, #40	@ 0x28
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fbca 	bl	8006c9c <RCCEx_PLL3_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	2100      	movs	r1, #0
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d011      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	3328      	adds	r3, #40	@ 0x28
 8006540:	2101      	movs	r1, #1
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fbaa 	bl	8006c9c <RCCEx_PLL3_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	2100      	movs	r1, #0
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d011      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657e:	3328      	adds	r3, #40	@ 0x28
 8006580:	2102      	movs	r1, #2
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fb8a 	bl	8006c9c <RCCEx_PLL3_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800658e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800659e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e000      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065b8:	58024400 	.word	0x58024400

080065bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80065c0:	f7fe fd96 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b06      	ldr	r3, [pc, #24]	@ (80065e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4904      	ldr	r1, [pc, #16]	@ (80065e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80065dc:	4618      	mov	r0, r3
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	58024400 	.word	0x58024400
 80065e4:	0800b36c 	.word	0x0800b36c

080065e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b089      	sub	sp, #36	@ 0x24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80065fa:	4b9f      	ldr	r3, [pc, #636]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	0b1b      	lsrs	r3, r3, #12
 8006600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006604:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006606:	4b9c      	ldr	r3, [pc, #624]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006612:	4b99      	ldr	r3, [pc, #612]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8111 	beq.w	8006858 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b02      	cmp	r3, #2
 800663a:	f000 8083 	beq.w	8006744 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b02      	cmp	r3, #2
 8006642:	f200 80a1 	bhi.w	8006788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d056      	beq.n	8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006652:	e099      	b.n	8006788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006654:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d02d      	beq.n	80066bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006660:	4b85      	ldr	r3, [pc, #532]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	4a84      	ldr	r2, [pc, #528]	@ (800687c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668a:	4b7b      	ldr	r3, [pc, #492]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669a:	ed97 6a03 	vldr	s12, [r7, #12]
 800669e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80066ba:	e087      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80066ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066de:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066fe:	e065      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800670e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006712:	4b59      	ldr	r3, [pc, #356]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006722:	ed97 6a03 	vldr	s12, [r7, #12]
 8006726:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800672a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006742:	e043      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006756:	4b48      	ldr	r3, [pc, #288]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	ed97 6a03 	vldr	s12, [r7, #12]
 800676a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800676e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006786:	e021      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679a:	4b37      	ldr	r3, [pc, #220]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80067cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	0a5b      	lsrs	r3, r3, #9
 80067d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f2:	ee17 2a90 	vmov	r2, s15
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80067fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006814:	edd7 6a07 	vldr	s13, [r7, #28]
 8006818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800681c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006820:	ee17 2a90 	vmov	r2, s15
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006828:	4b13      	ldr	r3, [pc, #76]	@ (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	0e1b      	lsrs	r3, r3, #24
 800682e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800683e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006842:	edd7 6a07 	vldr	s13, [r7, #28]
 8006846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800684a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684e:	ee17 2a90 	vmov	r2, s15
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006856:	e008      	b.n	800686a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
}
 800686a:	bf00      	nop
 800686c:	3724      	adds	r7, #36	@ 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	58024400 	.word	0x58024400
 800687c:	03d09000 	.word	0x03d09000
 8006880:	46000000 	.word	0x46000000
 8006884:	4c742400 	.word	0x4c742400
 8006888:	4a742400 	.word	0x4a742400
 800688c:	4af42400 	.word	0x4af42400

08006890 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006890:	b480      	push	{r7}
 8006892:	b089      	sub	sp, #36	@ 0x24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006898:	4ba1      	ldr	r3, [pc, #644]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80068a2:	4b9f      	ldr	r3, [pc, #636]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	0d1b      	lsrs	r3, r3, #20
 80068a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80068ae:	4b9c      	ldr	r3, [pc, #624]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80068ba:	4b99      	ldr	r3, [pc, #612]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8111 	beq.w	8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	f000 8083 	beq.w	80069ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	f200 80a1 	bhi.w	8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d056      	beq.n	80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068fa:	e099      	b.n	8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068fc:	4b88      	ldr	r3, [pc, #544]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d02d      	beq.n	8006964 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006908:	4b85      	ldr	r3, [pc, #532]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	4a84      	ldr	r2, [pc, #528]	@ (8006b24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b7b      	ldr	r3, [pc, #492]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a03 	vldr	s12, [r7, #12]
 8006946:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006962:	e087      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006976:	4b6a      	ldr	r3, [pc, #424]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	ed97 6a03 	vldr	s12, [r7, #12]
 800698a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800698e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800699a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069a6:	e065      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ba:	4b59      	ldr	r3, [pc, #356]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ea:	e043      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fe:	4b48      	ldr	r3, [pc, #288]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a2e:	e021      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a42:	4b37      	ldr	r3, [pc, #220]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a74:	4b2a      	ldr	r3, [pc, #168]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	0a5b      	lsrs	r3, r3, #9
 8006a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9a:	ee17 2a90 	vmov	r2, s15
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ac8:	ee17 2a90 	vmov	r2, s15
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ad0:	4b13      	ldr	r3, [pc, #76]	@ (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af6:	ee17 2a90 	vmov	r2, s15
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006afe:	e008      	b.n	8006b12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	609a      	str	r2, [r3, #8]
}
 8006b12:	bf00      	nop
 8006b14:	3724      	adds	r7, #36	@ 0x24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	58024400 	.word	0x58024400
 8006b24:	03d09000 	.word	0x03d09000
 8006b28:	46000000 	.word	0x46000000
 8006b2c:	4c742400 	.word	0x4c742400
 8006b30:	4a742400 	.word	0x4a742400
 8006b34:	4af42400 	.word	0x4af42400

08006b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b46:	4b53      	ldr	r3, [pc, #332]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d101      	bne.n	8006b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e099      	b.n	8006c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b56:	4b4f      	ldr	r3, [pc, #316]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b62:	f7fa fefd 	bl	8001960 <HAL_GetTick>
 8006b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b68:	e008      	b.n	8006b7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b6a:	f7fa fef9 	bl	8001960 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e086      	b.n	8006c8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b7c:	4b45      	ldr	r3, [pc, #276]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f0      	bne.n	8006b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b88:	4b42      	ldr	r3, [pc, #264]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	493f      	ldr	r1, [pc, #252]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bcc:	4931      	ldr	r1, [pc, #196]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006bd2:	4b30      	ldr	r3, [pc, #192]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	492d      	ldr	r1, [pc, #180]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006be4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	f023 0220 	bic.w	r2, r3, #32
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	4928      	ldr	r1, [pc, #160]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006bf6:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	4a26      	ldr	r2, [pc, #152]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bfc:	f023 0310 	bic.w	r3, r3, #16
 8006c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c02:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c06:	4b24      	ldr	r3, [pc, #144]	@ (8006c98 <RCCEx_PLL2_Config+0x160>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	69d2      	ldr	r2, [r2, #28]
 8006c0e:	00d2      	lsls	r2, r2, #3
 8006c10:	4920      	ldr	r1, [pc, #128]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c16:	4b1f      	ldr	r3, [pc, #124]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	f043 0310 	orr.w	r3, r3, #16
 8006c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c28:	4b1a      	ldr	r3, [pc, #104]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a19      	ldr	r2, [pc, #100]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c34:	e00f      	b.n	8006c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d106      	bne.n	8006c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c3c:	4b15      	ldr	r3, [pc, #84]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	4a14      	ldr	r2, [pc, #80]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c48:	e005      	b.n	8006c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c4a:	4b12      	ldr	r3, [pc, #72]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	4a11      	ldr	r2, [pc, #68]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c56:	4b0f      	ldr	r3, [pc, #60]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c62:	f7fa fe7d 	bl	8001960 <HAL_GetTick>
 8006c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c68:	e008      	b.n	8006c7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c6a:	f7fa fe79 	bl	8001960 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e006      	b.n	8006c8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c7c:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
 8006c98:	ffff0007 	.word	0xffff0007

08006c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006caa:	4b53      	ldr	r3, [pc, #332]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d101      	bne.n	8006cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e099      	b.n	8006dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cba:	4b4f      	ldr	r3, [pc, #316]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc6:	f7fa fe4b 	bl	8001960 <HAL_GetTick>
 8006cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ccc:	e008      	b.n	8006ce0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006cce:	f7fa fe47 	bl	8001960 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e086      	b.n	8006dee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ce0:	4b45      	ldr	r3, [pc, #276]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006cec:	4b42      	ldr	r3, [pc, #264]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	051b      	lsls	r3, r3, #20
 8006cfa:	493f      	ldr	r1, [pc, #252]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	025b      	lsls	r3, r3, #9
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	061b      	lsls	r3, r3, #24
 8006d2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d30:	4931      	ldr	r1, [pc, #196]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d36:	4b30      	ldr	r3, [pc, #192]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	492d      	ldr	r1, [pc, #180]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d48:	4b2b      	ldr	r3, [pc, #172]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	4928      	ldr	r1, [pc, #160]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d5a:	4b27      	ldr	r3, [pc, #156]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	4a26      	ldr	r2, [pc, #152]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d66:	4b24      	ldr	r3, [pc, #144]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d6a:	4b24      	ldr	r3, [pc, #144]	@ (8006dfc <RCCEx_PLL3_Config+0x160>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	69d2      	ldr	r2, [r2, #28]
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	4920      	ldr	r1, [pc, #128]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d98:	e00f      	b.n	8006dba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006da0:	4b15      	ldr	r3, [pc, #84]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	4a14      	ldr	r2, [pc, #80]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006da6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006daa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006dac:	e005      	b.n	8006dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dae:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	4a11      	ldr	r2, [pc, #68]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dba:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc6:	f7fa fdcb 	bl	8001960 <HAL_GetTick>
 8006dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dcc:	e008      	b.n	8006de0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dce:	f7fa fdc7 	bl	8001960 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e006      	b.n	8006dee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	ffff0007 	.word	0xffff0007

08006e00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e10f      	b.n	8007032 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a87      	ldr	r2, [pc, #540]	@ (800703c <HAL_SPI_Init+0x23c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00f      	beq.n	8006e42 <HAL_SPI_Init+0x42>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a86      	ldr	r2, [pc, #536]	@ (8007040 <HAL_SPI_Init+0x240>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00a      	beq.n	8006e42 <HAL_SPI_Init+0x42>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a84      	ldr	r2, [pc, #528]	@ (8007044 <HAL_SPI_Init+0x244>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d005      	beq.n	8006e42 <HAL_SPI_Init+0x42>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2b0f      	cmp	r3, #15
 8006e3c:	d901      	bls.n	8006e42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e0f7      	b.n	8007032 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fbbc 	bl	80075c0 <SPI_GetPacketSize>
 8006e48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7b      	ldr	r2, [pc, #492]	@ (800703c <HAL_SPI_Init+0x23c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00c      	beq.n	8006e6e <HAL_SPI_Init+0x6e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a79      	ldr	r2, [pc, #484]	@ (8007040 <HAL_SPI_Init+0x240>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d007      	beq.n	8006e6e <HAL_SPI_Init+0x6e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a78      	ldr	r2, [pc, #480]	@ (8007044 <HAL_SPI_Init+0x244>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d002      	beq.n	8006e6e <HAL_SPI_Init+0x6e>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d811      	bhi.n	8006e92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e72:	4a72      	ldr	r2, [pc, #456]	@ (800703c <HAL_SPI_Init+0x23c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d009      	beq.n	8006e8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a70      	ldr	r2, [pc, #448]	@ (8007040 <HAL_SPI_Init+0x240>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_SPI_Init+0x8c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6f      	ldr	r2, [pc, #444]	@ (8007044 <HAL_SPI_Init+0x244>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d104      	bne.n	8006e96 <HAL_SPI_Init+0x96>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d901      	bls.n	8006e96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e0cd      	b.n	8007032 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa fa1a 	bl	80012e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006ed2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006edc:	d119      	bne.n	8006f12 <HAL_SPI_Init+0x112>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ee6:	d103      	bne.n	8006ef0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10c      	bne.n	8006f12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f00:	d107      	bne.n	8006f12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00f      	beq.n	8006f3e <HAL_SPI_Init+0x13e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d90b      	bls.n	8006f3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	e007      	b.n	8006f4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	431a      	orrs	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f60:	ea42 0103 	orr.w	r1, r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fae:	ea42 0103 	orr.w	r1, r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d113      	bne.n	8006fee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	40013000 	.word	0x40013000
 8007040:	40003800 	.word	0x40003800
 8007044:	40003c00 	.word	0x40003c00

08007048 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3320      	adds	r3, #32
 800705e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007060:	f7fa fc7e 	bl	8001960 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
 8007074:	e1d1      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_SPI_Transmit+0x3a>
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e1c9      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_SPI_Transmit+0x4c>
 8007090:	2302      	movs	r3, #2
 8007092:	e1c2      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2203      	movs	r2, #3
 80070a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	88fa      	ldrh	r2, [r7, #6]
 80070be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80070ec:	d108      	bne.n	8007100 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e009      	b.n	8007114 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007112:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	4b96      	ldr	r3, [pc, #600]	@ (8007374 <HAL_SPI_Transmit+0x32c>)
 800711c:	4013      	ands	r3, r2
 800711e:	88f9      	ldrh	r1, [r7, #6]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	430b      	orrs	r3, r1
 8007126:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007140:	d107      	bne.n	8007152 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007150:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d947      	bls.n	80071ea <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800715a:	e03f      	b.n	80071dc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d114      	bne.n	8007194 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007192:	e023      	b.n	80071dc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007194:	f7fa fbe4 	bl	8001960 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d803      	bhi.n	80071ac <HAL_SPI_Transmit+0x164>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d102      	bne.n	80071b2 <HAL_SPI_Transmit+0x16a>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d114      	bne.n	80071dc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f936 	bl	8007424 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e11e      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1b9      	bne.n	800715c <HAL_SPI_Transmit+0x114>
 80071e8:	e0f1      	b.n	80073ce <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b07      	cmp	r3, #7
 80071f0:	f240 80e6 	bls.w	80073c0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80071f4:	e05d      	b.n	80072b2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b02      	cmp	r3, #2
 8007202:	d132      	bne.n	800726a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d918      	bls.n	8007242 <HAL_SPI_Transmit+0x1fa>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d014      	beq.n	8007242 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007228:	1d1a      	adds	r2, r3, #4
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b02      	subs	r3, #2
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007240:	e037      	b.n	80072b2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007246:	881a      	ldrh	r2, [r3, #0]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007268:	e023      	b.n	80072b2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800726a:	f7fa fb79 	bl	8001960 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d803      	bhi.n	8007282 <HAL_SPI_Transmit+0x23a>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d102      	bne.n	8007288 <HAL_SPI_Transmit+0x240>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d114      	bne.n	80072b2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f8cb 	bl	8007424 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007294:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e0b3      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d19b      	bne.n	80071f6 <HAL_SPI_Transmit+0x1ae>
 80072be:	e086      	b.n	80073ce <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d154      	bne.n	8007378 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d918      	bls.n	800730c <HAL_SPI_Transmit+0x2c4>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	2b40      	cmp	r3, #64	@ 0x40
 80072e0:	d914      	bls.n	800730c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f2:	1d1a      	adds	r2, r3, #4
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b04      	subs	r3, #4
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800730a:	e059      	b.n	80073c0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	d917      	bls.n	8007348 <HAL_SPI_Transmit+0x300>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d013      	beq.n	8007348 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007324:	881a      	ldrh	r2, [r3, #0]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732e:	1c9a      	adds	r2, r3, #2
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b02      	subs	r3, #2
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007346:	e03b      	b.n	80073c0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3320      	adds	r3, #32
 8007352:	7812      	ldrb	r2, [r2, #0]
 8007354:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007366:	b29b      	uxth	r3, r3
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007372:	e025      	b.n	80073c0 <HAL_SPI_Transmit+0x378>
 8007374:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007378:	f7fa faf2 	bl	8001960 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d803      	bhi.n	8007390 <HAL_SPI_Transmit+0x348>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d102      	bne.n	8007396 <HAL_SPI_Transmit+0x34e>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d114      	bne.n	80073c0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f844 	bl	8007424 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e02c      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f47f af79 	bne.w	80072c0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2200      	movs	r2, #0
 80073d6:	2108      	movs	r1, #8
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f8c3 	bl	8007564 <SPI_WaitOnFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ea:	f043 0220 	orr.w	r2, r3, #32
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f815 	bl	8007424 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007418:	2300      	movs	r3, #0
  }
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop

08007424 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0208 	orr.w	r2, r2, #8
 8007442:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0210 	orr.w	r2, r2, #16
 8007452:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6919      	ldr	r1, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b3c      	ldr	r3, [pc, #240]	@ (8007560 <SPI_CloseTransfer+0x13c>)
 8007470:	400b      	ands	r3, r1
 8007472:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007482:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b04      	cmp	r3, #4
 800748e:	d014      	beq.n	80074ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0220 	orr.w	r2, r2, #32
 80074b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d014      	beq.n	80074f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00f      	beq.n	80074f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d6:	f043 0204 	orr.w	r2, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00f      	beq.n	800751a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007500:	f043 0201 	orr.w	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007518:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800752a:	f043 0208 	orr.w	r2, r3, #8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007542:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	fffffc90 	.word	0xfffffc90

08007564 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007574:	e010      	b.n	8007598 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007576:	f7fa f9f3 	bl	8001960 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d803      	bhi.n	800758e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758c:	d102      	bne.n	8007594 <SPI_WaitOnFlagUntilTimeout+0x30>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e00f      	b.n	80075b8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4013      	ands	r3, r2
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bf0c      	ite	eq
 80075a8:	2301      	moveq	r3, #1
 80075aa:	2300      	movne	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d0df      	beq.n	8007576 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3307      	adds	r3, #7
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e042      	b.n	800768e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7f9 ff02 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2224      	movs	r2, #36	@ 0x24
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fa4b 	bl	8008adc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fce0 	bl	800800c <UART_SetConfig>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e01b      	b.n	800768e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007664:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007674:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 faca 	bl	8008c20 <UART_CheckIdleState>
 800768c:	4603      	mov	r3, r0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007698:	b480      	push	{r7}
 800769a:	b091      	sub	sp, #68	@ 0x44
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d178      	bne.n	80077a2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <HAL_UART_Transmit_IT+0x24>
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e071      	b.n	80077a4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	88fa      	ldrh	r2, [r7, #6]
 80076d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2221      	movs	r2, #33	@ 0x21
 80076e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f4:	d12a      	bne.n	800774c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fe:	d107      	bne.n	8007710 <HAL_UART_Transmit_IT+0x78>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a29      	ldr	r2, [pc, #164]	@ (80077b0 <HAL_UART_Transmit_IT+0x118>)
 800770c:	679a      	str	r2, [r3, #120]	@ 0x78
 800770e:	e002      	b.n	8007716 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a28      	ldr	r2, [pc, #160]	@ (80077b4 <HAL_UART_Transmit_IT+0x11c>)
 8007714:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3308      	adds	r3, #8
 800771c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800772c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007736:	637a      	str	r2, [r7, #52]	@ 0x34
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800773c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e5      	bne.n	8007716 <HAL_UART_Transmit_IT+0x7e>
 800774a:	e028      	b.n	800779e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007754:	d107      	bne.n	8007766 <HAL_UART_Transmit_IT+0xce>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a15      	ldr	r2, [pc, #84]	@ (80077b8 <HAL_UART_Transmit_IT+0x120>)
 8007762:	679a      	str	r2, [r3, #120]	@ 0x78
 8007764:	e002      	b.n	800776c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4a14      	ldr	r2, [pc, #80]	@ (80077bc <HAL_UART_Transmit_IT+0x124>)
 800776a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	613b      	str	r3, [r7, #16]
   return(result);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	69f9      	ldr	r1, [r7, #28]
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	61bb      	str	r3, [r7, #24]
   return(result);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e6      	bne.n	800776c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	e000      	b.n	80077a4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3744      	adds	r7, #68	@ 0x44
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	080093e7 	.word	0x080093e7
 80077b4:	08009307 	.word	0x08009307
 80077b8:	08009245 	.word	0x08009245
 80077bc:	0800918d 	.word	0x0800918d

080077c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	@ 0x28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d137      	bne.n	8007848 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_Receive_IT+0x24>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e030      	b.n	800784a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a18      	ldr	r2, [pc, #96]	@ (8007854 <HAL_UART_Receive_IT+0x94>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d01f      	beq.n	8007838 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d018      	beq.n	8007838 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	623b      	str	r3, [r7, #32]
 8007826:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	61bb      	str	r3, [r7, #24]
   return(result);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	461a      	mov	r2, r3
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 fb06 	bl	8008e50 <UART_Start_Receive_IT>
 8007844:	4603      	mov	r3, r0
 8007846:	e000      	b.n	800784a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
  }
}
 800784a:	4618      	mov	r0, r3
 800784c:	3728      	adds	r7, #40	@ 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	58000c00 	.word	0x58000c00

08007858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b0ba      	sub	sp, #232	@ 0xe8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800787e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007882:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007886:	4013      	ands	r3, r2
 8007888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800788c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11b      	bne.n	80078cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d015      	beq.n	80078cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d009      	beq.n	80078cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8377 	beq.w	8007fb0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
      }
      return;
 80078ca:	e371      	b.n	8007fb0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8123 	beq.w	8007b1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078da:	4b8d      	ldr	r3, [pc, #564]	@ (8007b10 <HAL_UART_IRQHandler+0x2b8>)
 80078dc:	4013      	ands	r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007b14 <HAL_UART_IRQHandler+0x2bc>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8116 	beq.w	8007b1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d011      	beq.n	8007920 <HAL_UART_IRQHandler+0xc8>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <HAL_UART_IRQHandler+0xf8>
 800792c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2202      	movs	r2, #2
 800793e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007946:	f043 0204 	orr.w	r2, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0x128>
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2204      	movs	r2, #4
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007976:	f043 0202 	orr.w	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007998:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800799c:	4b5c      	ldr	r3, [pc, #368]	@ (8007b10 <HAL_UART_IRQHandler+0x2b8>)
 800799e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2208      	movs	r2, #8
 80079aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b2:	f043 0208 	orr.w	r2, r3, #8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <HAL_UART_IRQHandler+0x196>
 80079c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e4:	f043 0220 	orr.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 82dd 	beq.w	8007fb4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d005      	beq.n	8007a52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d054      	beq.n	8007afc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fb1e 	bl	8009094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a62:	2b40      	cmp	r3, #64	@ 0x40
 8007a64:	d146      	bne.n	8007af4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1d9      	bne.n	8007a66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d017      	beq.n	8007aec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac2:	4a15      	ldr	r2, [pc, #84]	@ (8007b18 <HAL_UART_IRQHandler+0x2c0>)
 8007ac4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fa fbc5 	bl	800225c <HAL_DMA_Abort_IT>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d019      	beq.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aea:	e00f      	b.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa77 	bl	8007fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af2:	e00b      	b.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa73 	bl	8007fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afa:	e007      	b.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa6f 	bl	8007fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b0a:	e253      	b.n	8007fb4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	bf00      	nop
    return;
 8007b0e:	e251      	b.n	8007fb4 <HAL_UART_IRQHandler+0x75c>
 8007b10:	10000001 	.word	0x10000001
 8007b14:	04000120 	.word	0x04000120
 8007b18:	08009161 	.word	0x08009161

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	f040 81e7 	bne.w	8007ef4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2a:	f003 0310 	and.w	r3, r3, #16
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 81e0 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 81d9 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2210      	movs	r2, #16
 8007b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b40      	cmp	r3, #64	@ 0x40
 8007b56:	f040 8151 	bne.w	8007dfc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a96      	ldr	r2, [pc, #600]	@ (8007dbc <HAL_UART_IRQHandler+0x564>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d068      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a93      	ldr	r2, [pc, #588]	@ (8007dc0 <HAL_UART_IRQHandler+0x568>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d061      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a91      	ldr	r2, [pc, #580]	@ (8007dc4 <HAL_UART_IRQHandler+0x56c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d05a      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a8e      	ldr	r2, [pc, #568]	@ (8007dc8 <HAL_UART_IRQHandler+0x570>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d053      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a8c      	ldr	r2, [pc, #560]	@ (8007dcc <HAL_UART_IRQHandler+0x574>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d04c      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a89      	ldr	r2, [pc, #548]	@ (8007dd0 <HAL_UART_IRQHandler+0x578>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d045      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a87      	ldr	r2, [pc, #540]	@ (8007dd4 <HAL_UART_IRQHandler+0x57c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d03e      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a84      	ldr	r2, [pc, #528]	@ (8007dd8 <HAL_UART_IRQHandler+0x580>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d037      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a82      	ldr	r2, [pc, #520]	@ (8007ddc <HAL_UART_IRQHandler+0x584>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d030      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a7f      	ldr	r2, [pc, #508]	@ (8007de0 <HAL_UART_IRQHandler+0x588>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d029      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a7d      	ldr	r2, [pc, #500]	@ (8007de4 <HAL_UART_IRQHandler+0x58c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d022      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a7a      	ldr	r2, [pc, #488]	@ (8007de8 <HAL_UART_IRQHandler+0x590>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01b      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a78      	ldr	r2, [pc, #480]	@ (8007dec <HAL_UART_IRQHandler+0x594>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d014      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a75      	ldr	r2, [pc, #468]	@ (8007df0 <HAL_UART_IRQHandler+0x598>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00d      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a73      	ldr	r2, [pc, #460]	@ (8007df4 <HAL_UART_IRQHandler+0x59c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d006      	beq.n	8007c3a <HAL_UART_IRQHandler+0x3e2>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a70      	ldr	r2, [pc, #448]	@ (8007df8 <HAL_UART_IRQHandler+0x5a0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d106      	bne.n	8007c48 <HAL_UART_IRQHandler+0x3f0>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	e005      	b.n	8007c54 <HAL_UART_IRQHandler+0x3fc>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 81ab 	beq.w	8007fb8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	f080 81a3 	bcs.w	8007fb8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c88:	f000 8087 	beq.w	8007d9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1da      	bne.n	8007c8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e1      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3308      	adds	r3, #8
 8007d18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e3      	bne.n	8007d12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d68:	f023 0310 	bic.w	r3, r3, #16
 8007d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e4      	bne.n	8007d58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7f9 ff43 	bl	8001c20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f91d 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dba:	e0fd      	b.n	8007fb8 <HAL_UART_IRQHandler+0x760>
 8007dbc:	40020010 	.word	0x40020010
 8007dc0:	40020028 	.word	0x40020028
 8007dc4:	40020040 	.word	0x40020040
 8007dc8:	40020058 	.word	0x40020058
 8007dcc:	40020070 	.word	0x40020070
 8007dd0:	40020088 	.word	0x40020088
 8007dd4:	400200a0 	.word	0x400200a0
 8007dd8:	400200b8 	.word	0x400200b8
 8007ddc:	40020410 	.word	0x40020410
 8007de0:	40020428 	.word	0x40020428
 8007de4:	40020440 	.word	0x40020440
 8007de8:	40020458 	.word	0x40020458
 8007dec:	40020470 	.word	0x40020470
 8007df0:	40020488 	.word	0x40020488
 8007df4:	400204a0 	.word	0x400204a0
 8007df8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80cf 	beq.w	8007fbc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80ca 	beq.w	8007fbc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e4      	bne.n	8007e28 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e6e:	6a3a      	ldr	r2, [r7, #32]
 8007e70:	4b55      	ldr	r3, [pc, #340]	@ (8007fc8 <HAL_UART_IRQHandler+0x770>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e82:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e3      	bne.n	8007e5e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0310 	bic.w	r3, r3, #16
 8007ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	69b9      	ldr	r1, [r7, #24]
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e4      	bne.n	8007eaa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f881 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ef2:	e063      	b.n	8007fbc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00e      	beq.n	8007f1e <HAL_UART_IRQHandler+0x6c6>
 8007f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f002 f822 	bl	8009f60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1c:	e051      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d014      	beq.n	8007f54 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d03a      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
    }
    return;
 8007f52:	e035      	b.n	8007fc0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <HAL_UART_IRQHandler+0x71c>
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 faaf 	bl	80094d0 <UART_EndTransmit_IT>
    return;
 8007f72:	e026      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d009      	beq.n	8007f94 <HAL_UART_IRQHandler+0x73c>
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fffb 	bl	8009f88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f92:	e016      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d010      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da0c      	bge.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 ffe3 	bl	8009f74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fae:	e008      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007fb0:	bf00      	nop
 8007fb2:	e006      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
    return;
 8007fb4:	bf00      	nop
 8007fb6:	e004      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007fb8:	bf00      	nop
 8007fba:	e002      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007fbc:	bf00      	nop
 8007fbe:	e000      	b.n	8007fc2 <HAL_UART_IRQHandler+0x76a>
    return;
 8007fc0:	bf00      	nop
  }
}
 8007fc2:	37e8      	adds	r7, #232	@ 0xe8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	effffffe 	.word	0xeffffffe

08007fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b092      	sub	sp, #72	@ 0x48
 8008012:	af00      	add	r7, sp, #0
 8008014:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	431a      	orrs	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	431a      	orrs	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	4313      	orrs	r3, r2
 8008032:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4bbe      	ldr	r3, [pc, #760]	@ (8008334 <UART_SetConfig+0x328>)
 800803c:	4013      	ands	r3, r2
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008044:	430b      	orrs	r3, r1
 8008046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4ab3      	ldr	r2, [pc, #716]	@ (8008338 <UART_SetConfig+0x32c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008074:	4313      	orrs	r3, r2
 8008076:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	4baf      	ldr	r3, [pc, #700]	@ (800833c <UART_SetConfig+0x330>)
 8008080:	4013      	ands	r3, r2
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008088:	430b      	orrs	r3, r1
 800808a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	f023 010f 	bic.w	r1, r3, #15
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4aa6      	ldr	r2, [pc, #664]	@ (8008340 <UART_SetConfig+0x334>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d177      	bne.n	800819c <UART_SetConfig+0x190>
 80080ac:	4ba5      	ldr	r3, [pc, #660]	@ (8008344 <UART_SetConfig+0x338>)
 80080ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080b4:	2b28      	cmp	r3, #40	@ 0x28
 80080b6:	d86d      	bhi.n	8008194 <UART_SetConfig+0x188>
 80080b8:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0xb4>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	08008165 	.word	0x08008165
 80080c4:	08008195 	.word	0x08008195
 80080c8:	08008195 	.word	0x08008195
 80080cc:	08008195 	.word	0x08008195
 80080d0:	08008195 	.word	0x08008195
 80080d4:	08008195 	.word	0x08008195
 80080d8:	08008195 	.word	0x08008195
 80080dc:	08008195 	.word	0x08008195
 80080e0:	0800816d 	.word	0x0800816d
 80080e4:	08008195 	.word	0x08008195
 80080e8:	08008195 	.word	0x08008195
 80080ec:	08008195 	.word	0x08008195
 80080f0:	08008195 	.word	0x08008195
 80080f4:	08008195 	.word	0x08008195
 80080f8:	08008195 	.word	0x08008195
 80080fc:	08008195 	.word	0x08008195
 8008100:	08008175 	.word	0x08008175
 8008104:	08008195 	.word	0x08008195
 8008108:	08008195 	.word	0x08008195
 800810c:	08008195 	.word	0x08008195
 8008110:	08008195 	.word	0x08008195
 8008114:	08008195 	.word	0x08008195
 8008118:	08008195 	.word	0x08008195
 800811c:	08008195 	.word	0x08008195
 8008120:	0800817d 	.word	0x0800817d
 8008124:	08008195 	.word	0x08008195
 8008128:	08008195 	.word	0x08008195
 800812c:	08008195 	.word	0x08008195
 8008130:	08008195 	.word	0x08008195
 8008134:	08008195 	.word	0x08008195
 8008138:	08008195 	.word	0x08008195
 800813c:	08008195 	.word	0x08008195
 8008140:	08008185 	.word	0x08008185
 8008144:	08008195 	.word	0x08008195
 8008148:	08008195 	.word	0x08008195
 800814c:	08008195 	.word	0x08008195
 8008150:	08008195 	.word	0x08008195
 8008154:	08008195 	.word	0x08008195
 8008158:	08008195 	.word	0x08008195
 800815c:	08008195 	.word	0x08008195
 8008160:	0800818d 	.word	0x0800818d
 8008164:	2301      	movs	r3, #1
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e222      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800816c:	2304      	movs	r3, #4
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e21e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008174:	2308      	movs	r3, #8
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e21a      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800817c:	2310      	movs	r3, #16
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008182:	e216      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008184:	2320      	movs	r3, #32
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818a:	e212      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800818c:	2340      	movs	r3, #64	@ 0x40
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e20e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008194:	2380      	movs	r3, #128	@ 0x80
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819a:	e20a      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a69      	ldr	r2, [pc, #420]	@ (8008348 <UART_SetConfig+0x33c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d130      	bne.n	8008208 <UART_SetConfig+0x1fc>
 80081a6:	4b67      	ldr	r3, [pc, #412]	@ (8008344 <UART_SetConfig+0x338>)
 80081a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d826      	bhi.n	8008200 <UART_SetConfig+0x1f4>
 80081b2:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <UART_SetConfig+0x1ac>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d1 	.word	0x080081d1
 80081bc:	080081d9 	.word	0x080081d9
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e1ec      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80081d8:	2304      	movs	r3, #4
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e1e8      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80081e0:	2308      	movs	r3, #8
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e1e4      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80081e8:	2310      	movs	r3, #16
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e1e0      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80081f0:	2320      	movs	r3, #32
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e1dc      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80081f8:	2340      	movs	r3, #64	@ 0x40
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e1d8      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008200:	2380      	movs	r3, #128	@ 0x80
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008206:	e1d4      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a4f      	ldr	r2, [pc, #316]	@ (800834c <UART_SetConfig+0x340>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d130      	bne.n	8008274 <UART_SetConfig+0x268>
 8008212:	4b4c      	ldr	r3, [pc, #304]	@ (8008344 <UART_SetConfig+0x338>)
 8008214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b05      	cmp	r3, #5
 800821c:	d826      	bhi.n	800826c <UART_SetConfig+0x260>
 800821e:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <UART_SetConfig+0x218>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008245 	.word	0x08008245
 800822c:	0800824d 	.word	0x0800824d
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	2300      	movs	r3, #0
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e1b6      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008244:	2304      	movs	r3, #4
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e1b2      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800824c:	2308      	movs	r3, #8
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e1ae      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008254:	2310      	movs	r3, #16
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e1aa      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800825c:	2320      	movs	r3, #32
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e1a6      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008264:	2340      	movs	r3, #64	@ 0x40
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826a:	e1a2      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800826c:	2380      	movs	r3, #128	@ 0x80
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008272:	e19e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a35      	ldr	r2, [pc, #212]	@ (8008350 <UART_SetConfig+0x344>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d130      	bne.n	80082e0 <UART_SetConfig+0x2d4>
 800827e:	4b31      	ldr	r3, [pc, #196]	@ (8008344 <UART_SetConfig+0x338>)
 8008280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	2b05      	cmp	r3, #5
 8008288:	d826      	bhi.n	80082d8 <UART_SetConfig+0x2cc>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <UART_SetConfig+0x284>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a9 	.word	0x080082a9
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082b9 	.word	0x080082b9
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c9 	.word	0x080082c9
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e180      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e17c      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e178      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e174      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082c8:	2320      	movs	r3, #32
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e170      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082d0:	2340      	movs	r3, #64	@ 0x40
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e16c      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e168      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008354 <UART_SetConfig+0x348>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d142      	bne.n	8008370 <UART_SetConfig+0x364>
 80082ea:	4b16      	ldr	r3, [pc, #88]	@ (8008344 <UART_SetConfig+0x338>)
 80082ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d838      	bhi.n	8008368 <UART_SetConfig+0x35c>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x2f0>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008315 	.word	0x08008315
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008325 	.word	0x08008325
 8008308:	0800832d 	.word	0x0800832d
 800830c:	08008359 	.word	0x08008359
 8008310:	08008361 	.word	0x08008361
 8008314:	2300      	movs	r3, #0
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831a:	e14a      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800831c:	2304      	movs	r3, #4
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008322:	e146      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008324:	2308      	movs	r3, #8
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e142      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800832c:	2310      	movs	r3, #16
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e13e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008334:	cfff69f3 	.word	0xcfff69f3
 8008338:	58000c00 	.word	0x58000c00
 800833c:	11fff4ff 	.word	0x11fff4ff
 8008340:	40011000 	.word	0x40011000
 8008344:	58024400 	.word	0x58024400
 8008348:	40004400 	.word	0x40004400
 800834c:	40004800 	.word	0x40004800
 8008350:	40004c00 	.word	0x40004c00
 8008354:	40005000 	.word	0x40005000
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e128      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	@ 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e124      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	@ 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e120      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4acb      	ldr	r2, [pc, #812]	@ (80086a4 <UART_SetConfig+0x698>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d176      	bne.n	8008468 <UART_SetConfig+0x45c>
 800837a:	4bcb      	ldr	r3, [pc, #812]	@ (80086a8 <UART_SetConfig+0x69c>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008382:	2b28      	cmp	r3, #40	@ 0x28
 8008384:	d86c      	bhi.n	8008460 <UART_SetConfig+0x454>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <UART_SetConfig+0x380>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	08008431 	.word	0x08008431
 8008390:	08008461 	.word	0x08008461
 8008394:	08008461 	.word	0x08008461
 8008398:	08008461 	.word	0x08008461
 800839c:	08008461 	.word	0x08008461
 80083a0:	08008461 	.word	0x08008461
 80083a4:	08008461 	.word	0x08008461
 80083a8:	08008461 	.word	0x08008461
 80083ac:	08008439 	.word	0x08008439
 80083b0:	08008461 	.word	0x08008461
 80083b4:	08008461 	.word	0x08008461
 80083b8:	08008461 	.word	0x08008461
 80083bc:	08008461 	.word	0x08008461
 80083c0:	08008461 	.word	0x08008461
 80083c4:	08008461 	.word	0x08008461
 80083c8:	08008461 	.word	0x08008461
 80083cc:	08008441 	.word	0x08008441
 80083d0:	08008461 	.word	0x08008461
 80083d4:	08008461 	.word	0x08008461
 80083d8:	08008461 	.word	0x08008461
 80083dc:	08008461 	.word	0x08008461
 80083e0:	08008461 	.word	0x08008461
 80083e4:	08008461 	.word	0x08008461
 80083e8:	08008461 	.word	0x08008461
 80083ec:	08008449 	.word	0x08008449
 80083f0:	08008461 	.word	0x08008461
 80083f4:	08008461 	.word	0x08008461
 80083f8:	08008461 	.word	0x08008461
 80083fc:	08008461 	.word	0x08008461
 8008400:	08008461 	.word	0x08008461
 8008404:	08008461 	.word	0x08008461
 8008408:	08008461 	.word	0x08008461
 800840c:	08008451 	.word	0x08008451
 8008410:	08008461 	.word	0x08008461
 8008414:	08008461 	.word	0x08008461
 8008418:	08008461 	.word	0x08008461
 800841c:	08008461 	.word	0x08008461
 8008420:	08008461 	.word	0x08008461
 8008424:	08008461 	.word	0x08008461
 8008428:	08008461 	.word	0x08008461
 800842c:	08008459 	.word	0x08008459
 8008430:	2301      	movs	r3, #1
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008436:	e0bc      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e0b8      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e0b4      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844e:	e0b0      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008450:	2320      	movs	r3, #32
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008456:	e0ac      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008458:	2340      	movs	r3, #64	@ 0x40
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845e:	e0a8      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008460:	2380      	movs	r3, #128	@ 0x80
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008466:	e0a4      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a8f      	ldr	r2, [pc, #572]	@ (80086ac <UART_SetConfig+0x6a0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d130      	bne.n	80084d4 <UART_SetConfig+0x4c8>
 8008472:	4b8d      	ldr	r3, [pc, #564]	@ (80086a8 <UART_SetConfig+0x69c>)
 8008474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b05      	cmp	r3, #5
 800847c:	d826      	bhi.n	80084cc <UART_SetConfig+0x4c0>
 800847e:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <UART_SetConfig+0x478>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	0800849d 	.word	0x0800849d
 8008488:	080084a5 	.word	0x080084a5
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	2300      	movs	r3, #0
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e086      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e082      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e07e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e07a      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084bc:	2320      	movs	r3, #32
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e076      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084c4:	2340      	movs	r3, #64	@ 0x40
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e072      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084cc:	2380      	movs	r3, #128	@ 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e06e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a75      	ldr	r2, [pc, #468]	@ (80086b0 <UART_SetConfig+0x6a4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d130      	bne.n	8008540 <UART_SetConfig+0x534>
 80084de:	4b72      	ldr	r3, [pc, #456]	@ (80086a8 <UART_SetConfig+0x69c>)
 80084e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d826      	bhi.n	8008538 <UART_SetConfig+0x52c>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <UART_SetConfig+0x4e4>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008529 	.word	0x08008529
 8008504:	08008531 	.word	0x08008531
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e050      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e04c      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e048      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e044      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008528:	2320      	movs	r3, #32
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e040      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008530:	2340      	movs	r3, #64	@ 0x40
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e03c      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008538:	2380      	movs	r3, #128	@ 0x80
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e038      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a5b      	ldr	r2, [pc, #364]	@ (80086b4 <UART_SetConfig+0x6a8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d130      	bne.n	80085ac <UART_SetConfig+0x5a0>
 800854a:	4b57      	ldr	r3, [pc, #348]	@ (80086a8 <UART_SetConfig+0x69c>)
 800854c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	2b05      	cmp	r3, #5
 8008554:	d826      	bhi.n	80085a4 <UART_SetConfig+0x598>
 8008556:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <UART_SetConfig+0x550>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008575 	.word	0x08008575
 8008560:	0800857d 	.word	0x0800857d
 8008564:	08008585 	.word	0x08008585
 8008568:	0800858d 	.word	0x0800858d
 800856c:	08008595 	.word	0x08008595
 8008570:	0800859d 	.word	0x0800859d
 8008574:	2302      	movs	r3, #2
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e01a      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800857c:	2304      	movs	r3, #4
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e016      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008584:	2308      	movs	r3, #8
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e012      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800858c:	2310      	movs	r3, #16
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e00e      	b.n	80085b2 <UART_SetConfig+0x5a6>
 8008594:	2320      	movs	r3, #32
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e00a      	b.n	80085b2 <UART_SetConfig+0x5a6>
 800859c:	2340      	movs	r3, #64	@ 0x40
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e006      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80085a4:	2380      	movs	r3, #128	@ 0x80
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e002      	b.n	80085b2 <UART_SetConfig+0x5a6>
 80085ac:	2380      	movs	r3, #128	@ 0x80
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a3f      	ldr	r2, [pc, #252]	@ (80086b4 <UART_SetConfig+0x6a8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	f040 80f8 	bne.w	80087ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	dc46      	bgt.n	8008654 <UART_SetConfig+0x648>
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	f2c0 8082 	blt.w	80086d0 <UART_SetConfig+0x6c4>
 80085cc:	3b02      	subs	r3, #2
 80085ce:	2b1e      	cmp	r3, #30
 80085d0:	d87e      	bhi.n	80086d0 <UART_SetConfig+0x6c4>
 80085d2:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <UART_SetConfig+0x5cc>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	0800865b 	.word	0x0800865b
 80085dc:	080086d1 	.word	0x080086d1
 80085e0:	08008663 	.word	0x08008663
 80085e4:	080086d1 	.word	0x080086d1
 80085e8:	080086d1 	.word	0x080086d1
 80085ec:	080086d1 	.word	0x080086d1
 80085f0:	08008673 	.word	0x08008673
 80085f4:	080086d1 	.word	0x080086d1
 80085f8:	080086d1 	.word	0x080086d1
 80085fc:	080086d1 	.word	0x080086d1
 8008600:	080086d1 	.word	0x080086d1
 8008604:	080086d1 	.word	0x080086d1
 8008608:	080086d1 	.word	0x080086d1
 800860c:	080086d1 	.word	0x080086d1
 8008610:	08008683 	.word	0x08008683
 8008614:	080086d1 	.word	0x080086d1
 8008618:	080086d1 	.word	0x080086d1
 800861c:	080086d1 	.word	0x080086d1
 8008620:	080086d1 	.word	0x080086d1
 8008624:	080086d1 	.word	0x080086d1
 8008628:	080086d1 	.word	0x080086d1
 800862c:	080086d1 	.word	0x080086d1
 8008630:	080086d1 	.word	0x080086d1
 8008634:	080086d1 	.word	0x080086d1
 8008638:	080086d1 	.word	0x080086d1
 800863c:	080086d1 	.word	0x080086d1
 8008640:	080086d1 	.word	0x080086d1
 8008644:	080086d1 	.word	0x080086d1
 8008648:	080086d1 	.word	0x080086d1
 800864c:	080086d1 	.word	0x080086d1
 8008650:	080086c3 	.word	0x080086c3
 8008654:	2b40      	cmp	r3, #64	@ 0x40
 8008656:	d037      	beq.n	80086c8 <UART_SetConfig+0x6bc>
 8008658:	e03a      	b.n	80086d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800865a:	f7fd ffaf 	bl	80065bc <HAL_RCCEx_GetD3PCLK1Freq>
 800865e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008660:	e03c      	b.n	80086dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd ffbe 	bl	80065e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008670:	e034      	b.n	80086dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008672:	f107 0318 	add.w	r3, r7, #24
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe f90a 	bl	8006890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	e02c      	b.n	80086dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008682:	4b09      	ldr	r3, [pc, #36]	@ (80086a8 <UART_SetConfig+0x69c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d016      	beq.n	80086bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800868e:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <UART_SetConfig+0x69c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	08db      	lsrs	r3, r3, #3
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	4a07      	ldr	r2, [pc, #28]	@ (80086b8 <UART_SetConfig+0x6ac>)
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086a0:	e01c      	b.n	80086dc <UART_SetConfig+0x6d0>
 80086a2:	bf00      	nop
 80086a4:	40011400 	.word	0x40011400
 80086a8:	58024400 	.word	0x58024400
 80086ac:	40007800 	.word	0x40007800
 80086b0:	40007c00 	.word	0x40007c00
 80086b4:	58000c00 	.word	0x58000c00
 80086b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80086bc:	4b9d      	ldr	r3, [pc, #628]	@ (8008934 <UART_SetConfig+0x928>)
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c0:	e00c      	b.n	80086dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086c2:	4b9d      	ldr	r3, [pc, #628]	@ (8008938 <UART_SetConfig+0x92c>)
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c6:	e009      	b.n	80086dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ce:	e005      	b.n	80086dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 81de 	beq.w	8008aa0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e8:	4a94      	ldr	r2, [pc, #592]	@ (800893c <UART_SetConfig+0x930>)
 80086ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	4413      	add	r3, r2
 8008702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008704:	429a      	cmp	r2, r3
 8008706:	d305      	bcc.n	8008714 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800870e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800871a:	e1c1      	b.n	8008aa0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871e:	2200      	movs	r2, #0
 8008720:	60bb      	str	r3, [r7, #8]
 8008722:	60fa      	str	r2, [r7, #12]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008728:	4a84      	ldr	r2, [pc, #528]	@ (800893c <UART_SetConfig+0x930>)
 800872a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800872e:	b29b      	uxth	r3, r3
 8008730:	2200      	movs	r2, #0
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800873a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800873e:	f7f7 fe27 	bl	8000390 <__aeabi_uldivmod>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	f04f 0200 	mov.w	r2, #0
 800874e:	f04f 0300 	mov.w	r3, #0
 8008752:	020b      	lsls	r3, r1, #8
 8008754:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008758:	0202      	lsls	r2, r0, #8
 800875a:	6979      	ldr	r1, [r7, #20]
 800875c:	6849      	ldr	r1, [r1, #4]
 800875e:	0849      	lsrs	r1, r1, #1
 8008760:	2000      	movs	r0, #0
 8008762:	460c      	mov	r4, r1
 8008764:	4605      	mov	r5, r0
 8008766:	eb12 0804 	adds.w	r8, r2, r4
 800876a:	eb43 0905 	adc.w	r9, r3, r5
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	469a      	mov	sl, r3
 8008776:	4693      	mov	fp, r2
 8008778:	4652      	mov	r2, sl
 800877a:	465b      	mov	r3, fp
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f7 fe06 	bl	8000390 <__aeabi_uldivmod>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4613      	mov	r3, r2
 800878a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008792:	d308      	bcc.n	80087a6 <UART_SetConfig+0x79a>
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800879a:	d204      	bcs.n	80087a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087a2:	60da      	str	r2, [r3, #12]
 80087a4:	e17c      	b.n	8008aa0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087ac:	e178      	b.n	8008aa0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087b6:	f040 80c5 	bne.w	8008944 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087be:	2b20      	cmp	r3, #32
 80087c0:	dc48      	bgt.n	8008854 <UART_SetConfig+0x848>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	db7b      	blt.n	80088be <UART_SetConfig+0x8b2>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d879      	bhi.n	80088be <UART_SetConfig+0x8b2>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <UART_SetConfig+0x7c4>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	0800885b 	.word	0x0800885b
 80087d4:	08008863 	.word	0x08008863
 80087d8:	080088bf 	.word	0x080088bf
 80087dc:	080088bf 	.word	0x080088bf
 80087e0:	0800886b 	.word	0x0800886b
 80087e4:	080088bf 	.word	0x080088bf
 80087e8:	080088bf 	.word	0x080088bf
 80087ec:	080088bf 	.word	0x080088bf
 80087f0:	0800887b 	.word	0x0800887b
 80087f4:	080088bf 	.word	0x080088bf
 80087f8:	080088bf 	.word	0x080088bf
 80087fc:	080088bf 	.word	0x080088bf
 8008800:	080088bf 	.word	0x080088bf
 8008804:	080088bf 	.word	0x080088bf
 8008808:	080088bf 	.word	0x080088bf
 800880c:	080088bf 	.word	0x080088bf
 8008810:	0800888b 	.word	0x0800888b
 8008814:	080088bf 	.word	0x080088bf
 8008818:	080088bf 	.word	0x080088bf
 800881c:	080088bf 	.word	0x080088bf
 8008820:	080088bf 	.word	0x080088bf
 8008824:	080088bf 	.word	0x080088bf
 8008828:	080088bf 	.word	0x080088bf
 800882c:	080088bf 	.word	0x080088bf
 8008830:	080088bf 	.word	0x080088bf
 8008834:	080088bf 	.word	0x080088bf
 8008838:	080088bf 	.word	0x080088bf
 800883c:	080088bf 	.word	0x080088bf
 8008840:	080088bf 	.word	0x080088bf
 8008844:	080088bf 	.word	0x080088bf
 8008848:	080088bf 	.word	0x080088bf
 800884c:	080088bf 	.word	0x080088bf
 8008850:	080088b1 	.word	0x080088b1
 8008854:	2b40      	cmp	r3, #64	@ 0x40
 8008856:	d02e      	beq.n	80088b6 <UART_SetConfig+0x8aa>
 8008858:	e031      	b.n	80088be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800885a:	f7fc fc79 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 800885e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008860:	e033      	b.n	80088ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008862:	f7fc fc8b 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 8008866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008868:	e02f      	b.n	80088ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800886e:	4618      	mov	r0, r3
 8008870:	f7fd feba 	bl	80065e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008878:	e027      	b.n	80088ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800887a:	f107 0318 	add.w	r3, r7, #24
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe f806 	bl	8006890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	e01f      	b.n	80088ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800888a:	4b2d      	ldr	r3, [pc, #180]	@ (8008940 <UART_SetConfig+0x934>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008896:	4b2a      	ldr	r3, [pc, #168]	@ (8008940 <UART_SetConfig+0x934>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	08db      	lsrs	r3, r3, #3
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	4a24      	ldr	r2, [pc, #144]	@ (8008934 <UART_SetConfig+0x928>)
 80088a2:	fa22 f303 	lsr.w	r3, r2, r3
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088a8:	e00f      	b.n	80088ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088aa:	4b22      	ldr	r3, [pc, #136]	@ (8008934 <UART_SetConfig+0x928>)
 80088ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ae:	e00c      	b.n	80088ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088b0:	4b21      	ldr	r3, [pc, #132]	@ (8008938 <UART_SetConfig+0x92c>)
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b4:	e009      	b.n	80088ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088bc:	e005      	b.n	80088ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80e7 	beq.w	8008aa0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	4a19      	ldr	r2, [pc, #100]	@ (800893c <UART_SetConfig+0x930>)
 80088d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088dc:	461a      	mov	r2, r3
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e4:	005a      	lsls	r2, r3, #1
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	085b      	lsrs	r3, r3, #1
 80088ec:	441a      	add	r2, r3
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fa:	2b0f      	cmp	r3, #15
 80088fc:	d916      	bls.n	800892c <UART_SetConfig+0x920>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008904:	d212      	bcs.n	800892c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	b29b      	uxth	r3, r3
 800890a:	f023 030f 	bic.w	r3, r3, #15
 800890e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	b29b      	uxth	r3, r3
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	b29a      	uxth	r2, r3
 800891c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800891e:	4313      	orrs	r3, r2
 8008920:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008928:	60da      	str	r2, [r3, #12]
 800892a:	e0b9      	b.n	8008aa0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008932:	e0b5      	b.n	8008aa0 <UART_SetConfig+0xa94>
 8008934:	03d09000 	.word	0x03d09000
 8008938:	003d0900 	.word	0x003d0900
 800893c:	0800b37c 	.word	0x0800b37c
 8008940:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008944:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008948:	2b20      	cmp	r3, #32
 800894a:	dc49      	bgt.n	80089e0 <UART_SetConfig+0x9d4>
 800894c:	2b00      	cmp	r3, #0
 800894e:	db7c      	blt.n	8008a4a <UART_SetConfig+0xa3e>
 8008950:	2b20      	cmp	r3, #32
 8008952:	d87a      	bhi.n	8008a4a <UART_SetConfig+0xa3e>
 8008954:	a201      	add	r2, pc, #4	@ (adr r2, 800895c <UART_SetConfig+0x950>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	080089e7 	.word	0x080089e7
 8008960:	080089ef 	.word	0x080089ef
 8008964:	08008a4b 	.word	0x08008a4b
 8008968:	08008a4b 	.word	0x08008a4b
 800896c:	080089f7 	.word	0x080089f7
 8008970:	08008a4b 	.word	0x08008a4b
 8008974:	08008a4b 	.word	0x08008a4b
 8008978:	08008a4b 	.word	0x08008a4b
 800897c:	08008a07 	.word	0x08008a07
 8008980:	08008a4b 	.word	0x08008a4b
 8008984:	08008a4b 	.word	0x08008a4b
 8008988:	08008a4b 	.word	0x08008a4b
 800898c:	08008a4b 	.word	0x08008a4b
 8008990:	08008a4b 	.word	0x08008a4b
 8008994:	08008a4b 	.word	0x08008a4b
 8008998:	08008a4b 	.word	0x08008a4b
 800899c:	08008a17 	.word	0x08008a17
 80089a0:	08008a4b 	.word	0x08008a4b
 80089a4:	08008a4b 	.word	0x08008a4b
 80089a8:	08008a4b 	.word	0x08008a4b
 80089ac:	08008a4b 	.word	0x08008a4b
 80089b0:	08008a4b 	.word	0x08008a4b
 80089b4:	08008a4b 	.word	0x08008a4b
 80089b8:	08008a4b 	.word	0x08008a4b
 80089bc:	08008a4b 	.word	0x08008a4b
 80089c0:	08008a4b 	.word	0x08008a4b
 80089c4:	08008a4b 	.word	0x08008a4b
 80089c8:	08008a4b 	.word	0x08008a4b
 80089cc:	08008a4b 	.word	0x08008a4b
 80089d0:	08008a4b 	.word	0x08008a4b
 80089d4:	08008a4b 	.word	0x08008a4b
 80089d8:	08008a4b 	.word	0x08008a4b
 80089dc:	08008a3d 	.word	0x08008a3d
 80089e0:	2b40      	cmp	r3, #64	@ 0x40
 80089e2:	d02e      	beq.n	8008a42 <UART_SetConfig+0xa36>
 80089e4:	e031      	b.n	8008a4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e6:	f7fc fbb3 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 80089ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089ec:	e033      	b.n	8008a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ee:	f7fc fbc5 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 80089f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089f4:	e02f      	b.n	8008a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fd fdf4 	bl	80065e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a04:	e027      	b.n	8008a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a06:	f107 0318 	add.w	r3, r7, #24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd ff40 	bl	8006890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a14:	e01f      	b.n	8008a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a16:	4b2d      	ldr	r3, [pc, #180]	@ (8008acc <UART_SetConfig+0xac0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0320 	and.w	r3, r3, #32
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a22:	4b2a      	ldr	r3, [pc, #168]	@ (8008acc <UART_SetConfig+0xac0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	08db      	lsrs	r3, r3, #3
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	4a28      	ldr	r2, [pc, #160]	@ (8008ad0 <UART_SetConfig+0xac4>)
 8008a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a34:	e00f      	b.n	8008a56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a36:	4b26      	ldr	r3, [pc, #152]	@ (8008ad0 <UART_SetConfig+0xac4>)
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a3a:	e00c      	b.n	8008a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a3c:	4b25      	ldr	r3, [pc, #148]	@ (8008ad4 <UART_SetConfig+0xac8>)
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a40:	e009      	b.n	8008a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a48:	e005      	b.n	8008a56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a54:	bf00      	nop
    }

    if (pclk != 0U)
 8008a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d021      	beq.n	8008aa0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad8 <UART_SetConfig+0xacc>)
 8008a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a66:	461a      	mov	r2, r3
 8008a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	441a      	add	r2, r3
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a82:	2b0f      	cmp	r3, #15
 8008a84:	d909      	bls.n	8008a9a <UART_SetConfig+0xa8e>
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8c:	d205      	bcs.n	8008a9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60da      	str	r2, [r3, #12]
 8008a98:	e002      	b.n	8008aa0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008abc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3748      	adds	r7, #72	@ 0x48
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aca:	bf00      	nop
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	03d09000 	.word	0x03d09000
 8008ad4:	003d0900 	.word	0x003d0900
 8008ad8:	0800b37c 	.word	0x0800b37c

08008adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01a      	beq.n	8008bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bda:	d10a      	bne.n	8008bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b098      	sub	sp, #96	@ 0x60
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c30:	f7f8 fe96 	bl	8001960 <HAL_GetTick>
 8008c34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0308 	and.w	r3, r3, #8
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d12f      	bne.n	8008ca4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f88e 	bl	8008d74 <UART_WaitOnFlagUntilTimeout>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d022      	beq.n	8008ca4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e6      	bne.n	8008c5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e063      	b.n	8008d6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d149      	bne.n	8008d46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f857 	bl	8008d74 <UART_WaitOnFlagUntilTimeout>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d03c      	beq.n	8008d46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e6      	bne.n	8008ccc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d1e:	61fa      	str	r2, [r7, #28]
 8008d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	69b9      	ldr	r1, [r7, #24]
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e5      	bne.n	8008cfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e012      	b.n	8008d6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3758      	adds	r7, #88	@ 0x58
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	4613      	mov	r3, r2
 8008d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d84:	e04f      	b.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8c:	d04b      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d8e:	f7f8 fde7 	bl	8001960 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d302      	bcc.n	8008da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e04e      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d037      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b80      	cmp	r3, #128	@ 0x80
 8008dba:	d034      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b40      	cmp	r3, #64	@ 0x40
 8008dc0:	d031      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d110      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f95b 	bl	8009094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2208      	movs	r2, #8
 8008de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e029      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e00:	d111      	bne.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f941 	bl	8009094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e00f      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d0a0      	beq.n	8008d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b0a3      	sub	sp, #140	@ 0x8c
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e82:	d10e      	bne.n	8008ea2 <UART_Start_Receive_IT+0x52>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d105      	bne.n	8008e98 <UART_Start_Receive_IT+0x48>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e96:	e02d      	b.n	8008ef4 <UART_Start_Receive_IT+0xa4>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	22ff      	movs	r2, #255	@ 0xff
 8008e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ea0:	e028      	b.n	8008ef4 <UART_Start_Receive_IT+0xa4>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10d      	bne.n	8008ec6 <UART_Start_Receive_IT+0x76>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <UART_Start_Receive_IT+0x6c>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	22ff      	movs	r2, #255	@ 0xff
 8008eb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eba:	e01b      	b.n	8008ef4 <UART_Start_Receive_IT+0xa4>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	227f      	movs	r2, #127	@ 0x7f
 8008ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ec4:	e016      	b.n	8008ef4 <UART_Start_Receive_IT+0xa4>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ece:	d10d      	bne.n	8008eec <UART_Start_Receive_IT+0x9c>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <UART_Start_Receive_IT+0x92>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	227f      	movs	r2, #127	@ 0x7f
 8008edc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ee0:	e008      	b.n	8008ef4 <UART_Start_Receive_IT+0xa4>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	223f      	movs	r2, #63	@ 0x3f
 8008ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eea:	e003      	b.n	8008ef4 <UART_Start_Receive_IT+0xa4>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2222      	movs	r2, #34	@ 0x22
 8008f00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008f28:	673a      	str	r2, [r7, #112]	@ 0x70
 8008f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008f2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e3      	bne.n	8008f04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f44:	d14f      	bne.n	8008fe6 <UART_Start_Receive_IT+0x196>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f4c:	88fa      	ldrh	r2, [r7, #6]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d349      	bcc.n	8008fe6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f5a:	d107      	bne.n	8008f6c <UART_Start_Receive_IT+0x11c>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d103      	bne.n	8008f6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4a47      	ldr	r2, [pc, #284]	@ (8009084 <UART_Start_Receive_IT+0x234>)
 8008f68:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f6a:	e002      	b.n	8008f72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4a46      	ldr	r2, [pc, #280]	@ (8009088 <UART_Start_Receive_IT+0x238>)
 8008f70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01a      	beq.n	8008fb0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f9e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008fa2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fa4:	e841 2300 	strex	r3, r2, [r1]
 8008fa8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e4      	bne.n	8008f7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008fd2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e5      	bne.n	8008fb0 <UART_Start_Receive_IT+0x160>
 8008fe4:	e046      	b.n	8009074 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	d107      	bne.n	8009000 <UART_Start_Receive_IT+0x1b0>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d103      	bne.n	8009000 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a24      	ldr	r2, [pc, #144]	@ (800908c <UART_Start_Receive_IT+0x23c>)
 8008ffc:	675a      	str	r2, [r3, #116]	@ 0x74
 8008ffe:	e002      	b.n	8009006 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a23      	ldr	r2, [pc, #140]	@ (8009090 <UART_Start_Receive_IT+0x240>)
 8009004:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d019      	beq.n	8009042 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009022:	677b      	str	r3, [r7, #116]	@ 0x74
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
 800902e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e6      	bne.n	800900e <UART_Start_Receive_IT+0x1be>
 8009040:	e018      	b.n	8009074 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	613b      	str	r3, [r7, #16]
   return(result);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f043 0320 	orr.w	r3, r3, #32
 8009056:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009060:	623b      	str	r3, [r7, #32]
 8009062:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	69f9      	ldr	r1, [r7, #28]
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	61bb      	str	r3, [r7, #24]
   return(result);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e6      	bne.n	8009042 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	378c      	adds	r7, #140	@ 0x8c
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	08009bf9 	.word	0x08009bf9
 8009088:	08009899 	.word	0x08009899
 800908c:	080096e1 	.word	0x080096e1
 8009090:	08009529 	.word	0x08009529

08009094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b095      	sub	sp, #84	@ 0x54
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80090bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e6      	bne.n	800909c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80090de:	69fa      	ldr	r2, [r7, #28]
 80090e0:	4b1e      	ldr	r3, [pc, #120]	@ (800915c <UART_EndRxTransfer+0xc8>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3308      	adds	r3, #8
 80090ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e5      	bne.n	80090ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009106:	2b01      	cmp	r3, #1
 8009108:	d118      	bne.n	800913c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	60bb      	str	r3, [r7, #8]
   return(result);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f023 0310 	bic.w	r3, r3, #16
 800911e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6979      	ldr	r1, [r7, #20]
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	613b      	str	r3, [r7, #16]
   return(result);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e6      	bne.n	800910a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009150:	bf00      	nop
 8009152:	3754      	adds	r7, #84	@ 0x54
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	effffffe 	.word	0xeffffffe

08009160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7fe ff2e 	bl	8007fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b08f      	sub	sp, #60	@ 0x3c
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800919a:	2b21      	cmp	r3, #33	@ 0x21
 800919c:	d14c      	bne.n	8009238 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d132      	bne.n	8009210 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091be:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	e841 2300 	strex	r3, r2, [r1]
 8009206:	613b      	str	r3, [r7, #16]
   return(result);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1e6      	bne.n	80091dc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800920e:	e013      	b.n	8009238 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009238:	bf00      	nop
 800923a:	373c      	adds	r7, #60	@ 0x3c
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b091      	sub	sp, #68	@ 0x44
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009252:	2b21      	cmp	r3, #33	@ 0x21
 8009254:	d151      	bne.n	80092fa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d132      	bne.n	80092c8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	623b      	str	r3, [r7, #32]
   return(result);
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	633b      	str	r3, [r7, #48]	@ 0x30
 8009282:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b2:	61fb      	str	r3, [r7, #28]
 80092b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	69b9      	ldr	r1, [r7, #24]
 80092b8:	69fa      	ldr	r2, [r7, #28]
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	617b      	str	r3, [r7, #20]
   return(result);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80092c6:	e018      	b.n	80092fa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80092ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092dc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e2:	1c9a      	adds	r2, r3, #2
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80092fa:	bf00      	nop
 80092fc:	3744      	adds	r7, #68	@ 0x44
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009306:	b480      	push	{r7}
 8009308:	b091      	sub	sp, #68	@ 0x44
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009314:	2b21      	cmp	r3, #33	@ 0x21
 8009316:	d160      	bne.n	80093da <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800931e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009320:	e057      	b.n	80093d2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009328:	b29b      	uxth	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d133      	bne.n	8009396 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	623b      	str	r3, [r7, #32]
   return(result);
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009344:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3308      	adds	r3, #8
 800934c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800934e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e5      	bne.n	800932e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009376:	637b      	str	r3, [r7, #52]	@ 0x34
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	617b      	str	r3, [r7, #20]
   return(result);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009394:	e021      	b.n	80093da <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d013      	beq.n	80093cc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a8:	781a      	ldrb	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093ce:	3b01      	subs	r3, #1
 80093d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80093d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1a4      	bne.n	8009322 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80093d8:	e7ff      	b.n	80093da <UART_TxISR_8BIT_FIFOEN+0xd4>
 80093da:	bf00      	nop
 80093dc:	3744      	adds	r7, #68	@ 0x44
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b091      	sub	sp, #68	@ 0x44
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f4:	2b21      	cmp	r3, #33	@ 0x21
 80093f6:	d165      	bne.n	80094c4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009400:	e05c      	b.n	80094bc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009408:	b29b      	uxth	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d133      	bne.n	8009476 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	61fb      	str	r3, [r7, #28]
   return(result);
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009424:	637b      	str	r3, [r7, #52]	@ 0x34
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800942e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e5      	bne.n	800940e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6979      	ldr	r1, [r7, #20]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	613b      	str	r3, [r7, #16]
   return(result);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e6      	bne.n	8009442 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009474:	e026      	b.n	80094c4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009480:	2b00      	cmp	r3, #0
 8009482:	d018      	beq.n	80094b6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009488:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800948a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009498:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800949e:	1c9a      	adds	r2, r3, #2
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80094b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80094b8:	3b01      	subs	r3, #1
 80094ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80094bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d19f      	bne.n	8009402 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80094c2:	e7ff      	b.n	80094c4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80094c4:	bf00      	nop
 80094c6:	3744      	adds	r7, #68	@ 0x44
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	613b      	str	r3, [r7, #16]
   return(result);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe fd57 	bl	8007fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951e:	bf00      	nop
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b09c      	sub	sp, #112	@ 0x70
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009536:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009540:	2b22      	cmp	r3, #34	@ 0x22
 8009542:	f040 80be 	bne.w	80096c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009550:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009554:	b2d9      	uxtb	r1, r3
 8009556:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800955a:	b2da      	uxtb	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009560:	400a      	ands	r2, r1
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009576:	b29b      	uxth	r3, r3
 8009578:	3b01      	subs	r3, #1
 800957a:	b29a      	uxth	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	f040 80a1 	bne.w	80096d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800959e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e6      	bne.n	8009590 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3308      	adds	r3, #8
 80095c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80095e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e5      	bne.n	80095c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a33      	ldr	r2, [pc, #204]	@ (80096dc <UART_RxISR_8BIT+0x1b4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d01f      	beq.n	8009654 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d018      	beq.n	8009654 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	623b      	str	r3, [r7, #32]
   return(result);
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009636:	663b      	str	r3, [r7, #96]	@ 0x60
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009640:	633b      	str	r3, [r7, #48]	@ 0x30
 8009642:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800964e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d12e      	bne.n	80096ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 0310 	bic.w	r3, r3, #16
 8009676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	69b9      	ldr	r1, [r7, #24]
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	e841 2300 	strex	r3, r2, [r1]
 800968c:	617b      	str	r3, [r7, #20]
   return(result);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e6      	bne.n	8009662 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f003 0310 	and.w	r3, r3, #16
 800969e:	2b10      	cmp	r3, #16
 80096a0:	d103      	bne.n	80096aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2210      	movs	r2, #16
 80096a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7fe fc9e 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096b8:	e00b      	b.n	80096d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7f7 fb30 	bl	8000d20 <HAL_UART_RxCpltCallback>
}
 80096c0:	e007      	b.n	80096d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0208 	orr.w	r2, r2, #8
 80096d0:	619a      	str	r2, [r3, #24]
}
 80096d2:	bf00      	nop
 80096d4:	3770      	adds	r7, #112	@ 0x70
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	58000c00 	.word	0x58000c00

080096e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b09c      	sub	sp, #112	@ 0x70
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096f8:	2b22      	cmp	r3, #34	@ 0x22
 80096fa:	f040 80be 	bne.w	800987a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009704:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800970e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009712:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009716:	4013      	ands	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800971c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009722:	1c9a      	adds	r2, r3, #2
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800972e:	b29b      	uxth	r3, r3
 8009730:	3b01      	subs	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	f040 80a1 	bne.w	800988a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800975c:	667b      	str	r3, [r7, #100]	@ 0x64
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009766:	657b      	str	r3, [r7, #84]	@ 0x54
 8009768:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800976c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e6      	bne.n	8009748 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	663b      	str	r3, [r7, #96]	@ 0x60
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800979a:	643a      	str	r2, [r7, #64]	@ 0x40
 800979c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e5      	bne.n	800977a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a33      	ldr	r2, [pc, #204]	@ (8009894 <UART_RxISR_16BIT+0x1b4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d01f      	beq.n	800980c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d018      	beq.n	800980c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e6      	bne.n	80097da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d12e      	bne.n	8009872 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	60bb      	str	r3, [r7, #8]
   return(result);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f023 0310 	bic.w	r3, r3, #16
 800982e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	6979      	ldr	r1, [r7, #20]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	613b      	str	r3, [r7, #16]
   return(result);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e6      	bne.n	800981a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	2b10      	cmp	r3, #16
 8009858:	d103      	bne.n	8009862 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2210      	movs	r2, #16
 8009860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7fe fbc2 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009870:	e00b      	b.n	800988a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7f7 fa54 	bl	8000d20 <HAL_UART_RxCpltCallback>
}
 8009878:	e007      	b.n	800988a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0208 	orr.w	r2, r2, #8
 8009888:	619a      	str	r2, [r3, #24]
}
 800988a:	bf00      	nop
 800988c:	3770      	adds	r7, #112	@ 0x70
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	58000c00 	.word	0x58000c00

08009898 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b0ac      	sub	sp, #176	@ 0xb0
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ce:	2b22      	cmp	r3, #34	@ 0x22
 80098d0:	f040 8180 	bne.w	8009bd4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098de:	e123      	b.n	8009b28 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80098ee:	b2d9      	uxtb	r1, r3
 80098f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098fa:	400a      	ands	r2, r1
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009910:	b29b      	uxth	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	2b00      	cmp	r3, #0
 8009930:	d053      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d011      	beq.n	8009962 <UART_RxISR_8BIT_FIFOEN+0xca>
 800993e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00b      	beq.n	8009962 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2201      	movs	r2, #1
 8009950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009958:	f043 0201 	orr.w	r2, r3, #1
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d011      	beq.n	8009992 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800996e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00b      	beq.n	8009992 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2202      	movs	r2, #2
 8009980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009988:	f043 0204 	orr.w	r2, r3, #4
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b00      	cmp	r3, #0
 800999c:	d011      	beq.n	80099c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800999e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00b      	beq.n	80099c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2204      	movs	r2, #4
 80099b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b8:	f043 0202 	orr.w	r2, r3, #2
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7fe fb07 	bl	8007fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f040 80a0 	bne.w	8009b28 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80099f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009a10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e4      	bne.n	80099e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3308      	adds	r3, #8
 8009a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a30:	4b6e      	ldr	r3, [pc, #440]	@ (8009bec <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009a32:	4013      	ands	r3, r2
 8009a34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a42:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009a44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009a48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009a50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e3      	bne.n	8009a1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a60      	ldr	r2, [pc, #384]	@ (8009bf0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d021      	beq.n	8009ab8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d01a      	beq.n	8009ab8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009aa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009aa6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009aaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e4      	bne.n	8009a82 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d130      	bne.n	8009b22 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad6:	f023 0310 	bic.w	r3, r3, #16
 8009ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e4      	bne.n	8009ac6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f003 0310 	and.w	r3, r3, #16
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	d103      	bne.n	8009b12 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2210      	movs	r2, #16
 8009b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7fe fa6a 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
 8009b20:	e002      	b.n	8009b28 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7f7 f8fc 	bl	8000d20 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d006      	beq.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b34:	f003 0320 	and.w	r3, r3, #32
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f47f aed1 	bne.w	80098e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d049      	beq.n	8009be4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d242      	bcs.n	8009be4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3308      	adds	r3, #8
 8009b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	e853 3f00 	ldrex	r3, [r3]
 8009b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e3      	bne.n	8009b5e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a16      	ldr	r2, [pc, #88]	@ (8009bf4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009b9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f043 0320 	orr.w	r3, r3, #32
 8009bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bbe:	61bb      	str	r3, [r7, #24]
 8009bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6979      	ldr	r1, [r7, #20]
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	613b      	str	r3, [r7, #16]
   return(result);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e4      	bne.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bd2:	e007      	b.n	8009be4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0208 	orr.w	r2, r2, #8
 8009be2:	619a      	str	r2, [r3, #24]
}
 8009be4:	bf00      	nop
 8009be6:	37b0      	adds	r7, #176	@ 0xb0
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	effffffe 	.word	0xeffffffe
 8009bf0:	58000c00 	.word	0x58000c00
 8009bf4:	08009529 	.word	0x08009529

08009bf8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b0ae      	sub	sp, #184	@ 0xb8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c06:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c2e:	2b22      	cmp	r3, #34	@ 0x22
 8009c30:	f040 8184 	bne.w	8009f3c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c3e:	e127      	b.n	8009e90 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c46:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c52:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009c56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c68:	1c9a      	adds	r2, r3, #2
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c8e:	f003 0307 	and.w	r3, r3, #7
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d053      	beq.n	8009d3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d011      	beq.n	8009cc6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00b      	beq.n	8009cc6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cbc:	f043 0201 	orr.w	r2, r3, #1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d011      	beq.n	8009cf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cec:	f043 0204 	orr.w	r2, r3, #4
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cfa:	f003 0304 	and.w	r3, r3, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d011      	beq.n	8009d26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2204      	movs	r2, #4
 8009d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d1c:	f043 0202 	orr.w	r2, r3, #2
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d006      	beq.n	8009d3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7fe f955 	bl	8007fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f040 80a2 	bne.w	8009e90 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e2      	bne.n	8009d4c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009d98:	4b6e      	ldr	r3, [pc, #440]	@ (8009f54 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3308      	adds	r3, #8
 8009da6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009dac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e3      	bne.n	8009d86 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a60      	ldr	r2, [pc, #384]	@ (8009f58 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d021      	beq.n	8009e20 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d01a      	beq.n	8009e20 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e0e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e4      	bne.n	8009dea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d130      	bne.n	8009e8a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3e:	f023 0310 	bic.w	r3, r3, #16
 8009e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e4      	bne.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	f003 0310 	and.w	r3, r3, #16
 8009e6e:	2b10      	cmp	r3, #16
 8009e70:	d103      	bne.n	8009e7a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2210      	movs	r2, #16
 8009e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fe f8b6 	bl	8007ff4 <HAL_UARTEx_RxEventCallback>
 8009e88:	e002      	b.n	8009e90 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7f6 ff48 	bl	8000d20 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e90:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d006      	beq.n	8009ea6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f47f aecd 	bne.w	8009c40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eac:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009eb0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d049      	beq.n	8009f4c <UART_RxISR_16BIT_FIFOEN+0x354>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ebe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d242      	bcs.n	8009f4c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8009eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e3      	bne.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a16      	ldr	r2, [pc, #88]	@ (8009f5c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f02:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f043 0320 	orr.w	r3, r3, #32
 8009f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	461a      	mov	r2, r3
 8009f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	69b9      	ldr	r1, [r7, #24]
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	617b      	str	r3, [r7, #20]
   return(result);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e4      	bne.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f3a:	e007      	b.n	8009f4c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	699a      	ldr	r2, [r3, #24]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0208 	orr.w	r2, r2, #8
 8009f4a:	619a      	str	r2, [r3, #24]
}
 8009f4c:	bf00      	nop
 8009f4e:	37b8      	adds	r7, #184	@ 0xb8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	effffffe 	.word	0xeffffffe
 8009f58:	58000c00 	.word	0x58000c00
 8009f5c:	080096e1 	.word	0x080096e1

08009f60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e027      	b.n	800a002 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2224      	movs	r2, #36	@ 0x24
 8009fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0201 	bic.w	r2, r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fe0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a022:	2302      	movs	r3, #2
 800a024:	e02d      	b.n	800a082 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2224      	movs	r2, #36	@ 0x24
 800a032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0201 	bic.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f850 	bl	800a108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e02d      	b.n	800a0fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2224      	movs	r2, #36	@ 0x24
 800a0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0201 	bic.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f812 	bl	800a108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a114:	2b00      	cmp	r3, #0
 800a116:	d108      	bne.n	800a12a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a128:	e031      	b.n	800a18e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a12a:	2310      	movs	r3, #16
 800a12c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a12e:	2310      	movs	r3, #16
 800a130:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	0e5b      	lsrs	r3, r3, #25
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 0307 	and.w	r3, r3, #7
 800a140:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	0f5b      	lsrs	r3, r3, #29
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	7b3a      	ldrb	r2, [r7, #12]
 800a156:	4911      	ldr	r1, [pc, #68]	@ (800a19c <UARTEx_SetNbDataToProcess+0x94>)
 800a158:	5c8a      	ldrb	r2, [r1, r2]
 800a15a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a15e:	7b3a      	ldrb	r2, [r7, #12]
 800a160:	490f      	ldr	r1, [pc, #60]	@ (800a1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a162:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a164:	fb93 f3f2 	sdiv	r3, r3, r2
 800a168:	b29a      	uxth	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	7b7a      	ldrb	r2, [r7, #13]
 800a174:	4909      	ldr	r1, [pc, #36]	@ (800a19c <UARTEx_SetNbDataToProcess+0x94>)
 800a176:	5c8a      	ldrb	r2, [r1, r2]
 800a178:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a17c:	7b7a      	ldrb	r2, [r7, #13]
 800a17e:	4908      	ldr	r1, [pc, #32]	@ (800a1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a180:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a182:	fb93 f3f2 	sdiv	r3, r3, r2
 800a186:	b29a      	uxth	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	0800b394 	.word	0x0800b394
 800a1a0:	0800b39c 	.word	0x0800b39c

0800a1a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	f107 001c 	add.w	r0, r7, #28
 800a1b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a1b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d121      	bne.n	800a202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	4b2c      	ldr	r3, [pc, #176]	@ (800a280 <USB_CoreInit+0xdc>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a1e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d105      	bne.n	800a1f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 faaa 	bl	800a750 <USB_CoreReset>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]
 800a200:	e01b      	b.n	800a23a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa9e 	bl	800a750 <USB_CoreReset>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a218:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a224:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a22c:	e005      	b.n	800a23a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a232:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a23a:	7fbb      	ldrb	r3, [r7, #30]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d116      	bne.n	800a26e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a244:	b29a      	uxth	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a24e:	4b0d      	ldr	r3, [pc, #52]	@ (800a284 <USB_CoreInit+0xe0>)
 800a250:	4313      	orrs	r3, r2
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f043 0206 	orr.w	r2, r3, #6
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f043 0220 	orr.w	r2, r3, #32
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a27a:	b004      	add	sp, #16
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	ffbdffbf 	.word	0xffbdffbf
 800a284:	03ee0000 	.word	0x03ee0000

0800a288 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f023 0201 	bic.w	r2, r3, #1
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d115      	bne.n	800a2f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2d8:	200a      	movs	r0, #10
 800a2da:	f7f7 fb4d 	bl	8001978 <HAL_Delay>
      ms += 10U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	330a      	adds	r3, #10
 800a2e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fa25 	bl	800a734 <USB_GetMode>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d01e      	beq.n	800a32e <USB_SetCurrentMode+0x84>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2f4:	d9f0      	bls.n	800a2d8 <USB_SetCurrentMode+0x2e>
 800a2f6:	e01a      	b.n	800a32e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d115      	bne.n	800a32a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a30a:	200a      	movs	r0, #10
 800a30c:	f7f7 fb34 	bl	8001978 <HAL_Delay>
      ms += 10U;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	330a      	adds	r3, #10
 800a314:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fa0c 	bl	800a734 <USB_GetMode>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <USB_SetCurrentMode+0x84>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2bc7      	cmp	r3, #199	@ 0xc7
 800a326:	d9f0      	bls.n	800a30a <USB_SetCurrentMode+0x60>
 800a328:	e001      	b.n	800a32e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e005      	b.n	800a33a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2bc8      	cmp	r3, #200	@ 0xc8
 800a332:	d101      	bne.n	800a338 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a344:	b084      	sub	sp, #16
 800a346:	b580      	push	{r7, lr}
 800a348:	b086      	sub	sp, #24
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a35e:	2300      	movs	r3, #0
 800a360:	613b      	str	r3, [r7, #16]
 800a362:	e009      	b.n	800a378 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3340      	adds	r3, #64	@ 0x40
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	3301      	adds	r3, #1
 800a376:	613b      	str	r3, [r7, #16]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2b0e      	cmp	r3, #14
 800a37c:	d9f2      	bls.n	800a364 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a37e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a382:	2b00      	cmp	r3, #0
 800a384:	d11c      	bne.n	800a3c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a394:	f043 0302 	orr.w	r3, r3, #2
 800a398:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e005      	b.n	800a3cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d10d      	bne.n	800a3fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d104      	bne.n	800a3f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f968 	bl	800a6c0 <USB_SetDevSpeed>
 800a3f0:	e008      	b.n	800a404 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f963 	bl	800a6c0 <USB_SetDevSpeed>
 800a3fa:	e003      	b.n	800a404 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3fc:	2103      	movs	r1, #3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f95e 	bl	800a6c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a404:	2110      	movs	r1, #16
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f8fa 	bl	800a600 <USB_FlushTxFifo>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f924 	bl	800a664 <USB_FlushRxFifo>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a42c:	461a      	mov	r2, r3
 800a42e:	2300      	movs	r3, #0
 800a430:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a438:	461a      	mov	r2, r3
 800a43a:	2300      	movs	r3, #0
 800a43c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a444:	461a      	mov	r2, r3
 800a446:	2300      	movs	r3, #0
 800a448:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	613b      	str	r3, [r7, #16]
 800a44e:	e043      	b.n	800a4d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a466:	d118      	bne.n	800a49a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47a:	461a      	mov	r2, r3
 800a47c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	e013      	b.n	800a4ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a490:	461a      	mov	r2, r3
 800a492:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	e008      	b.n	800a4ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	613b      	str	r3, [r7, #16]
 800a4d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4dc:	461a      	mov	r2, r3
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d3b5      	bcc.n	800a450 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
 800a4e8:	e043      	b.n	800a572 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a500:	d118      	bne.n	800a534 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a514:	461a      	mov	r2, r3
 800a516:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	e013      	b.n	800a546 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52a:	461a      	mov	r2, r3
 800a52c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	e008      	b.n	800a546 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a540:	461a      	mov	r2, r3
 800a542:	2300      	movs	r3, #0
 800a544:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a552:	461a      	mov	r2, r3
 800a554:	2300      	movs	r3, #0
 800a556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a564:	461a      	mov	r2, r3
 800a566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a56a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	3301      	adds	r3, #1
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a576:	461a      	mov	r2, r3
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d3b5      	bcc.n	800a4ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a58c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a590:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a59e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d105      	bne.n	800a5b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	f043 0210 	orr.w	r2, r3, #16
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699a      	ldr	r2, [r3, #24]
 800a5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f8 <USB_DevInit+0x2b4>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	f043 0208 	orr.w	r2, r3, #8
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d105      	bne.n	800a5e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	699a      	ldr	r2, [r3, #24]
 800a5e0:	4b06      	ldr	r3, [pc, #24]	@ (800a5fc <USB_DevInit+0x2b8>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5f4:	b004      	add	sp, #16
 800a5f6:	4770      	bx	lr
 800a5f8:	803c3800 	.word	0x803c3800
 800a5fc:	40000004 	.word	0x40000004

0800a600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3301      	adds	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a61a:	d901      	bls.n	800a620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e01b      	b.n	800a658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	daf2      	bge.n	800a60e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	019b      	lsls	r3, r3, #6
 800a630:	f043 0220 	orr.w	r2, r3, #32
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a644:	d901      	bls.n	800a64a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e006      	b.n	800a658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b20      	cmp	r3, #32
 800a654:	d0f0      	beq.n	800a638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a67c:	d901      	bls.n	800a682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e018      	b.n	800a6b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	daf2      	bge.n	800a670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2210      	movs	r2, #16
 800a692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
 800a698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6a0:	d901      	bls.n	800a6a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e006      	b.n	800a6b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	f003 0310 	and.w	r3, r3, #16
 800a6ae:	2b10      	cmp	r3, #16
 800a6b0:	d0f0      	beq.n	800a694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	68f9      	ldr	r1, [r7, #12]
 800a6dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b085      	sub	sp, #20
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a70c:	f023 0303 	bic.w	r3, r3, #3
 800a710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a720:	f043 0302 	orr.w	r3, r3, #2
 800a724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	f003 0301 	and.w	r3, r3, #1
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a768:	d901      	bls.n	800a76e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e01b      	b.n	800a7a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	daf2      	bge.n	800a75c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	f043 0201 	orr.w	r2, r3, #1
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3301      	adds	r3, #1
 800a78a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a792:	d901      	bls.n	800a798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e006      	b.n	800a7a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d0f0      	beq.n	800a786 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <siprintf>:
 800a7b4:	b40e      	push	{r1, r2, r3}
 800a7b6:	b500      	push	{lr}
 800a7b8:	b09c      	sub	sp, #112	@ 0x70
 800a7ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7bc:	9002      	str	r0, [sp, #8]
 800a7be:	9006      	str	r0, [sp, #24]
 800a7c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7c4:	4809      	ldr	r0, [pc, #36]	@ (800a7ec <siprintf+0x38>)
 800a7c6:	9107      	str	r1, [sp, #28]
 800a7c8:	9104      	str	r1, [sp, #16]
 800a7ca:	4909      	ldr	r1, [pc, #36]	@ (800a7f0 <siprintf+0x3c>)
 800a7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d0:	9105      	str	r1, [sp, #20]
 800a7d2:	6800      	ldr	r0, [r0, #0]
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	a902      	add	r1, sp, #8
 800a7d8:	f000 f9a6 	bl	800ab28 <_svfiprintf_r>
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	b01c      	add	sp, #112	@ 0x70
 800a7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e8:	b003      	add	sp, #12
 800a7ea:	4770      	bx	lr
 800a7ec:	24000014 	.word	0x24000014
 800a7f0:	ffff0208 	.word	0xffff0208

0800a7f4 <memset>:
 800a7f4:	4402      	add	r2, r0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d100      	bne.n	800a7fe <memset+0xa>
 800a7fc:	4770      	bx	lr
 800a7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a802:	e7f9      	b.n	800a7f8 <memset+0x4>

0800a804 <strncmp>:
 800a804:	b510      	push	{r4, lr}
 800a806:	b16a      	cbz	r2, 800a824 <strncmp+0x20>
 800a808:	3901      	subs	r1, #1
 800a80a:	1884      	adds	r4, r0, r2
 800a80c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a810:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a814:	429a      	cmp	r2, r3
 800a816:	d103      	bne.n	800a820 <strncmp+0x1c>
 800a818:	42a0      	cmp	r0, r4
 800a81a:	d001      	beq.n	800a820 <strncmp+0x1c>
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d1f5      	bne.n	800a80c <strncmp+0x8>
 800a820:	1ad0      	subs	r0, r2, r3
 800a822:	bd10      	pop	{r4, pc}
 800a824:	4610      	mov	r0, r2
 800a826:	e7fc      	b.n	800a822 <strncmp+0x1e>

0800a828 <__errno>:
 800a828:	4b01      	ldr	r3, [pc, #4]	@ (800a830 <__errno+0x8>)
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	24000014 	.word	0x24000014

0800a834 <__libc_init_array>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	4d0d      	ldr	r5, [pc, #52]	@ (800a86c <__libc_init_array+0x38>)
 800a838:	4c0d      	ldr	r4, [pc, #52]	@ (800a870 <__libc_init_array+0x3c>)
 800a83a:	1b64      	subs	r4, r4, r5
 800a83c:	10a4      	asrs	r4, r4, #2
 800a83e:	2600      	movs	r6, #0
 800a840:	42a6      	cmp	r6, r4
 800a842:	d109      	bne.n	800a858 <__libc_init_array+0x24>
 800a844:	4d0b      	ldr	r5, [pc, #44]	@ (800a874 <__libc_init_array+0x40>)
 800a846:	4c0c      	ldr	r4, [pc, #48]	@ (800a878 <__libc_init_array+0x44>)
 800a848:	f000 fc66 	bl	800b118 <_init>
 800a84c:	1b64      	subs	r4, r4, r5
 800a84e:	10a4      	asrs	r4, r4, #2
 800a850:	2600      	movs	r6, #0
 800a852:	42a6      	cmp	r6, r4
 800a854:	d105      	bne.n	800a862 <__libc_init_array+0x2e>
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	f855 3b04 	ldr.w	r3, [r5], #4
 800a85c:	4798      	blx	r3
 800a85e:	3601      	adds	r6, #1
 800a860:	e7ee      	b.n	800a840 <__libc_init_array+0xc>
 800a862:	f855 3b04 	ldr.w	r3, [r5], #4
 800a866:	4798      	blx	r3
 800a868:	3601      	adds	r6, #1
 800a86a:	e7f2      	b.n	800a852 <__libc_init_array+0x1e>
 800a86c:	0800b3e0 	.word	0x0800b3e0
 800a870:	0800b3e0 	.word	0x0800b3e0
 800a874:	0800b3e0 	.word	0x0800b3e0
 800a878:	0800b3e4 	.word	0x0800b3e4

0800a87c <__retarget_lock_acquire_recursive>:
 800a87c:	4770      	bx	lr

0800a87e <__retarget_lock_release_recursive>:
 800a87e:	4770      	bx	lr

0800a880 <_free_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4605      	mov	r5, r0
 800a884:	2900      	cmp	r1, #0
 800a886:	d041      	beq.n	800a90c <_free_r+0x8c>
 800a888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88c:	1f0c      	subs	r4, r1, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfb8      	it	lt
 800a892:	18e4      	addlt	r4, r4, r3
 800a894:	f000 f8e0 	bl	800aa58 <__malloc_lock>
 800a898:	4a1d      	ldr	r2, [pc, #116]	@ (800a910 <_free_r+0x90>)
 800a89a:	6813      	ldr	r3, [r2, #0]
 800a89c:	b933      	cbnz	r3, 800a8ac <_free_r+0x2c>
 800a89e:	6063      	str	r3, [r4, #4]
 800a8a0:	6014      	str	r4, [r2, #0]
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a8:	f000 b8dc 	b.w	800aa64 <__malloc_unlock>
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	d908      	bls.n	800a8c2 <_free_r+0x42>
 800a8b0:	6820      	ldr	r0, [r4, #0]
 800a8b2:	1821      	adds	r1, r4, r0
 800a8b4:	428b      	cmp	r3, r1
 800a8b6:	bf01      	itttt	eq
 800a8b8:	6819      	ldreq	r1, [r3, #0]
 800a8ba:	685b      	ldreq	r3, [r3, #4]
 800a8bc:	1809      	addeq	r1, r1, r0
 800a8be:	6021      	streq	r1, [r4, #0]
 800a8c0:	e7ed      	b.n	800a89e <_free_r+0x1e>
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	b10b      	cbz	r3, 800a8cc <_free_r+0x4c>
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d9fa      	bls.n	800a8c2 <_free_r+0x42>
 800a8cc:	6811      	ldr	r1, [r2, #0]
 800a8ce:	1850      	adds	r0, r2, r1
 800a8d0:	42a0      	cmp	r0, r4
 800a8d2:	d10b      	bne.n	800a8ec <_free_r+0x6c>
 800a8d4:	6820      	ldr	r0, [r4, #0]
 800a8d6:	4401      	add	r1, r0
 800a8d8:	1850      	adds	r0, r2, r1
 800a8da:	4283      	cmp	r3, r0
 800a8dc:	6011      	str	r1, [r2, #0]
 800a8de:	d1e0      	bne.n	800a8a2 <_free_r+0x22>
 800a8e0:	6818      	ldr	r0, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	6053      	str	r3, [r2, #4]
 800a8e6:	4408      	add	r0, r1
 800a8e8:	6010      	str	r0, [r2, #0]
 800a8ea:	e7da      	b.n	800a8a2 <_free_r+0x22>
 800a8ec:	d902      	bls.n	800a8f4 <_free_r+0x74>
 800a8ee:	230c      	movs	r3, #12
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	e7d6      	b.n	800a8a2 <_free_r+0x22>
 800a8f4:	6820      	ldr	r0, [r4, #0]
 800a8f6:	1821      	adds	r1, r4, r0
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	bf04      	itt	eq
 800a8fc:	6819      	ldreq	r1, [r3, #0]
 800a8fe:	685b      	ldreq	r3, [r3, #4]
 800a900:	6063      	str	r3, [r4, #4]
 800a902:	bf04      	itt	eq
 800a904:	1809      	addeq	r1, r1, r0
 800a906:	6021      	streq	r1, [r4, #0]
 800a908:	6054      	str	r4, [r2, #4]
 800a90a:	e7ca      	b.n	800a8a2 <_free_r+0x22>
 800a90c:	bd38      	pop	{r3, r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	240009dc 	.word	0x240009dc

0800a914 <sbrk_aligned>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	4e0f      	ldr	r6, [pc, #60]	@ (800a954 <sbrk_aligned+0x40>)
 800a918:	460c      	mov	r4, r1
 800a91a:	6831      	ldr	r1, [r6, #0]
 800a91c:	4605      	mov	r5, r0
 800a91e:	b911      	cbnz	r1, 800a926 <sbrk_aligned+0x12>
 800a920:	f000 fba6 	bl	800b070 <_sbrk_r>
 800a924:	6030      	str	r0, [r6, #0]
 800a926:	4621      	mov	r1, r4
 800a928:	4628      	mov	r0, r5
 800a92a:	f000 fba1 	bl	800b070 <_sbrk_r>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d103      	bne.n	800a93a <sbrk_aligned+0x26>
 800a932:	f04f 34ff 	mov.w	r4, #4294967295
 800a936:	4620      	mov	r0, r4
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	1cc4      	adds	r4, r0, #3
 800a93c:	f024 0403 	bic.w	r4, r4, #3
 800a940:	42a0      	cmp	r0, r4
 800a942:	d0f8      	beq.n	800a936 <sbrk_aligned+0x22>
 800a944:	1a21      	subs	r1, r4, r0
 800a946:	4628      	mov	r0, r5
 800a948:	f000 fb92 	bl	800b070 <_sbrk_r>
 800a94c:	3001      	adds	r0, #1
 800a94e:	d1f2      	bne.n	800a936 <sbrk_aligned+0x22>
 800a950:	e7ef      	b.n	800a932 <sbrk_aligned+0x1e>
 800a952:	bf00      	nop
 800a954:	240009d8 	.word	0x240009d8

0800a958 <_malloc_r>:
 800a958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a95c:	1ccd      	adds	r5, r1, #3
 800a95e:	f025 0503 	bic.w	r5, r5, #3
 800a962:	3508      	adds	r5, #8
 800a964:	2d0c      	cmp	r5, #12
 800a966:	bf38      	it	cc
 800a968:	250c      	movcc	r5, #12
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	4606      	mov	r6, r0
 800a96e:	db01      	blt.n	800a974 <_malloc_r+0x1c>
 800a970:	42a9      	cmp	r1, r5
 800a972:	d904      	bls.n	800a97e <_malloc_r+0x26>
 800a974:	230c      	movs	r3, #12
 800a976:	6033      	str	r3, [r6, #0]
 800a978:	2000      	movs	r0, #0
 800a97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa54 <_malloc_r+0xfc>
 800a982:	f000 f869 	bl	800aa58 <__malloc_lock>
 800a986:	f8d8 3000 	ldr.w	r3, [r8]
 800a98a:	461c      	mov	r4, r3
 800a98c:	bb44      	cbnz	r4, 800a9e0 <_malloc_r+0x88>
 800a98e:	4629      	mov	r1, r5
 800a990:	4630      	mov	r0, r6
 800a992:	f7ff ffbf 	bl	800a914 <sbrk_aligned>
 800a996:	1c43      	adds	r3, r0, #1
 800a998:	4604      	mov	r4, r0
 800a99a:	d158      	bne.n	800aa4e <_malloc_r+0xf6>
 800a99c:	f8d8 4000 	ldr.w	r4, [r8]
 800a9a0:	4627      	mov	r7, r4
 800a9a2:	2f00      	cmp	r7, #0
 800a9a4:	d143      	bne.n	800aa2e <_malloc_r+0xd6>
 800a9a6:	2c00      	cmp	r4, #0
 800a9a8:	d04b      	beq.n	800aa42 <_malloc_r+0xea>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	eb04 0903 	add.w	r9, r4, r3
 800a9b4:	f000 fb5c 	bl	800b070 <_sbrk_r>
 800a9b8:	4581      	cmp	r9, r0
 800a9ba:	d142      	bne.n	800aa42 <_malloc_r+0xea>
 800a9bc:	6821      	ldr	r1, [r4, #0]
 800a9be:	1a6d      	subs	r5, r5, r1
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffa6 	bl	800a914 <sbrk_aligned>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d03a      	beq.n	800aa42 <_malloc_r+0xea>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	442b      	add	r3, r5
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	bb62      	cbnz	r2, 800aa34 <_malloc_r+0xdc>
 800a9da:	f8c8 7000 	str.w	r7, [r8]
 800a9de:	e00f      	b.n	800aa00 <_malloc_r+0xa8>
 800a9e0:	6822      	ldr	r2, [r4, #0]
 800a9e2:	1b52      	subs	r2, r2, r5
 800a9e4:	d420      	bmi.n	800aa28 <_malloc_r+0xd0>
 800a9e6:	2a0b      	cmp	r2, #11
 800a9e8:	d917      	bls.n	800aa1a <_malloc_r+0xc2>
 800a9ea:	1961      	adds	r1, r4, r5
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	6025      	str	r5, [r4, #0]
 800a9f0:	bf18      	it	ne
 800a9f2:	6059      	strne	r1, [r3, #4]
 800a9f4:	6863      	ldr	r3, [r4, #4]
 800a9f6:	bf08      	it	eq
 800a9f8:	f8c8 1000 	streq.w	r1, [r8]
 800a9fc:	5162      	str	r2, [r4, r5]
 800a9fe:	604b      	str	r3, [r1, #4]
 800aa00:	4630      	mov	r0, r6
 800aa02:	f000 f82f 	bl	800aa64 <__malloc_unlock>
 800aa06:	f104 000b 	add.w	r0, r4, #11
 800aa0a:	1d23      	adds	r3, r4, #4
 800aa0c:	f020 0007 	bic.w	r0, r0, #7
 800aa10:	1ac2      	subs	r2, r0, r3
 800aa12:	bf1c      	itt	ne
 800aa14:	1a1b      	subne	r3, r3, r0
 800aa16:	50a3      	strne	r3, [r4, r2]
 800aa18:	e7af      	b.n	800a97a <_malloc_r+0x22>
 800aa1a:	6862      	ldr	r2, [r4, #4]
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	bf0c      	ite	eq
 800aa20:	f8c8 2000 	streq.w	r2, [r8]
 800aa24:	605a      	strne	r2, [r3, #4]
 800aa26:	e7eb      	b.n	800aa00 <_malloc_r+0xa8>
 800aa28:	4623      	mov	r3, r4
 800aa2a:	6864      	ldr	r4, [r4, #4]
 800aa2c:	e7ae      	b.n	800a98c <_malloc_r+0x34>
 800aa2e:	463c      	mov	r4, r7
 800aa30:	687f      	ldr	r7, [r7, #4]
 800aa32:	e7b6      	b.n	800a9a2 <_malloc_r+0x4a>
 800aa34:	461a      	mov	r2, r3
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	d1fb      	bne.n	800aa34 <_malloc_r+0xdc>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6053      	str	r3, [r2, #4]
 800aa40:	e7de      	b.n	800aa00 <_malloc_r+0xa8>
 800aa42:	230c      	movs	r3, #12
 800aa44:	6033      	str	r3, [r6, #0]
 800aa46:	4630      	mov	r0, r6
 800aa48:	f000 f80c 	bl	800aa64 <__malloc_unlock>
 800aa4c:	e794      	b.n	800a978 <_malloc_r+0x20>
 800aa4e:	6005      	str	r5, [r0, #0]
 800aa50:	e7d6      	b.n	800aa00 <_malloc_r+0xa8>
 800aa52:	bf00      	nop
 800aa54:	240009dc 	.word	0x240009dc

0800aa58 <__malloc_lock>:
 800aa58:	4801      	ldr	r0, [pc, #4]	@ (800aa60 <__malloc_lock+0x8>)
 800aa5a:	f7ff bf0f 	b.w	800a87c <__retarget_lock_acquire_recursive>
 800aa5e:	bf00      	nop
 800aa60:	240009d4 	.word	0x240009d4

0800aa64 <__malloc_unlock>:
 800aa64:	4801      	ldr	r0, [pc, #4]	@ (800aa6c <__malloc_unlock+0x8>)
 800aa66:	f7ff bf0a 	b.w	800a87e <__retarget_lock_release_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	240009d4 	.word	0x240009d4

0800aa70 <__ssputs_r>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	688e      	ldr	r6, [r1, #8]
 800aa76:	461f      	mov	r7, r3
 800aa78:	42be      	cmp	r6, r7
 800aa7a:	680b      	ldr	r3, [r1, #0]
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	4690      	mov	r8, r2
 800aa82:	d82d      	bhi.n	800aae0 <__ssputs_r+0x70>
 800aa84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa8c:	d026      	beq.n	800aadc <__ssputs_r+0x6c>
 800aa8e:	6965      	ldr	r5, [r4, #20]
 800aa90:	6909      	ldr	r1, [r1, #16]
 800aa92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa96:	eba3 0901 	sub.w	r9, r3, r1
 800aa9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa9e:	1c7b      	adds	r3, r7, #1
 800aaa0:	444b      	add	r3, r9
 800aaa2:	106d      	asrs	r5, r5, #1
 800aaa4:	429d      	cmp	r5, r3
 800aaa6:	bf38      	it	cc
 800aaa8:	461d      	movcc	r5, r3
 800aaaa:	0553      	lsls	r3, r2, #21
 800aaac:	d527      	bpl.n	800aafe <__ssputs_r+0x8e>
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7ff ff52 	bl	800a958 <_malloc_r>
 800aab4:	4606      	mov	r6, r0
 800aab6:	b360      	cbz	r0, 800ab12 <__ssputs_r+0xa2>
 800aab8:	6921      	ldr	r1, [r4, #16]
 800aaba:	464a      	mov	r2, r9
 800aabc:	f000 fae8 	bl	800b090 <memcpy>
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	6126      	str	r6, [r4, #16]
 800aace:	6165      	str	r5, [r4, #20]
 800aad0:	444e      	add	r6, r9
 800aad2:	eba5 0509 	sub.w	r5, r5, r9
 800aad6:	6026      	str	r6, [r4, #0]
 800aad8:	60a5      	str	r5, [r4, #8]
 800aada:	463e      	mov	r6, r7
 800aadc:	42be      	cmp	r6, r7
 800aade:	d900      	bls.n	800aae2 <__ssputs_r+0x72>
 800aae0:	463e      	mov	r6, r7
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	4632      	mov	r2, r6
 800aae6:	4641      	mov	r1, r8
 800aae8:	f000 faa8 	bl	800b03c <memmove>
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	1b9b      	subs	r3, r3, r6
 800aaf0:	60a3      	str	r3, [r4, #8]
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	4433      	add	r3, r6
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafe:	462a      	mov	r2, r5
 800ab00:	f000 fad4 	bl	800b0ac <_realloc_r>
 800ab04:	4606      	mov	r6, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d1e0      	bne.n	800aacc <__ssputs_r+0x5c>
 800ab0a:	6921      	ldr	r1, [r4, #16]
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	f7ff feb7 	bl	800a880 <_free_r>
 800ab12:	230c      	movs	r3, #12
 800ab14:	f8ca 3000 	str.w	r3, [sl]
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	e7e9      	b.n	800aafa <__ssputs_r+0x8a>
	...

0800ab28 <_svfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	4698      	mov	r8, r3
 800ab2e:	898b      	ldrh	r3, [r1, #12]
 800ab30:	061b      	lsls	r3, r3, #24
 800ab32:	b09d      	sub	sp, #116	@ 0x74
 800ab34:	4607      	mov	r7, r0
 800ab36:	460d      	mov	r5, r1
 800ab38:	4614      	mov	r4, r2
 800ab3a:	d510      	bpl.n	800ab5e <_svfiprintf_r+0x36>
 800ab3c:	690b      	ldr	r3, [r1, #16]
 800ab3e:	b973      	cbnz	r3, 800ab5e <_svfiprintf_r+0x36>
 800ab40:	2140      	movs	r1, #64	@ 0x40
 800ab42:	f7ff ff09 	bl	800a958 <_malloc_r>
 800ab46:	6028      	str	r0, [r5, #0]
 800ab48:	6128      	str	r0, [r5, #16]
 800ab4a:	b930      	cbnz	r0, 800ab5a <_svfiprintf_r+0x32>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	b01d      	add	sp, #116	@ 0x74
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	2340      	movs	r3, #64	@ 0x40
 800ab5c:	616b      	str	r3, [r5, #20]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab62:	2320      	movs	r3, #32
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab6c:	2330      	movs	r3, #48	@ 0x30
 800ab6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad0c <_svfiprintf_r+0x1e4>
 800ab72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab76:	f04f 0901 	mov.w	r9, #1
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab82:	b10a      	cbz	r2, 800ab88 <_svfiprintf_r+0x60>
 800ab84:	2a25      	cmp	r2, #37	@ 0x25
 800ab86:	d1f9      	bne.n	800ab7c <_svfiprintf_r+0x54>
 800ab88:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x7e>
 800ab8e:	465b      	mov	r3, fp
 800ab90:	4622      	mov	r2, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff ff6b 	bl	800aa70 <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80a7 	beq.w	800acee <_svfiprintf_r+0x1c6>
 800aba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aba2:	445a      	add	r2, fp
 800aba4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aba6:	f89a 3000 	ldrb.w	r3, [sl]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 809f 	beq.w	800acee <_svfiprintf_r+0x1c6>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295
 800abb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abba:	f10a 0a01 	add.w	sl, sl, #1
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	9307      	str	r3, [sp, #28]
 800abc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abc8:	4654      	mov	r4, sl
 800abca:	2205      	movs	r2, #5
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	484e      	ldr	r0, [pc, #312]	@ (800ad0c <_svfiprintf_r+0x1e4>)
 800abd2:	f7f5 fb8d 	bl	80002f0 <memchr>
 800abd6:	9a04      	ldr	r2, [sp, #16]
 800abd8:	b9d8      	cbnz	r0, 800ac12 <_svfiprintf_r+0xea>
 800abda:	06d0      	lsls	r0, r2, #27
 800abdc:	bf44      	itt	mi
 800abde:	2320      	movmi	r3, #32
 800abe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe4:	0711      	lsls	r1, r2, #28
 800abe6:	bf44      	itt	mi
 800abe8:	232b      	movmi	r3, #43	@ 0x2b
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abee:	f89a 3000 	ldrb.w	r3, [sl]
 800abf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800abf4:	d015      	beq.n	800ac22 <_svfiprintf_r+0xfa>
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	4654      	mov	r4, sl
 800abfa:	2000      	movs	r0, #0
 800abfc:	f04f 0c0a 	mov.w	ip, #10
 800ac00:	4621      	mov	r1, r4
 800ac02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac06:	3b30      	subs	r3, #48	@ 0x30
 800ac08:	2b09      	cmp	r3, #9
 800ac0a:	d94b      	bls.n	800aca4 <_svfiprintf_r+0x17c>
 800ac0c:	b1b0      	cbz	r0, 800ac3c <_svfiprintf_r+0x114>
 800ac0e:	9207      	str	r2, [sp, #28]
 800ac10:	e014      	b.n	800ac3c <_svfiprintf_r+0x114>
 800ac12:	eba0 0308 	sub.w	r3, r0, r8
 800ac16:	fa09 f303 	lsl.w	r3, r9, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	46a2      	mov	sl, r4
 800ac20:	e7d2      	b.n	800abc8 <_svfiprintf_r+0xa0>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	9103      	str	r1, [sp, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbb      	ittet	lt
 800ac2e:	425b      	neglt	r3, r3
 800ac30:	f042 0202 	orrlt.w	r2, r2, #2
 800ac34:	9307      	strge	r3, [sp, #28]
 800ac36:	9307      	strlt	r3, [sp, #28]
 800ac38:	bfb8      	it	lt
 800ac3a:	9204      	strlt	r2, [sp, #16]
 800ac3c:	7823      	ldrb	r3, [r4, #0]
 800ac3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac40:	d10a      	bne.n	800ac58 <_svfiprintf_r+0x130>
 800ac42:	7863      	ldrb	r3, [r4, #1]
 800ac44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac46:	d132      	bne.n	800acae <_svfiprintf_r+0x186>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	9203      	str	r2, [sp, #12]
 800ac50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac54:	3402      	adds	r4, #2
 800ac56:	9305      	str	r3, [sp, #20]
 800ac58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad1c <_svfiprintf_r+0x1f4>
 800ac5c:	7821      	ldrb	r1, [r4, #0]
 800ac5e:	2203      	movs	r2, #3
 800ac60:	4650      	mov	r0, sl
 800ac62:	f7f5 fb45 	bl	80002f0 <memchr>
 800ac66:	b138      	cbz	r0, 800ac78 <_svfiprintf_r+0x150>
 800ac68:	9b04      	ldr	r3, [sp, #16]
 800ac6a:	eba0 000a 	sub.w	r0, r0, sl
 800ac6e:	2240      	movs	r2, #64	@ 0x40
 800ac70:	4082      	lsls	r2, r0
 800ac72:	4313      	orrs	r3, r2
 800ac74:	3401      	adds	r4, #1
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7c:	4824      	ldr	r0, [pc, #144]	@ (800ad10 <_svfiprintf_r+0x1e8>)
 800ac7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac82:	2206      	movs	r2, #6
 800ac84:	f7f5 fb34 	bl	80002f0 <memchr>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d036      	beq.n	800acfa <_svfiprintf_r+0x1d2>
 800ac8c:	4b21      	ldr	r3, [pc, #132]	@ (800ad14 <_svfiprintf_r+0x1ec>)
 800ac8e:	bb1b      	cbnz	r3, 800acd8 <_svfiprintf_r+0x1b0>
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	3307      	adds	r3, #7
 800ac94:	f023 0307 	bic.w	r3, r3, #7
 800ac98:	3308      	adds	r3, #8
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9e:	4433      	add	r3, r6
 800aca0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca2:	e76a      	b.n	800ab7a <_svfiprintf_r+0x52>
 800aca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca8:	460c      	mov	r4, r1
 800acaa:	2001      	movs	r0, #1
 800acac:	e7a8      	b.n	800ac00 <_svfiprintf_r+0xd8>
 800acae:	2300      	movs	r3, #0
 800acb0:	3401      	adds	r4, #1
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	4619      	mov	r1, r3
 800acb6:	f04f 0c0a 	mov.w	ip, #10
 800acba:	4620      	mov	r0, r4
 800acbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc0:	3a30      	subs	r2, #48	@ 0x30
 800acc2:	2a09      	cmp	r2, #9
 800acc4:	d903      	bls.n	800acce <_svfiprintf_r+0x1a6>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0c6      	beq.n	800ac58 <_svfiprintf_r+0x130>
 800acca:	9105      	str	r1, [sp, #20]
 800accc:	e7c4      	b.n	800ac58 <_svfiprintf_r+0x130>
 800acce:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd2:	4604      	mov	r4, r0
 800acd4:	2301      	movs	r3, #1
 800acd6:	e7f0      	b.n	800acba <_svfiprintf_r+0x192>
 800acd8:	ab03      	add	r3, sp, #12
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	462a      	mov	r2, r5
 800acde:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <_svfiprintf_r+0x1f0>)
 800ace0:	a904      	add	r1, sp, #16
 800ace2:	4638      	mov	r0, r7
 800ace4:	f3af 8000 	nop.w
 800ace8:	1c42      	adds	r2, r0, #1
 800acea:	4606      	mov	r6, r0
 800acec:	d1d6      	bne.n	800ac9c <_svfiprintf_r+0x174>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	065b      	lsls	r3, r3, #25
 800acf2:	f53f af2d 	bmi.w	800ab50 <_svfiprintf_r+0x28>
 800acf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf8:	e72c      	b.n	800ab54 <_svfiprintf_r+0x2c>
 800acfa:	ab03      	add	r3, sp, #12
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	462a      	mov	r2, r5
 800ad00:	4b05      	ldr	r3, [pc, #20]	@ (800ad18 <_svfiprintf_r+0x1f0>)
 800ad02:	a904      	add	r1, sp, #16
 800ad04:	4638      	mov	r0, r7
 800ad06:	f000 f879 	bl	800adfc <_printf_i>
 800ad0a:	e7ed      	b.n	800ace8 <_svfiprintf_r+0x1c0>
 800ad0c:	0800b3a4 	.word	0x0800b3a4
 800ad10:	0800b3ae 	.word	0x0800b3ae
 800ad14:	00000000 	.word	0x00000000
 800ad18:	0800aa71 	.word	0x0800aa71
 800ad1c:	0800b3aa 	.word	0x0800b3aa

0800ad20 <_printf_common>:
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	4616      	mov	r6, r2
 800ad26:	4698      	mov	r8, r3
 800ad28:	688a      	ldr	r2, [r1, #8]
 800ad2a:	690b      	ldr	r3, [r1, #16]
 800ad2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	bfb8      	it	lt
 800ad34:	4613      	movlt	r3, r2
 800ad36:	6033      	str	r3, [r6, #0]
 800ad38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	b10a      	cbz	r2, 800ad46 <_printf_common+0x26>
 800ad42:	3301      	adds	r3, #1
 800ad44:	6033      	str	r3, [r6, #0]
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	0699      	lsls	r1, r3, #26
 800ad4a:	bf42      	ittt	mi
 800ad4c:	6833      	ldrmi	r3, [r6, #0]
 800ad4e:	3302      	addmi	r3, #2
 800ad50:	6033      	strmi	r3, [r6, #0]
 800ad52:	6825      	ldr	r5, [r4, #0]
 800ad54:	f015 0506 	ands.w	r5, r5, #6
 800ad58:	d106      	bne.n	800ad68 <_printf_common+0x48>
 800ad5a:	f104 0a19 	add.w	sl, r4, #25
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	6832      	ldr	r2, [r6, #0]
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dc26      	bgt.n	800adb6 <_printf_common+0x96>
 800ad68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad6c:	6822      	ldr	r2, [r4, #0]
 800ad6e:	3b00      	subs	r3, #0
 800ad70:	bf18      	it	ne
 800ad72:	2301      	movne	r3, #1
 800ad74:	0692      	lsls	r2, r2, #26
 800ad76:	d42b      	bmi.n	800add0 <_printf_common+0xb0>
 800ad78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad7c:	4641      	mov	r1, r8
 800ad7e:	4638      	mov	r0, r7
 800ad80:	47c8      	blx	r9
 800ad82:	3001      	adds	r0, #1
 800ad84:	d01e      	beq.n	800adc4 <_printf_common+0xa4>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	6922      	ldr	r2, [r4, #16]
 800ad8a:	f003 0306 	and.w	r3, r3, #6
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	bf02      	ittt	eq
 800ad92:	68e5      	ldreq	r5, [r4, #12]
 800ad94:	6833      	ldreq	r3, [r6, #0]
 800ad96:	1aed      	subeq	r5, r5, r3
 800ad98:	68a3      	ldr	r3, [r4, #8]
 800ad9a:	bf0c      	ite	eq
 800ad9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada0:	2500      	movne	r5, #0
 800ada2:	4293      	cmp	r3, r2
 800ada4:	bfc4      	itt	gt
 800ada6:	1a9b      	subgt	r3, r3, r2
 800ada8:	18ed      	addgt	r5, r5, r3
 800adaa:	2600      	movs	r6, #0
 800adac:	341a      	adds	r4, #26
 800adae:	42b5      	cmp	r5, r6
 800adb0:	d11a      	bne.n	800ade8 <_printf_common+0xc8>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e008      	b.n	800adc8 <_printf_common+0xa8>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4652      	mov	r2, sl
 800adba:	4641      	mov	r1, r8
 800adbc:	4638      	mov	r0, r7
 800adbe:	47c8      	blx	r9
 800adc0:	3001      	adds	r0, #1
 800adc2:	d103      	bne.n	800adcc <_printf_common+0xac>
 800adc4:	f04f 30ff 	mov.w	r0, #4294967295
 800adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adcc:	3501      	adds	r5, #1
 800adce:	e7c6      	b.n	800ad5e <_printf_common+0x3e>
 800add0:	18e1      	adds	r1, r4, r3
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	2030      	movs	r0, #48	@ 0x30
 800add6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adda:	4422      	add	r2, r4
 800addc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ade0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ade4:	3302      	adds	r3, #2
 800ade6:	e7c7      	b.n	800ad78 <_printf_common+0x58>
 800ade8:	2301      	movs	r3, #1
 800adea:	4622      	mov	r2, r4
 800adec:	4641      	mov	r1, r8
 800adee:	4638      	mov	r0, r7
 800adf0:	47c8      	blx	r9
 800adf2:	3001      	adds	r0, #1
 800adf4:	d0e6      	beq.n	800adc4 <_printf_common+0xa4>
 800adf6:	3601      	adds	r6, #1
 800adf8:	e7d9      	b.n	800adae <_printf_common+0x8e>
	...

0800adfc <_printf_i>:
 800adfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	7e0f      	ldrb	r7, [r1, #24]
 800ae02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae04:	2f78      	cmp	r7, #120	@ 0x78
 800ae06:	4691      	mov	r9, r2
 800ae08:	4680      	mov	r8, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	469a      	mov	sl, r3
 800ae0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae12:	d807      	bhi.n	800ae24 <_printf_i+0x28>
 800ae14:	2f62      	cmp	r7, #98	@ 0x62
 800ae16:	d80a      	bhi.n	800ae2e <_printf_i+0x32>
 800ae18:	2f00      	cmp	r7, #0
 800ae1a:	f000 80d2 	beq.w	800afc2 <_printf_i+0x1c6>
 800ae1e:	2f58      	cmp	r7, #88	@ 0x58
 800ae20:	f000 80b9 	beq.w	800af96 <_printf_i+0x19a>
 800ae24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae2c:	e03a      	b.n	800aea4 <_printf_i+0xa8>
 800ae2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae32:	2b15      	cmp	r3, #21
 800ae34:	d8f6      	bhi.n	800ae24 <_printf_i+0x28>
 800ae36:	a101      	add	r1, pc, #4	@ (adr r1, 800ae3c <_printf_i+0x40>)
 800ae38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae3c:	0800ae95 	.word	0x0800ae95
 800ae40:	0800aea9 	.word	0x0800aea9
 800ae44:	0800ae25 	.word	0x0800ae25
 800ae48:	0800ae25 	.word	0x0800ae25
 800ae4c:	0800ae25 	.word	0x0800ae25
 800ae50:	0800ae25 	.word	0x0800ae25
 800ae54:	0800aea9 	.word	0x0800aea9
 800ae58:	0800ae25 	.word	0x0800ae25
 800ae5c:	0800ae25 	.word	0x0800ae25
 800ae60:	0800ae25 	.word	0x0800ae25
 800ae64:	0800ae25 	.word	0x0800ae25
 800ae68:	0800afa9 	.word	0x0800afa9
 800ae6c:	0800aed3 	.word	0x0800aed3
 800ae70:	0800af63 	.word	0x0800af63
 800ae74:	0800ae25 	.word	0x0800ae25
 800ae78:	0800ae25 	.word	0x0800ae25
 800ae7c:	0800afcb 	.word	0x0800afcb
 800ae80:	0800ae25 	.word	0x0800ae25
 800ae84:	0800aed3 	.word	0x0800aed3
 800ae88:	0800ae25 	.word	0x0800ae25
 800ae8c:	0800ae25 	.word	0x0800ae25
 800ae90:	0800af6b 	.word	0x0800af6b
 800ae94:	6833      	ldr	r3, [r6, #0]
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6032      	str	r2, [r6, #0]
 800ae9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aea4:	2301      	movs	r3, #1
 800aea6:	e09d      	b.n	800afe4 <_printf_i+0x1e8>
 800aea8:	6833      	ldr	r3, [r6, #0]
 800aeaa:	6820      	ldr	r0, [r4, #0]
 800aeac:	1d19      	adds	r1, r3, #4
 800aeae:	6031      	str	r1, [r6, #0]
 800aeb0:	0606      	lsls	r6, r0, #24
 800aeb2:	d501      	bpl.n	800aeb8 <_printf_i+0xbc>
 800aeb4:	681d      	ldr	r5, [r3, #0]
 800aeb6:	e003      	b.n	800aec0 <_printf_i+0xc4>
 800aeb8:	0645      	lsls	r5, r0, #25
 800aeba:	d5fb      	bpl.n	800aeb4 <_printf_i+0xb8>
 800aebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	da03      	bge.n	800aecc <_printf_i+0xd0>
 800aec4:	232d      	movs	r3, #45	@ 0x2d
 800aec6:	426d      	negs	r5, r5
 800aec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aecc:	4859      	ldr	r0, [pc, #356]	@ (800b034 <_printf_i+0x238>)
 800aece:	230a      	movs	r3, #10
 800aed0:	e011      	b.n	800aef6 <_printf_i+0xfa>
 800aed2:	6821      	ldr	r1, [r4, #0]
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	0608      	lsls	r0, r1, #24
 800aed8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aedc:	d402      	bmi.n	800aee4 <_printf_i+0xe8>
 800aede:	0649      	lsls	r1, r1, #25
 800aee0:	bf48      	it	mi
 800aee2:	b2ad      	uxthmi	r5, r5
 800aee4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aee6:	4853      	ldr	r0, [pc, #332]	@ (800b034 <_printf_i+0x238>)
 800aee8:	6033      	str	r3, [r6, #0]
 800aeea:	bf14      	ite	ne
 800aeec:	230a      	movne	r3, #10
 800aeee:	2308      	moveq	r3, #8
 800aef0:	2100      	movs	r1, #0
 800aef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aef6:	6866      	ldr	r6, [r4, #4]
 800aef8:	60a6      	str	r6, [r4, #8]
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	bfa2      	ittt	ge
 800aefe:	6821      	ldrge	r1, [r4, #0]
 800af00:	f021 0104 	bicge.w	r1, r1, #4
 800af04:	6021      	strge	r1, [r4, #0]
 800af06:	b90d      	cbnz	r5, 800af0c <_printf_i+0x110>
 800af08:	2e00      	cmp	r6, #0
 800af0a:	d04b      	beq.n	800afa4 <_printf_i+0x1a8>
 800af0c:	4616      	mov	r6, r2
 800af0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800af12:	fb03 5711 	mls	r7, r3, r1, r5
 800af16:	5dc7      	ldrb	r7, [r0, r7]
 800af18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af1c:	462f      	mov	r7, r5
 800af1e:	42bb      	cmp	r3, r7
 800af20:	460d      	mov	r5, r1
 800af22:	d9f4      	bls.n	800af0e <_printf_i+0x112>
 800af24:	2b08      	cmp	r3, #8
 800af26:	d10b      	bne.n	800af40 <_printf_i+0x144>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	07df      	lsls	r7, r3, #31
 800af2c:	d508      	bpl.n	800af40 <_printf_i+0x144>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	6861      	ldr	r1, [r4, #4]
 800af32:	4299      	cmp	r1, r3
 800af34:	bfde      	ittt	le
 800af36:	2330      	movle	r3, #48	@ 0x30
 800af38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af40:	1b92      	subs	r2, r2, r6
 800af42:	6122      	str	r2, [r4, #16]
 800af44:	f8cd a000 	str.w	sl, [sp]
 800af48:	464b      	mov	r3, r9
 800af4a:	aa03      	add	r2, sp, #12
 800af4c:	4621      	mov	r1, r4
 800af4e:	4640      	mov	r0, r8
 800af50:	f7ff fee6 	bl	800ad20 <_printf_common>
 800af54:	3001      	adds	r0, #1
 800af56:	d14a      	bne.n	800afee <_printf_i+0x1f2>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	b004      	add	sp, #16
 800af5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	f043 0320 	orr.w	r3, r3, #32
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	4833      	ldr	r0, [pc, #204]	@ (800b038 <_printf_i+0x23c>)
 800af6c:	2778      	movs	r7, #120	@ 0x78
 800af6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	6831      	ldr	r1, [r6, #0]
 800af76:	061f      	lsls	r7, r3, #24
 800af78:	f851 5b04 	ldr.w	r5, [r1], #4
 800af7c:	d402      	bmi.n	800af84 <_printf_i+0x188>
 800af7e:	065f      	lsls	r7, r3, #25
 800af80:	bf48      	it	mi
 800af82:	b2ad      	uxthmi	r5, r5
 800af84:	6031      	str	r1, [r6, #0]
 800af86:	07d9      	lsls	r1, r3, #31
 800af88:	bf44      	itt	mi
 800af8a:	f043 0320 	orrmi.w	r3, r3, #32
 800af8e:	6023      	strmi	r3, [r4, #0]
 800af90:	b11d      	cbz	r5, 800af9a <_printf_i+0x19e>
 800af92:	2310      	movs	r3, #16
 800af94:	e7ac      	b.n	800aef0 <_printf_i+0xf4>
 800af96:	4827      	ldr	r0, [pc, #156]	@ (800b034 <_printf_i+0x238>)
 800af98:	e7e9      	b.n	800af6e <_printf_i+0x172>
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	f023 0320 	bic.w	r3, r3, #32
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	e7f6      	b.n	800af92 <_printf_i+0x196>
 800afa4:	4616      	mov	r6, r2
 800afa6:	e7bd      	b.n	800af24 <_printf_i+0x128>
 800afa8:	6833      	ldr	r3, [r6, #0]
 800afaa:	6825      	ldr	r5, [r4, #0]
 800afac:	6961      	ldr	r1, [r4, #20]
 800afae:	1d18      	adds	r0, r3, #4
 800afb0:	6030      	str	r0, [r6, #0]
 800afb2:	062e      	lsls	r6, r5, #24
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	d501      	bpl.n	800afbc <_printf_i+0x1c0>
 800afb8:	6019      	str	r1, [r3, #0]
 800afba:	e002      	b.n	800afc2 <_printf_i+0x1c6>
 800afbc:	0668      	lsls	r0, r5, #25
 800afbe:	d5fb      	bpl.n	800afb8 <_printf_i+0x1bc>
 800afc0:	8019      	strh	r1, [r3, #0]
 800afc2:	2300      	movs	r3, #0
 800afc4:	6123      	str	r3, [r4, #16]
 800afc6:	4616      	mov	r6, r2
 800afc8:	e7bc      	b.n	800af44 <_printf_i+0x148>
 800afca:	6833      	ldr	r3, [r6, #0]
 800afcc:	1d1a      	adds	r2, r3, #4
 800afce:	6032      	str	r2, [r6, #0]
 800afd0:	681e      	ldr	r6, [r3, #0]
 800afd2:	6862      	ldr	r2, [r4, #4]
 800afd4:	2100      	movs	r1, #0
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7f5 f98a 	bl	80002f0 <memchr>
 800afdc:	b108      	cbz	r0, 800afe2 <_printf_i+0x1e6>
 800afde:	1b80      	subs	r0, r0, r6
 800afe0:	6060      	str	r0, [r4, #4]
 800afe2:	6863      	ldr	r3, [r4, #4]
 800afe4:	6123      	str	r3, [r4, #16]
 800afe6:	2300      	movs	r3, #0
 800afe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afec:	e7aa      	b.n	800af44 <_printf_i+0x148>
 800afee:	6923      	ldr	r3, [r4, #16]
 800aff0:	4632      	mov	r2, r6
 800aff2:	4649      	mov	r1, r9
 800aff4:	4640      	mov	r0, r8
 800aff6:	47d0      	blx	sl
 800aff8:	3001      	adds	r0, #1
 800affa:	d0ad      	beq.n	800af58 <_printf_i+0x15c>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	079b      	lsls	r3, r3, #30
 800b000:	d413      	bmi.n	800b02a <_printf_i+0x22e>
 800b002:	68e0      	ldr	r0, [r4, #12]
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	4298      	cmp	r0, r3
 800b008:	bfb8      	it	lt
 800b00a:	4618      	movlt	r0, r3
 800b00c:	e7a6      	b.n	800af5c <_printf_i+0x160>
 800b00e:	2301      	movs	r3, #1
 800b010:	4632      	mov	r2, r6
 800b012:	4649      	mov	r1, r9
 800b014:	4640      	mov	r0, r8
 800b016:	47d0      	blx	sl
 800b018:	3001      	adds	r0, #1
 800b01a:	d09d      	beq.n	800af58 <_printf_i+0x15c>
 800b01c:	3501      	adds	r5, #1
 800b01e:	68e3      	ldr	r3, [r4, #12]
 800b020:	9903      	ldr	r1, [sp, #12]
 800b022:	1a5b      	subs	r3, r3, r1
 800b024:	42ab      	cmp	r3, r5
 800b026:	dcf2      	bgt.n	800b00e <_printf_i+0x212>
 800b028:	e7eb      	b.n	800b002 <_printf_i+0x206>
 800b02a:	2500      	movs	r5, #0
 800b02c:	f104 0619 	add.w	r6, r4, #25
 800b030:	e7f5      	b.n	800b01e <_printf_i+0x222>
 800b032:	bf00      	nop
 800b034:	0800b3b5 	.word	0x0800b3b5
 800b038:	0800b3c6 	.word	0x0800b3c6

0800b03c <memmove>:
 800b03c:	4288      	cmp	r0, r1
 800b03e:	b510      	push	{r4, lr}
 800b040:	eb01 0402 	add.w	r4, r1, r2
 800b044:	d902      	bls.n	800b04c <memmove+0x10>
 800b046:	4284      	cmp	r4, r0
 800b048:	4623      	mov	r3, r4
 800b04a:	d807      	bhi.n	800b05c <memmove+0x20>
 800b04c:	1e43      	subs	r3, r0, #1
 800b04e:	42a1      	cmp	r1, r4
 800b050:	d008      	beq.n	800b064 <memmove+0x28>
 800b052:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b05a:	e7f8      	b.n	800b04e <memmove+0x12>
 800b05c:	4402      	add	r2, r0
 800b05e:	4601      	mov	r1, r0
 800b060:	428a      	cmp	r2, r1
 800b062:	d100      	bne.n	800b066 <memmove+0x2a>
 800b064:	bd10      	pop	{r4, pc}
 800b066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b06a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b06e:	e7f7      	b.n	800b060 <memmove+0x24>

0800b070 <_sbrk_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d06      	ldr	r5, [pc, #24]	@ (800b08c <_sbrk_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f7f6 fb02 	bl	8001684 <_sbrk>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_sbrk_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_sbrk_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	240009d0 	.word	0x240009d0

0800b090 <memcpy>:
 800b090:	440a      	add	r2, r1
 800b092:	4291      	cmp	r1, r2
 800b094:	f100 33ff 	add.w	r3, r0, #4294967295
 800b098:	d100      	bne.n	800b09c <memcpy+0xc>
 800b09a:	4770      	bx	lr
 800b09c:	b510      	push	{r4, lr}
 800b09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0a6:	4291      	cmp	r1, r2
 800b0a8:	d1f9      	bne.n	800b09e <memcpy+0xe>
 800b0aa:	bd10      	pop	{r4, pc}

0800b0ac <_realloc_r>:
 800b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b0:	4680      	mov	r8, r0
 800b0b2:	4615      	mov	r5, r2
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	b921      	cbnz	r1, 800b0c2 <_realloc_r+0x16>
 800b0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0bc:	4611      	mov	r1, r2
 800b0be:	f7ff bc4b 	b.w	800a958 <_malloc_r>
 800b0c2:	b92a      	cbnz	r2, 800b0d0 <_realloc_r+0x24>
 800b0c4:	f7ff fbdc 	bl	800a880 <_free_r>
 800b0c8:	2400      	movs	r4, #0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d0:	f000 f81a 	bl	800b108 <_malloc_usable_size_r>
 800b0d4:	4285      	cmp	r5, r0
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	d802      	bhi.n	800b0e0 <_realloc_r+0x34>
 800b0da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0de:	d8f4      	bhi.n	800b0ca <_realloc_r+0x1e>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f7ff fc38 	bl	800a958 <_malloc_r>
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d0ec      	beq.n	800b0c8 <_realloc_r+0x1c>
 800b0ee:	42b5      	cmp	r5, r6
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	bf28      	it	cs
 800b0f6:	4632      	movcs	r2, r6
 800b0f8:	f7ff ffca 	bl	800b090 <memcpy>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4640      	mov	r0, r8
 800b100:	f7ff fbbe 	bl	800a880 <_free_r>
 800b104:	463c      	mov	r4, r7
 800b106:	e7e0      	b.n	800b0ca <_realloc_r+0x1e>

0800b108 <_malloc_usable_size_r>:
 800b108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b10c:	1f18      	subs	r0, r3, #4
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bfbc      	itt	lt
 800b112:	580b      	ldrlt	r3, [r1, r0]
 800b114:	18c0      	addlt	r0, r0, r3
 800b116:	4770      	bx	lr

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
