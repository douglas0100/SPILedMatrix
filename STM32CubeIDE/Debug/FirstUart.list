
FirstUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080092e8  080092e8  0000a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080094f8  080094f8  0000a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009500  08009500  0000a500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009504  08009504  0000a504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009508  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08009518  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009578  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  240000d0  080095d8  0000b0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000838  080095d8  0000b838  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eebb  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003360  00000000  00000000  00029fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0002d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001059  00000000  00000000  0002e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038e57  00000000  00000000  0002f869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e924  00000000  00000000  000686c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016657b  00000000  00000000  00086fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ed55f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa0  00000000  00000000  001ed5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001f3044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080092d0 	.word	0x080092d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080092d0 	.word	0x080092d0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 ff65 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f821 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fa01 	bl	80009dc <MX_GPIO_Init>
  MX_ETH_Init();
 80005da:	f000 f89d 	bl	8000718 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f97f 	bl	80008e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e2:	f000 f9c9 	bl	8000978 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005e6:	f000 f8e3 	bl	80007b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005ea:	f000 f921 	bl	8000830 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint8_t LDR = PCF8591_ReadAnalog(0);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fb50 	bl	8000c94 <PCF8591_ReadAnalog>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp = PCF8591_ReadAnalog(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fb4b 	bl	8000c94 <PCF8591_ReadAnalog>
 80005fe:	4603      	mov	r3, r0
 8000600:	71bb      	strb	r3, [r7, #6]
	uint8_t Pot = PCF8591_ReadAnalog(3);
 8000602:	2003      	movs	r0, #3
 8000604:	f000 fb46 	bl	8000c94 <PCF8591_ReadAnalog>
 8000608:	4603      	mov	r3, r0
 800060a:	717b      	strb	r3, [r7, #5]

	DisplayCharacter('A');
 800060c:	2041      	movs	r0, #65	@ 0x41
 800060e:	f000 fb1b 	bl	8000c48 <DisplayCharacter>
  {
 8000612:	bf00      	nop
 8000614:	e7eb      	b.n	80005ee <main+0x26>
	...

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09c      	sub	sp, #112	@ 0x70
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000622:	224c      	movs	r2, #76	@ 0x4c
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f008 fe25 	bl	8009276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2220      	movs	r2, #32
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f008 fe1f 	bl	8009276 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000638:	2002      	movs	r0, #2
 800063a:	f003 fba9 	bl	8003d90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b33      	ldr	r3, [pc, #204]	@ (8000710 <SystemClock_Config+0xf8>)
 8000644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000646:	4a32      	ldr	r2, [pc, #200]	@ (8000710 <SystemClock_Config+0xf8>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800064e:	4b30      	ldr	r3, [pc, #192]	@ (8000710 <SystemClock_Config+0xf8>)
 8000650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <SystemClock_Config+0xfc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000660:	4a2c      	ldr	r2, [pc, #176]	@ (8000714 <SystemClock_Config+0xfc>)
 8000662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <SystemClock_Config+0xfc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000674:	bf00      	nop
 8000676:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <SystemClock_Config+0xfc>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800067e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000682:	d1f8      	bne.n	8000676 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000684:	2303      	movs	r3, #3
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800068c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800068e:	2301      	movs	r3, #1
 8000690:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2340      	movs	r3, #64	@ 0x40
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 80006a2:	2313      	movs	r3, #19
 80006a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006aa:	2303      	movs	r3, #3
 80006ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b2:	230c      	movs	r3, #12
 80006b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80006b6:	2302      	movs	r3, #2
 80006b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fbae 	bl	8003e24 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ce:	f000 fb0b 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	233f      	movs	r3, #63	@ 0x3f
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 ffee 	bl	80046d8 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000702:	f000 faf1 	bl	8000ce8 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3770      	adds	r7, #112	@ 0x70
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	58000400 	.word	0x58000400
 8000714:	58024800 	.word	0x58024800

08000718 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ETH_Init+0x80>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <MX_ETH_Init+0x84>)
 8000720:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_ETH_Init+0x88>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_ETH_Init+0x88>)
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_ETH_Init+0x88>)
 8000730:	22e1      	movs	r2, #225	@ 0xe1
 8000732:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_ETH_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ETH_Init+0x88>)
 800073c:	2200      	movs	r2, #0
 800073e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_ETH_Init+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_ETH_Init+0x80>)
 8000748:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_ETH_Init+0x88>)
 800074a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_ETH_Init+0x80>)
 800074e:	2201      	movs	r2, #1
 8000750:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_ETH_Init+0x80>)
 8000754:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_ETH_Init+0x8c>)
 8000756:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ETH_Init+0x80>)
 800075a:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_ETH_Init+0x90>)
 800075c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_ETH_Init+0x80>)
 8000760:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000764:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000766:	480c      	ldr	r0, [pc, #48]	@ (8000798 <MX_ETH_Init+0x80>)
 8000768:	f001 fde2 	bl	8002330 <HAL_ETH_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fab9 	bl	8000ce8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000776:	2238      	movs	r2, #56	@ 0x38
 8000778:	2100      	movs	r1, #0
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_ETH_Init+0x94>)
 800077c:	f008 fd7b 	bl	8009276 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_ETH_Init+0x94>)
 8000782:	2221      	movs	r2, #33	@ 0x21
 8000784:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_ETH_Init+0x94>)
 8000788:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800078c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_ETH_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000124 	.word	0x24000124
 800079c:	40028000 	.word	0x40028000
 80007a0:	2400082c 	.word	0x2400082c
 80007a4:	24000070 	.word	0x24000070
 80007a8:	24000010 	.word	0x24000010
 80007ac:	240000ec 	.word	0x240000ec

080007b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000828 <MX_I2C1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007bc:	4a1b      	ldr	r2, [pc, #108]	@ (800082c <MX_I2C1_Init+0x7c>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ea:	480e      	ldr	r0, [pc, #56]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007ec:	f002 fbb8 	bl	8002f60 <HAL_I2C_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007f6:	f000 fa77 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4809      	ldr	r0, [pc, #36]	@ (8000824 <MX_I2C1_Init+0x74>)
 80007fe:	f003 f8ff 	bl	8003a00 <HAL_I2CEx_ConfigAnalogFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000808:	f000 fa6e 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_I2C1_Init+0x74>)
 8000810:	f003 f941 	bl	8003a96 <HAL_I2CEx_ConfigDigitalFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 fa65 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240001d4 	.word	0x240001d4
 8000828:	40005400 	.word	0x40005400
 800082c:	10707dbc 	.word	0x10707dbc

08000830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000836:	4a29      	ldr	r2, [pc, #164]	@ (80008dc <MX_SPI1_Init+0xac>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800083c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000842:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000844:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000848:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800084c:	2207      	movs	r2, #7
 800084e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800085e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000862:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000866:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800088e:	2200      	movs	r2, #0
 8000890:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 8000894:	2200      	movs	r2, #0
 8000896:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 800089a:	2200      	movs	r2, #0
 800089c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_SPI1_Init+0xa8>)
 80008c4:	f006 f8c0 	bl	8006a48 <HAL_SPI_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80008ce:	f000 fa0b 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	24000228 	.word	0x24000228
 80008dc:	40013000 	.word	0x40013000

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <MX_USART3_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 800092a:	f006 fc88 	bl	800723e <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f9d8 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 800093c:	f008 f8ca 	bl	8008ad4 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f9cf 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 800094e:	f008 f8ff 	bl	8008b50 <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f9c6 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_USART3_UART_Init+0x90>)
 800095e:	f008 f880 	bl	8008a62 <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f9be 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	240002b0 	.word	0x240002b0
 8000974:	40004800 	.word	0x40004800

08000978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097e:	4a16      	ldr	r2, [pc, #88]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000980:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000984:	2209      	movs	r2, #9
 8000986:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098a:	2202      	movs	r2, #2
 800098c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000990:	2200      	movs	r2, #0
 8000992:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000996:	2202      	movs	r2, #2
 8000998:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099c:	2201      	movs	r2, #1
 800099e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c0:	f003 f8b5 	bl	8003b2e <HAL_PCD_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009ca:	f000 f98d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	24000344 	.word	0x24000344
 80009d8:	40080000 	.word	0x40080000

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	@ 0x30
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b70      	ldr	r3, [pc, #448]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	4a6e      	ldr	r2, [pc, #440]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a02:	4b6c      	ldr	r3, [pc, #432]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a10:	4b68      	ldr	r3, [pc, #416]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	4a67      	ldr	r2, [pc, #412]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a20:	4b64      	ldr	r3, [pc, #400]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b61      	ldr	r3, [pc, #388]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	4a5f      	ldr	r2, [pc, #380]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b59      	ldr	r3, [pc, #356]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	4a58      	ldr	r2, [pc, #352]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5c:	4b55      	ldr	r3, [pc, #340]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b52      	ldr	r3, [pc, #328]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	4a50      	ldr	r2, [pc, #320]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a88:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8e:	4a49      	ldr	r2, [pc, #292]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a98:	4b46      	ldr	r3, [pc, #280]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa6:	4b43      	ldr	r3, [pc, #268]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	4a41      	ldr	r2, [pc, #260]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2140      	movs	r1, #64	@ 0x40
 8000ac8:	483b      	ldr	r0, [pc, #236]	@ (8000bb8 <MX_GPIO_Init+0x1dc>)
 8000aca:	f002 fa15 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ad4:	4839      	ldr	r0, [pc, #228]	@ (8000bbc <MX_GPIO_Init+0x1e0>)
 8000ad6:	f002 fa0f 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae0:	4837      	ldr	r0, [pc, #220]	@ (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000ae2:	f002 fa09 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4836      	ldr	r0, [pc, #216]	@ (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000aec:	f002 fa04 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4830      	ldr	r0, [pc, #192]	@ (8000bc8 <MX_GPIO_Init+0x1ec>)
 8000b08:	f002 f846 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b0c:	2340      	movs	r3, #64	@ 0x40
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4825      	ldr	r0, [pc, #148]	@ (8000bb8 <MX_GPIO_Init+0x1dc>)
 8000b24:	f002 f838 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b28:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481e      	ldr	r0, [pc, #120]	@ (8000bbc <MX_GPIO_Init+0x1e0>)
 8000b42:	f002 f829 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4818      	ldr	r0, [pc, #96]	@ (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000b60:	f002 f81a 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <MX_GPIO_Init+0x1f0>)
 8000b7a:	f002 f80d 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000b96:	f001 ffff 	bl	8002b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2028      	movs	r0, #40	@ 0x28
 8000ba0:	f000 fe2d 	bl	80017fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba4:	2028      	movs	r0, #40	@ 0x28
 8000ba6:	f000 fe44 	bl	8001832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	3730      	adds	r7, #48	@ 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020000 	.word	0x58020000
 8000bbc:	58020400 	.word	0x58020400
 8000bc0:	58020c00 	.word	0x58020c00
 8000bc4:	58021000 	.word	0x58021000
 8000bc8:	58020800 	.word	0x58020800
 8000bcc:	58021800 	.word	0x58021800

08000bd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be0:	d104      	bne.n	8000bec <HAL_GPIO_EXTI_Callback+0x1c>
  {
	  counter++;
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a03      	ldr	r2, [pc, #12]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000bea:	6013      	str	r3, [r2, #0]
  }
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	24000828 	.word	0x24000828

08000bfc <MAX7219_SendData>:
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message));
}


void MAX7219_SendData(uint8_t reg, uint8_t data)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
	uint8_t txData[2] = {reg, data};
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	733b      	strb	r3, [r7, #12]
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull CS low
 8000c14:	2200      	movs	r2, #0
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <MAX7219_SendData+0x44>)
 8000c1a:	f002 f96d 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register and data
 8000c1e:	f107 010c 	add.w	r1, r7, #12
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	2202      	movs	r2, #2
 8000c28:	4806      	ldr	r0, [pc, #24]	@ (8000c44 <MAX7219_SendData+0x48>)
 8000c2a:	f006 f831 	bl	8006c90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull CS high
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2140      	movs	r1, #64	@ 0x40
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <MAX7219_SendData+0x44>)
 8000c34:	f002 f960 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58020000 	.word	0x58020000
 8000c44:	24000228 	.word	0x24000228

08000c48 <DisplayCharacter>:


void DisplayCharacter(uint8_t character) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t charIndex = 0; // ASCII offset
 8000c52:	2300      	movs	r3, #0
 8000c54:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < 8; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e010      	b.n	8000c7e <DisplayCharacter+0x36>
		MAX7219_SendData(MAX7219_REG_DIGIT0 + i, ascii_font[charIndex][i]);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	3301      	adds	r3, #1
 8000c62:	b2d8      	uxtb	r0, r3
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <DisplayCharacter+0x48>)
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	441a      	add	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	f7ff ffc2 	bl	8000bfc <MAX7219_SendData>
	for (int i = 0; i < 8; i++) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	ddeb      	ble.n	8000c5c <DisplayCharacter+0x14>
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	080092e8 	.word	0x080092e8

08000c94 <PCF8591_ReadAnalog>:


uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000cb2:	f107 020f 	add.w	r2, r7, #15
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2190      	movs	r1, #144	@ 0x90
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <PCF8591_ReadAnalog+0x50>)
 8000cc2:	f002 f9e9 	bl	8003098 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000cc6:	f107 020c 	add.w	r2, r7, #12
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	2190      	movs	r1, #144	@ 0x90
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <PCF8591_ReadAnalog+0x50>)
 8000cd6:	f002 faf7 	bl	80032c8 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240001d4 	.word	0x240001d4

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d00:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x30>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	58024400 	.word	0x58024400

08000d28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	@ 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a59      	ldr	r2, [pc, #356]	@ (8000eac <HAL_ETH_MspInit+0x184>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f040 80ab 	bne.w	8000ea2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d4c:	4b58      	ldr	r3, [pc, #352]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	4a57      	ldr	r2, [pc, #348]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d5c:	4b54      	ldr	r3, [pc, #336]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d6a:	4b51      	ldr	r3, [pc, #324]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d70:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d88:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d8e:	4a48      	ldr	r2, [pc, #288]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d98:	4b45      	ldr	r3, [pc, #276]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b42      	ldr	r3, [pc, #264]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	4a40      	ldr	r2, [pc, #256]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db6:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	4a39      	ldr	r2, [pc, #228]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd4:	4b36      	ldr	r3, [pc, #216]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	4a31      	ldr	r2, [pc, #196]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df2:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e00:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <HAL_ETH_MspInit+0x188>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e1e:	2332      	movs	r3, #50	@ 0x32
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	481e      	ldr	r0, [pc, #120]	@ (8000eb4 <HAL_ETH_MspInit+0x18c>)
 8000e3a:	f001 fead 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e3e:	2386      	movs	r3, #134	@ 0x86
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4e:	230b      	movs	r3, #11
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4817      	ldr	r0, [pc, #92]	@ (8000eb8 <HAL_ETH_MspInit+0x190>)
 8000e5a:	f001 fe9d 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e70:	230b      	movs	r3, #11
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <HAL_ETH_MspInit+0x194>)
 8000e7c:	f001 fe8c 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4808      	ldr	r0, [pc, #32]	@ (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000e9e:	f001 fe7b 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3738      	adds	r7, #56	@ 0x38
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40028000 	.word	0x40028000
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58020800 	.word	0x58020800
 8000eb8:	58020000 	.word	0x58020000
 8000ebc:	58020400 	.word	0x58020400
 8000ec0:	58021800 	.word	0x58021800

08000ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	22c0      	movs	r2, #192	@ 0xc0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 f9c6 	bl	8009276 <memset>
  if(hi2c->Instance==I2C1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a27      	ldr	r2, [pc, #156]	@ (8000f8c <HAL_I2C_MspInit+0xc8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d146      	bne.n	8000f82 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ef4:	f04f 0208 	mov.w	r2, #8
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 ff70 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f16:	f7ff fee7 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <HAL_I2C_MspInit+0xcc>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <HAL_I2C_MspInit+0xcc>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_I2C_MspInit+0xcc>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f40:	2312      	movs	r3, #18
 8000f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f52:	2304      	movs	r3, #4
 8000f54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <HAL_I2C_MspInit+0xd0>)
 8000f60:	f001 fe1a 	bl	8002b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_I2C_MspInit+0xcc>)
 8000f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <HAL_I2C_MspInit+0xcc>)
 8000f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_I2C_MspInit+0xcc>)
 8000f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f82:	bf00      	nop
 8000f84:	37e8      	adds	r7, #232	@ 0xe8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020400 	.word	0x58020400

08000f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0bc      	sub	sp, #240	@ 0xf0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	22c0      	movs	r2, #192	@ 0xc0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f008 f95c 	bl	8009276 <memset>
  if(hspi->Instance==SPI1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a41      	ldr	r2, [pc, #260]	@ (80010c8 <HAL_SPI_MspInit+0x130>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d17a      	bne.n	80010be <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000fe8:	23c0      	movs	r3, #192	@ 0xc0
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 2048;
 8000ff0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fef5 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 800100c:	f7ff fe6c 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001010:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001016:	4a2d      	ldr	r2, [pc, #180]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800101c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a25      	ldr	r2, [pc, #148]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <HAL_SPI_MspInit+0x134>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800106a:	2320      	movs	r3, #32
 800106c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001082:	2305      	movs	r3, #5
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800108c:	4619      	mov	r1, r3
 800108e:	4810      	ldr	r0, [pc, #64]	@ (80010d0 <HAL_SPI_MspInit+0x138>)
 8001090:	f001 fd82 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001094:	2320      	movs	r3, #32
 8001096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ac:	2305      	movs	r3, #5
 80010ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010b6:	4619      	mov	r1, r3
 80010b8:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <HAL_SPI_MspInit+0x13c>)
 80010ba:	f001 fd6d 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	37f0      	adds	r7, #240	@ 0xf0
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40013000 	.word	0x40013000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020000 	.word	0x58020000
 80010d4:	58020400 	.word	0x58020400

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0ba      	sub	sp, #232	@ 0xe8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	22c0      	movs	r2, #192	@ 0xc0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f008 f8bc 	bl	8009276 <memset>
  if(huart->Instance==USART3)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a2b      	ldr	r2, [pc, #172]	@ (80011b0 <HAL_UART_MspInit+0xd8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d14e      	bne.n	80011a6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001108:	f04f 0202 	mov.w	r2, #2
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fe66 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800112a:	f7ff fddd 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <HAL_UART_MspInit+0xdc>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001134:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <HAL_UART_MspInit+0xdc>)
 8001136:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800113a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_UART_MspInit+0xdc>)
 8001140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800114c:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <HAL_UART_MspInit+0xdc>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a18      	ldr	r2, [pc, #96]	@ (80011b4 <HAL_UART_MspInit+0xdc>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_UART_MspInit+0xdc>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800116a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001184:	2307      	movs	r3, #7
 8001186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800118e:	4619      	mov	r1, r3
 8001190:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <HAL_UART_MspInit+0xe0>)
 8001192:	f001 fd01 	bl	8002b98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2027      	movs	r0, #39	@ 0x27
 800119c:	f000 fb2f 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011a0:	2027      	movs	r0, #39	@ 0x27
 80011a2:	f000 fb46 	bl	8001832 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	37e8      	adds	r7, #232	@ 0xe8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40004800 	.word	0x40004800
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020c00 	.word	0x58020c00

080011bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ba      	sub	sp, #232	@ 0xe8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	22c0      	movs	r2, #192	@ 0xc0
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f008 f84a 	bl	8009276 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <HAL_PCD_MspInit+0xec>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d159      	bne.n	80012a0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fdf3 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001210:	f7ff fd6a 	bl	8000ce8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001214:	f002 fdf6 	bl	8003e04 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001228:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001236:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001250:	230a      	movs	r3, #10
 8001252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	@ (80012b0 <HAL_PCD_MspInit+0xf4>)
 800125e:	f001 fc9b 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <HAL_PCD_MspInit+0xf4>)
 800127e:	f001 fc8b 	bl	8002b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 800128a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800128e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_PCD_MspInit+0xf0>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	37e8      	adds	r7, #232	@ 0xe8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40080000 	.word	0x40080000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020000 	.word	0x58020000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <NMI_Handler+0x4>

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <UsageFault_Handler+0x4>

080012dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f939 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <USART3_IRQHandler+0x10>)
 800131a:	f005 ffe1 	bl	80072e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	240002b0 	.word	0x240002b0

08001328 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800132c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001330:	f001 fdfb 	bl	8002f2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001370 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800133c:	f000 f826 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	@ (8001378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	@ (8001384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001366:	f007 ff8f 	bl	8009288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff f92d 	bl	80005c8 <main>
  bx  lr
 800136e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001374:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001378:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800137c:	08009508 	.word	0x08009508
  ldr r2, =_sbss
 8001380:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001384:	24000838 	.word	0x24000838

08001388 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC3_IRQHandler>
	...

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001390:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <SystemInit+0xe4>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <SystemInit+0xe4>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a0:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <SystemInit+0xe8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d807      	bhi.n	80013bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ac:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <SystemInit+0xe8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 030f 	bic.w	r3, r3, #15
 80013b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001474 <SystemInit+0xe8>)
 80013b6:	f043 0307 	orr.w	r3, r3, #7
 80013ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <SystemInit+0xec>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001478 <SystemInit+0xec>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <SystemInit+0xec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <SystemInit+0xec>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4929      	ldr	r1, [pc, #164]	@ (8001478 <SystemInit+0xec>)
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <SystemInit+0xf0>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <SystemInit+0xe8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <SystemInit+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 030f 	bic.w	r3, r3, #15
 80013ee:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <SystemInit+0xe8>)
 80013f0:	f043 0307 	orr.w	r3, r3, #7
 80013f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <SystemInit+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <SystemInit+0xec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <SystemInit+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <SystemInit+0xec>)
 800140a:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <SystemInit+0xf4>)
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <SystemInit+0xec>)
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <SystemInit+0xf8>)
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <SystemInit+0xec>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <SystemInit+0xfc>)
 8001418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <SystemInit+0xec>)
 800141c:	2200      	movs	r2, #0
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <SystemInit+0xec>)
 8001422:	4a19      	ldr	r2, [pc, #100]	@ (8001488 <SystemInit+0xfc>)
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <SystemInit+0xec>)
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <SystemInit+0xec>)
 800142e:	4a16      	ldr	r2, [pc, #88]	@ (8001488 <SystemInit+0xfc>)
 8001430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <SystemInit+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <SystemInit+0xec>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <SystemInit+0xec>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <SystemInit+0xec>)
 8001446:	2200      	movs	r2, #0
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <SystemInit+0x100>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <SystemInit+0x104>)
 8001450:	4013      	ands	r3, r2
 8001452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001456:	d202      	bcs.n	800145e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001458:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <SystemInit+0x108>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <SystemInit+0x10c>)
 8001460:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001464:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	52002000 	.word	0x52002000
 8001478:	58024400 	.word	0x58024400
 800147c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001480:	02020200 	.word	0x02020200
 8001484:	01ff0000 	.word	0x01ff0000
 8001488:	01010280 	.word	0x01010280
 800148c:	5c001000 	.word	0x5c001000
 8001490:	ffff0000 	.word	0xffff0000
 8001494:	51008108 	.word	0x51008108
 8001498:	52004000 	.word	0x52004000

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f9a0 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a8:	f003 facc 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4913      	ldr	r1, [pc, #76]	@ (8001508 <HAL_Init+0x6c>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_Init+0x68>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_Init+0x6c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_Init+0x70>)
 80014de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_Init+0x74>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f814 	bl	8001514 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e002      	b.n	80014fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014f6:	f7ff fbfd 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	58024400 	.word	0x58024400
 8001508:	080094c0 	.word	0x080094c0
 800150c:	24000004 	.word	0x24000004
 8001510:	24000000 	.word	0x24000000

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_InitTick+0x60>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e021      	b.n	800156c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_InitTick+0x64>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_InitTick+0x60>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f985 	bl	800184e <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f000 f94f 	bl	80017fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	@ (800157c <HAL_InitTick+0x68>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2400000c 	.word	0x2400000c
 8001578:	24000000 	.word	0x24000000
 800157c:	24000008 	.word	0x24000008

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2400000c 	.word	0x2400000c
 80015a4:	24000834 	.word	0x24000834

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	24000834 	.word	0x24000834

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffde 	bl	80015a8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2400000c 	.word	0x2400000c

08001608 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetREVID+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0c1b      	lsrs	r3, r3, #16
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	5c001000 	.word	0x5c001000

08001620 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001630:	4904      	ldr	r1, [pc, #16]	@ (8001644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	58000400 	.word	0x58000400

08001648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <__NVIC_SetPriorityGrouping+0x40>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	4313      	orrs	r3, r2
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <__NVIC_SetPriorityGrouping+0x40>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00
 800168c:	05fa0000 	.word	0x05fa0000

08001690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4907      	ldr	r1, [pc, #28]	@ (80016e4 <__NVIC_EnableIRQ+0x38>)
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b4:	d301      	bcc.n	80017ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00f      	b.n	80017da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <SysTick_Config+0x40>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c2:	210f      	movs	r1, #15
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f7ff ff8e 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <SysTick_Config+0x40>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <SysTick_Config+0x40>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff29 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff40 	bl	8001690 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff33 	bl	80016ac <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa4 	bl	80017a4 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fe9a 	bl	80015a8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e2dc      	b.n	8001e3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d008      	beq.n	800189e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2280      	movs	r2, #128	@ 0x80
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e2cd      	b.n	8001e3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a76      	ldr	r2, [pc, #472]	@ (8001a7c <HAL_DMA_Abort+0x214>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d04a      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a74      	ldr	r2, [pc, #464]	@ (8001a80 <HAL_DMA_Abort+0x218>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d045      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a73      	ldr	r2, [pc, #460]	@ (8001a84 <HAL_DMA_Abort+0x21c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d040      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a71      	ldr	r2, [pc, #452]	@ (8001a88 <HAL_DMA_Abort+0x220>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d03b      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a70      	ldr	r2, [pc, #448]	@ (8001a8c <HAL_DMA_Abort+0x224>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d036      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a90 <HAL_DMA_Abort+0x228>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d031      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6d      	ldr	r2, [pc, #436]	@ (8001a94 <HAL_DMA_Abort+0x22c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d02c      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6b      	ldr	r2, [pc, #428]	@ (8001a98 <HAL_DMA_Abort+0x230>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d027      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a9c <HAL_DMA_Abort+0x234>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d022      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a68      	ldr	r2, [pc, #416]	@ (8001aa0 <HAL_DMA_Abort+0x238>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01d      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a67      	ldr	r2, [pc, #412]	@ (8001aa4 <HAL_DMA_Abort+0x23c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d018      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a65      	ldr	r2, [pc, #404]	@ (8001aa8 <HAL_DMA_Abort+0x240>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a64      	ldr	r2, [pc, #400]	@ (8001aac <HAL_DMA_Abort+0x244>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00e      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a62      	ldr	r2, [pc, #392]	@ (8001ab0 <HAL_DMA_Abort+0x248>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d009      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a61      	ldr	r2, [pc, #388]	@ (8001ab4 <HAL_DMA_Abort+0x24c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <HAL_DMA_Abort+0xd6>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab8 <HAL_DMA_Abort+0x250>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_DMA_Abort+0xda>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_DMA_Abort+0xdc>
 8001942:	2300      	movs	r3, #0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 021e 	bic.w	r2, r2, #30
 8001956:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001966:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00a      	b.n	8001986 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020e 	bic.w	r2, r2, #14
 800197e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a7c <HAL_DMA_Abort+0x214>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d072      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a3a      	ldr	r2, [pc, #232]	@ (8001a80 <HAL_DMA_Abort+0x218>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d06d      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a39      	ldr	r2, [pc, #228]	@ (8001a84 <HAL_DMA_Abort+0x21c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d068      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a37      	ldr	r2, [pc, #220]	@ (8001a88 <HAL_DMA_Abort+0x220>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d063      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a36      	ldr	r2, [pc, #216]	@ (8001a8c <HAL_DMA_Abort+0x224>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d05e      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a34      	ldr	r2, [pc, #208]	@ (8001a90 <HAL_DMA_Abort+0x228>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d059      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a33      	ldr	r2, [pc, #204]	@ (8001a94 <HAL_DMA_Abort+0x22c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d054      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a31      	ldr	r2, [pc, #196]	@ (8001a98 <HAL_DMA_Abort+0x230>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d04f      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a30      	ldr	r2, [pc, #192]	@ (8001a9c <HAL_DMA_Abort+0x234>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04a      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa0 <HAL_DMA_Abort+0x238>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d045      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa4 <HAL_DMA_Abort+0x23c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d040      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa8 <HAL_DMA_Abort+0x240>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d03b      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2a      	ldr	r2, [pc, #168]	@ (8001aac <HAL_DMA_Abort+0x244>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d036      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a28      	ldr	r2, [pc, #160]	@ (8001ab0 <HAL_DMA_Abort+0x248>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d031      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <HAL_DMA_Abort+0x24c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d02c      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a25      	ldr	r2, [pc, #148]	@ (8001ab8 <HAL_DMA_Abort+0x250>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d027      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a24      	ldr	r2, [pc, #144]	@ (8001abc <HAL_DMA_Abort+0x254>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <HAL_DMA_Abort+0x258>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01d      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ac4 <HAL_DMA_Abort+0x25c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d018      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <HAL_DMA_Abort+0x260>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_DMA_Abort+0x264>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00e      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <HAL_DMA_Abort+0x268>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_DMA_Abort+0x26c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_DMA_Abort+0x20e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_DMA_Abort+0x270>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d132      	bne.n	8001adc <HAL_DMA_Abort+0x274>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e031      	b.n	8001ade <HAL_DMA_Abort+0x276>
 8001a7a:	bf00      	nop
 8001a7c:	40020010 	.word	0x40020010
 8001a80:	40020028 	.word	0x40020028
 8001a84:	40020040 	.word	0x40020040
 8001a88:	40020058 	.word	0x40020058
 8001a8c:	40020070 	.word	0x40020070
 8001a90:	40020088 	.word	0x40020088
 8001a94:	400200a0 	.word	0x400200a0
 8001a98:	400200b8 	.word	0x400200b8
 8001a9c:	40020410 	.word	0x40020410
 8001aa0:	40020428 	.word	0x40020428
 8001aa4:	40020440 	.word	0x40020440
 8001aa8:	40020458 	.word	0x40020458
 8001aac:	40020470 	.word	0x40020470
 8001ab0:	40020488 	.word	0x40020488
 8001ab4:	400204a0 	.word	0x400204a0
 8001ab8:	400204b8 	.word	0x400204b8
 8001abc:	58025408 	.word	0x58025408
 8001ac0:	5802541c 	.word	0x5802541c
 8001ac4:	58025430 	.word	0x58025430
 8001ac8:	58025444 	.word	0x58025444
 8001acc:	58025458 	.word	0x58025458
 8001ad0:	5802546c 	.word	0x5802546c
 8001ad4:	58025480 	.word	0x58025480
 8001ad8:	58025494 	.word	0x58025494
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6d      	ldr	r2, [pc, #436]	@ (8001cac <HAL_DMA_Abort+0x444>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04a      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb0 <HAL_DMA_Abort+0x448>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d045      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb4 <HAL_DMA_Abort+0x44c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a68      	ldr	r2, [pc, #416]	@ (8001cb8 <HAL_DMA_Abort+0x450>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03b      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	@ (8001cbc <HAL_DMA_Abort+0x454>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d036      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a65      	ldr	r2, [pc, #404]	@ (8001cc0 <HAL_DMA_Abort+0x458>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d031      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a64      	ldr	r2, [pc, #400]	@ (8001cc4 <HAL_DMA_Abort+0x45c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d02c      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a62      	ldr	r2, [pc, #392]	@ (8001cc8 <HAL_DMA_Abort+0x460>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d027      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a61      	ldr	r2, [pc, #388]	@ (8001ccc <HAL_DMA_Abort+0x464>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd0 <HAL_DMA_Abort+0x468>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a5e      	ldr	r2, [pc, #376]	@ (8001cd4 <HAL_DMA_Abort+0x46c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_DMA_Abort+0x470>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cdc <HAL_DMA_Abort+0x474>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a59      	ldr	r2, [pc, #356]	@ (8001ce0 <HAL_DMA_Abort+0x478>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a58      	ldr	r2, [pc, #352]	@ (8001ce4 <HAL_DMA_Abort+0x47c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort+0x32a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a56      	ldr	r2, [pc, #344]	@ (8001ce8 <HAL_DMA_Abort+0x480>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d108      	bne.n	8001ba4 <HAL_DMA_Abort+0x33c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e007      	b.n	8001bb4 <HAL_DMA_Abort+0x34c>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bb4:	e013      	b.n	8001bde <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb6:	f7ff fcf7 	bl	80015a8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d90c      	bls.n	8001bde <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e12d      	b.n	8001e3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1e5      	bne.n	8001bb6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2f      	ldr	r2, [pc, #188]	@ (8001cac <HAL_DMA_Abort+0x444>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04a      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <HAL_DMA_Abort+0x448>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d045      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb4 <HAL_DMA_Abort+0x44c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d040      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb8 <HAL_DMA_Abort+0x450>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d03b      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <HAL_DMA_Abort+0x454>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d036      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a27      	ldr	r2, [pc, #156]	@ (8001cc0 <HAL_DMA_Abort+0x458>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d031      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_DMA_Abort+0x45c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d02c      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a24      	ldr	r2, [pc, #144]	@ (8001cc8 <HAL_DMA_Abort+0x460>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d027      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a23      	ldr	r2, [pc, #140]	@ (8001ccc <HAL_DMA_Abort+0x464>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a21      	ldr	r2, [pc, #132]	@ (8001cd0 <HAL_DMA_Abort+0x468>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01d      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <HAL_DMA_Abort+0x46c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <HAL_DMA_Abort+0x470>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1d      	ldr	r2, [pc, #116]	@ (8001cdc <HAL_DMA_Abort+0x474>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_DMA_Abort+0x478>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <HAL_DMA_Abort+0x47c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_DMA_Abort+0x422>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a18      	ldr	r2, [pc, #96]	@ (8001ce8 <HAL_DMA_Abort+0x480>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Abort+0x426>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Abort+0x428>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02b      	beq.n	8001cec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	223f      	movs	r2, #63	@ 0x3f
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	e02a      	b.n	8001d02 <HAL_DMA_Abort+0x49a>
 8001cac:	40020010 	.word	0x40020010
 8001cb0:	40020028 	.word	0x40020028
 8001cb4:	40020040 	.word	0x40020040
 8001cb8:	40020058 	.word	0x40020058
 8001cbc:	40020070 	.word	0x40020070
 8001cc0:	40020088 	.word	0x40020088
 8001cc4:	400200a0 	.word	0x400200a0
 8001cc8:	400200b8 	.word	0x400200b8
 8001ccc:	40020410 	.word	0x40020410
 8001cd0:	40020428 	.word	0x40020428
 8001cd4:	40020440 	.word	0x40020440
 8001cd8:	40020458 	.word	0x40020458
 8001cdc:	40020470 	.word	0x40020470
 8001ce0:	40020488 	.word	0x40020488
 8001ce4:	400204a0 	.word	0x400204a0
 8001ce8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_DMA_Abort+0x5dc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d072      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <HAL_DMA_Abort+0x5e0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d06d      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e4c <HAL_DMA_Abort+0x5e4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d068      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	@ (8001e50 <HAL_DMA_Abort+0x5e8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d063      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a49      	ldr	r2, [pc, #292]	@ (8001e54 <HAL_DMA_Abort+0x5ec>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d05e      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a47      	ldr	r2, [pc, #284]	@ (8001e58 <HAL_DMA_Abort+0x5f0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d059      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a46      	ldr	r2, [pc, #280]	@ (8001e5c <HAL_DMA_Abort+0x5f4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d054      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a44      	ldr	r2, [pc, #272]	@ (8001e60 <HAL_DMA_Abort+0x5f8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d04f      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a43      	ldr	r2, [pc, #268]	@ (8001e64 <HAL_DMA_Abort+0x5fc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04a      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a41      	ldr	r2, [pc, #260]	@ (8001e68 <HAL_DMA_Abort+0x600>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d045      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a40      	ldr	r2, [pc, #256]	@ (8001e6c <HAL_DMA_Abort+0x604>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d040      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3e      	ldr	r2, [pc, #248]	@ (8001e70 <HAL_DMA_Abort+0x608>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d03b      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e74 <HAL_DMA_Abort+0x60c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d036      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3b      	ldr	r2, [pc, #236]	@ (8001e78 <HAL_DMA_Abort+0x610>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a3a      	ldr	r2, [pc, #232]	@ (8001e7c <HAL_DMA_Abort+0x614>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d02c      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a38      	ldr	r2, [pc, #224]	@ (8001e80 <HAL_DMA_Abort+0x618>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a37      	ldr	r2, [pc, #220]	@ (8001e84 <HAL_DMA_Abort+0x61c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a35      	ldr	r2, [pc, #212]	@ (8001e88 <HAL_DMA_Abort+0x620>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a34      	ldr	r2, [pc, #208]	@ (8001e8c <HAL_DMA_Abort+0x624>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a32      	ldr	r2, [pc, #200]	@ (8001e90 <HAL_DMA_Abort+0x628>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <HAL_DMA_Abort+0x62c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_DMA_Abort+0x630>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e9c <HAL_DMA_Abort+0x634>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_Abort+0x58a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea0 <HAL_DMA_Abort+0x638>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_DMA_Abort+0x58e>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_DMA_Abort+0x590>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40020010 	.word	0x40020010
 8001e48:	40020028 	.word	0x40020028
 8001e4c:	40020040 	.word	0x40020040
 8001e50:	40020058 	.word	0x40020058
 8001e54:	40020070 	.word	0x40020070
 8001e58:	40020088 	.word	0x40020088
 8001e5c:	400200a0 	.word	0x400200a0
 8001e60:	400200b8 	.word	0x400200b8
 8001e64:	40020410 	.word	0x40020410
 8001e68:	40020428 	.word	0x40020428
 8001e6c:	40020440 	.word	0x40020440
 8001e70:	40020458 	.word	0x40020458
 8001e74:	40020470 	.word	0x40020470
 8001e78:	40020488 	.word	0x40020488
 8001e7c:	400204a0 	.word	0x400204a0
 8001e80:	400204b8 	.word	0x400204b8
 8001e84:	58025408 	.word	0x58025408
 8001e88:	5802541c 	.word	0x5802541c
 8001e8c:	58025430 	.word	0x58025430
 8001e90:	58025444 	.word	0x58025444
 8001e94:	58025458 	.word	0x58025458
 8001e98:	5802546c 	.word	0x5802546c
 8001e9c:	58025480 	.word	0x58025480
 8001ea0:	58025494 	.word	0x58025494

08001ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e237      	b.n	8002326 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d004      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2280      	movs	r2, #128	@ 0x80
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e22c      	b.n	8002326 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8002044 <HAL_DMA_Abort_IT+0x1a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d04a      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5b      	ldr	r2, [pc, #364]	@ (8002048 <HAL_DMA_Abort_IT+0x1a4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d045      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a59      	ldr	r2, [pc, #356]	@ (800204c <HAL_DMA_Abort_IT+0x1a8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d040      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_DMA_Abort_IT+0x1ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d03b      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a56      	ldr	r2, [pc, #344]	@ (8002054 <HAL_DMA_Abort_IT+0x1b0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d036      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a55      	ldr	r2, [pc, #340]	@ (8002058 <HAL_DMA_Abort_IT+0x1b4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d031      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a53      	ldr	r2, [pc, #332]	@ (800205c <HAL_DMA_Abort_IT+0x1b8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02c      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a52      	ldr	r2, [pc, #328]	@ (8002060 <HAL_DMA_Abort_IT+0x1bc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d027      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a50      	ldr	r2, [pc, #320]	@ (8002064 <HAL_DMA_Abort_IT+0x1c0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_DMA_Abort_IT+0x1c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01d      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4d      	ldr	r2, [pc, #308]	@ (800206c <HAL_DMA_Abort_IT+0x1c8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002070 <HAL_DMA_Abort_IT+0x1cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4a      	ldr	r2, [pc, #296]	@ (8002074 <HAL_DMA_Abort_IT+0x1d0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a49      	ldr	r2, [pc, #292]	@ (8002078 <HAL_DMA_Abort_IT+0x1d4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a47      	ldr	r2, [pc, #284]	@ (800207c <HAL_DMA_Abort_IT+0x1d8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_Abort_IT+0xc8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a46      	ldr	r2, [pc, #280]	@ (8002080 <HAL_DMA_Abort_IT+0x1dc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_DMA_Abort_IT+0xcc>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_Abort_IT+0xce>
 8001f70:	2300      	movs	r3, #0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8086 	beq.w	8002084 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2f      	ldr	r2, [pc, #188]	@ (8002044 <HAL_DMA_Abort_IT+0x1a0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d04a      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <HAL_DMA_Abort_IT+0x1a4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d045      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <HAL_DMA_Abort_IT+0x1a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <HAL_DMA_Abort_IT+0x1ac>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d03b      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a29      	ldr	r2, [pc, #164]	@ (8002054 <HAL_DMA_Abort_IT+0x1b0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d036      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a28      	ldr	r2, [pc, #160]	@ (8002058 <HAL_DMA_Abort_IT+0x1b4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d031      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	@ (800205c <HAL_DMA_Abort_IT+0x1b8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02c      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <HAL_DMA_Abort_IT+0x1bc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d027      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <HAL_DMA_Abort_IT+0x1c0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_DMA_Abort_IT+0x1c4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01d      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	@ (800206c <HAL_DMA_Abort_IT+0x1c8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <HAL_DMA_Abort_IT+0x1cc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8002074 <HAL_DMA_Abort_IT+0x1d0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_DMA_Abort_IT+0x1d4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <HAL_DMA_Abort_IT+0x1d8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_DMA_Abort_IT+0x17c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_DMA_Abort_IT+0x1dc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <HAL_DMA_Abort_IT+0x18e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e178      	b.n	8002324 <HAL_DMA_Abort_IT+0x480>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e16f      	b.n	8002324 <HAL_DMA_Abort_IT+0x480>
 8002044:	40020010 	.word	0x40020010
 8002048:	40020028 	.word	0x40020028
 800204c:	40020040 	.word	0x40020040
 8002050:	40020058 	.word	0x40020058
 8002054:	40020070 	.word	0x40020070
 8002058:	40020088 	.word	0x40020088
 800205c:	400200a0 	.word	0x400200a0
 8002060:	400200b8 	.word	0x400200b8
 8002064:	40020410 	.word	0x40020410
 8002068:	40020428 	.word	0x40020428
 800206c:	40020440 	.word	0x40020440
 8002070:	40020458 	.word	0x40020458
 8002074:	40020470 	.word	0x40020470
 8002078:	40020488 	.word	0x40020488
 800207c:	400204a0 	.word	0x400204a0
 8002080:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 020e 	bic.w	r2, r2, #14
 8002092:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6c      	ldr	r2, [pc, #432]	@ (800224c <HAL_DMA_Abort_IT+0x3a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04a      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6b      	ldr	r2, [pc, #428]	@ (8002250 <HAL_DMA_Abort_IT+0x3ac>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d045      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a69      	ldr	r2, [pc, #420]	@ (8002254 <HAL_DMA_Abort_IT+0x3b0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d040      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a68      	ldr	r2, [pc, #416]	@ (8002258 <HAL_DMA_Abort_IT+0x3b4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d03b      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a66      	ldr	r2, [pc, #408]	@ (800225c <HAL_DMA_Abort_IT+0x3b8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d036      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a65      	ldr	r2, [pc, #404]	@ (8002260 <HAL_DMA_Abort_IT+0x3bc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a63      	ldr	r2, [pc, #396]	@ (8002264 <HAL_DMA_Abort_IT+0x3c0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02c      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a62      	ldr	r2, [pc, #392]	@ (8002268 <HAL_DMA_Abort_IT+0x3c4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d027      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a60      	ldr	r2, [pc, #384]	@ (800226c <HAL_DMA_Abort_IT+0x3c8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002270 <HAL_DMA_Abort_IT+0x3cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d01d      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002274 <HAL_DMA_Abort_IT+0x3d0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d018      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a5c      	ldr	r2, [pc, #368]	@ (8002278 <HAL_DMA_Abort_IT+0x3d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5a      	ldr	r2, [pc, #360]	@ (800227c <HAL_DMA_Abort_IT+0x3d8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a59      	ldr	r2, [pc, #356]	@ (8002280 <HAL_DMA_Abort_IT+0x3dc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a57      	ldr	r2, [pc, #348]	@ (8002284 <HAL_DMA_Abort_IT+0x3e0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x290>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a56      	ldr	r2, [pc, #344]	@ (8002288 <HAL_DMA_Abort_IT+0x3e4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <HAL_DMA_Abort_IT+0x2a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e007      	b.n	8002156 <HAL_DMA_Abort_IT+0x2b2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3c      	ldr	r2, [pc, #240]	@ (800224c <HAL_DMA_Abort_IT+0x3a8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d072      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3a      	ldr	r2, [pc, #232]	@ (8002250 <HAL_DMA_Abort_IT+0x3ac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d06d      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a39      	ldr	r2, [pc, #228]	@ (8002254 <HAL_DMA_Abort_IT+0x3b0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d068      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a37      	ldr	r2, [pc, #220]	@ (8002258 <HAL_DMA_Abort_IT+0x3b4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d063      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a36      	ldr	r2, [pc, #216]	@ (800225c <HAL_DMA_Abort_IT+0x3b8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d05e      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <HAL_DMA_Abort_IT+0x3bc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d059      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a33      	ldr	r2, [pc, #204]	@ (8002264 <HAL_DMA_Abort_IT+0x3c0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d054      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a31      	ldr	r2, [pc, #196]	@ (8002268 <HAL_DMA_Abort_IT+0x3c4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d04f      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a30      	ldr	r2, [pc, #192]	@ (800226c <HAL_DMA_Abort_IT+0x3c8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002270 <HAL_DMA_Abort_IT+0x3cc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2d      	ldr	r2, [pc, #180]	@ (8002274 <HAL_DMA_Abort_IT+0x3d0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002278 <HAL_DMA_Abort_IT+0x3d4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2a      	ldr	r2, [pc, #168]	@ (800227c <HAL_DMA_Abort_IT+0x3d8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	@ (8002280 <HAL_DMA_Abort_IT+0x3dc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a27      	ldr	r2, [pc, #156]	@ (8002284 <HAL_DMA_Abort_IT+0x3e0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	@ (8002288 <HAL_DMA_Abort_IT+0x3e4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a24      	ldr	r2, [pc, #144]	@ (800228c <HAL_DMA_Abort_IT+0x3e8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_DMA_Abort_IT+0x3ec>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a21      	ldr	r2, [pc, #132]	@ (8002294 <HAL_DMA_Abort_IT+0x3f0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <HAL_DMA_Abort_IT+0x3f4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <HAL_DMA_Abort_IT+0x3f8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <HAL_DMA_Abort_IT+0x3fc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <HAL_DMA_Abort_IT+0x400>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Abort_IT+0x3a2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_DMA_Abort_IT+0x404>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d132      	bne.n	80022ac <HAL_DMA_Abort_IT+0x408>
 8002246:	2301      	movs	r3, #1
 8002248:	e031      	b.n	80022ae <HAL_DMA_Abort_IT+0x40a>
 800224a:	bf00      	nop
 800224c:	40020010 	.word	0x40020010
 8002250:	40020028 	.word	0x40020028
 8002254:	40020040 	.word	0x40020040
 8002258:	40020058 	.word	0x40020058
 800225c:	40020070 	.word	0x40020070
 8002260:	40020088 	.word	0x40020088
 8002264:	400200a0 	.word	0x400200a0
 8002268:	400200b8 	.word	0x400200b8
 800226c:	40020410 	.word	0x40020410
 8002270:	40020428 	.word	0x40020428
 8002274:	40020440 	.word	0x40020440
 8002278:	40020458 	.word	0x40020458
 800227c:	40020470 	.word	0x40020470
 8002280:	40020488 	.word	0x40020488
 8002284:	400204a0 	.word	0x400204a0
 8002288:	400204b8 	.word	0x400204b8
 800228c:	58025408 	.word	0x58025408
 8002290:	5802541c 	.word	0x5802541c
 8002294:	58025430 	.word	0x58025430
 8002298:	58025444 	.word	0x58025444
 800229c:	58025458 	.word	0x58025458
 80022a0:	5802546c 	.word	0x5802546c
 80022a4:	58025480 	.word	0x58025480
 80022a8:	58025494 	.word	0x58025494
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d028      	beq.n	8002304 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2201      	movs	r2, #1
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002302:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop

08002330 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0e3      	b.n	800250a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2223      	movs	r2, #35	@ 0x23
 8002350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe fce7 	bl	8000d28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b6e      	ldr	r3, [pc, #440]	@ (8002514 <HAL_ETH_Init+0x1e4>)
 800235c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002360:	4a6c      	ldr	r2, [pc, #432]	@ (8002514 <HAL_ETH_Init+0x1e4>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800236a:	4b6a      	ldr	r3, [pc, #424]	@ (8002514 <HAL_ETH_Init+0x1e4>)
 800236c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7a1b      	ldrb	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff f94d 	bl	8001620 <HAL_SYSCFG_ETHInterfaceSelect>
 8002386:	e003      	b.n	8002390 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002388:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800238c:	f7ff f948 	bl	8001620 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002390:	4b61      	ldr	r3, [pc, #388]	@ (8002518 <HAL_ETH_Init+0x1e8>)
 8002392:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7ff f8fc 	bl	80015a8 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80023b2:	e011      	b.n	80023d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023b4:	f7ff f8f8 	bl	80015a8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023c2:	d909      	bls.n	80023d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2204      	movs	r2, #4
 80023c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	22e0      	movs	r2, #224	@ 0xe0
 80023d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e098      	b.n	800250a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e4      	bne.n	80023b4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f89e 	bl	800252c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80023f0:	f002 fca2 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a49      	ldr	r2, [pc, #292]	@ (800251c <HAL_ETH_Init+0x1ec>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0c9a      	lsrs	r2, r3, #18
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3a01      	subs	r2, #1
 8002404:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fa81 	bl	8002910 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002416:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800241a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002426:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800242a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	22e0      	movs	r2, #224	@ 0xe0
 8002446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e05d      	b.n	800250a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002456:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800245a:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <HAL_ETH_Init+0x1f0>)
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6952      	ldr	r2, [r2, #20]
 8002462:	0051      	lsls	r1, r2, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800246e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fae9 	bl	8002a4a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fb2f 	bl	8002adc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	3305      	adds	r3, #5
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	021a      	lsls	r2, r3, #8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	3303      	adds	r3, #3
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	061a      	lsls	r2, r3, #24
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	3302      	adds	r3, #2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024cc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_ETH_Init+0x1f4>)
 80024de:	430b      	orrs	r3, r1
 80024e0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <HAL_ETH_Init+0x1f8>)
 80024f2:	430b      	orrs	r3, r1
 80024f4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2210      	movs	r2, #16
 8002504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	58024400 	.word	0x58024400
 8002518:	58000400 	.word	0x58000400
 800251c:	431bde83 	.word	0x431bde83
 8002520:	ffff8001 	.word	0xffff8001
 8002524:	0c020060 	.word	0x0c020060
 8002528:	0c20c000 	.word	0x0c20c000

0800252c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800253c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002544:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002546:	f002 fbf7 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 800254a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d804      	bhi.n	800255e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e022      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4a16      	ldr	r2, [pc, #88]	@ (80025bc <HAL_ETH_SetMDIOClockRange+0x90>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d204      	bcs.n	8002570 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e019      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4a13      	ldr	r2, [pc, #76]	@ (80025c0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d915      	bls.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d804      	bhi.n	800258a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e00c      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a0e      	ldr	r2, [pc, #56]	@ (80025c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d804      	bhi.n	800259c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e003      	b.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	02160ebf 	.word	0x02160ebf
 80025bc:	03938700 	.word	0x03938700
 80025c0:	05f5e0ff 	.word	0x05f5e0ff
 80025c4:	08f0d17f 	.word	0x08f0d17f
 80025c8:	0ee6b27f 	.word	0x0ee6b27f

080025cc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80025de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80025e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7b5b      	ldrb	r3, [r3, #13]
 80025f4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	7b9b      	ldrb	r3, [r3, #14]
 80025fc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7bdb      	ldrb	r3, [r3, #15]
 8002604:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002606:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	7c12      	ldrb	r2, [r2, #16]
 800260c:	2a00      	cmp	r2, #0
 800260e:	d102      	bne.n	8002616 <ETH_SetMACConfig+0x4a>
 8002610:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002614:	e000      	b.n	8002618 <ETH_SetMACConfig+0x4c>
 8002616:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002618:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	7c52      	ldrb	r2, [r2, #17]
 800261e:	2a00      	cmp	r2, #0
 8002620:	d102      	bne.n	8002628 <ETH_SetMACConfig+0x5c>
 8002622:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002626:	e000      	b.n	800262a <ETH_SetMACConfig+0x5e>
 8002628:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800262a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	7c9b      	ldrb	r3, [r3, #18]
 8002630:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002632:	431a      	orrs	r2, r3
               macconf->Speed |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002638:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800263e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7f1b      	ldrb	r3, [r3, #28]
 8002644:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7f5b      	ldrb	r3, [r3, #29]
 800264c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800264e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	7f92      	ldrb	r2, [r2, #30]
 8002654:	2a00      	cmp	r2, #0
 8002656:	d102      	bne.n	800265e <ETH_SetMACConfig+0x92>
 8002658:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800265c:	e000      	b.n	8002660 <ETH_SetMACConfig+0x94>
 800265e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002660:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7fdb      	ldrb	r3, [r3, #31]
 8002666:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002668:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002670:	2a00      	cmp	r2, #0
 8002672:	d102      	bne.n	800267a <ETH_SetMACConfig+0xae>
 8002674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002678:	e000      	b.n	800267c <ETH_SetMACConfig+0xb0>
 800267a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800267c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800268a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800268c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b56      	ldr	r3, [pc, #344]	@ (80027f8 <ETH_SetMACConfig+0x22c>)
 800269e:	4013      	ands	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026b6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026c0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80026ca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	d102      	bne.n	80026de <ETH_SetMACConfig+0x112>
 80026d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026dc:	e000      	b.n	80026e0 <ETH_SetMACConfig+0x114>
 80026de:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026e0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4b42      	ldr	r3, [pc, #264]	@ (80027fc <ETH_SetMACConfig+0x230>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002704:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b3a      	ldr	r3, [pc, #232]	@ (8002800 <ETH_SetMACConfig+0x234>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002728:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800272e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002736:	2a00      	cmp	r2, #0
 8002738:	d101      	bne.n	800273e <ETH_SetMACConfig+0x172>
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	e000      	b.n	8002740 <ETH_SetMACConfig+0x174>
 800273e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002740:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002746:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002752:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002756:	4013      	ands	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	68f9      	ldr	r1, [r7, #12]
 800275e:	430b      	orrs	r3, r1
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002768:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002770:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f023 0103 	bic.w	r1, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	430a      	orrs	r2, r1
 800278a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002796:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	d101      	bne.n	80027ba <ETH_SetMACConfig+0x1ee>
 80027b6:	2240      	movs	r2, #64	@ 0x40
 80027b8:	e000      	b.n	80027bc <ETH_SetMACConfig+0x1f0>
 80027ba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80027bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80027c4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80027ce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80027dc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	00048083 	.word	0x00048083
 80027fc:	c0f88000 	.word	0xc0f88000
 8002800:	fffffef0 	.word	0xfffffef0

08002804 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b38      	ldr	r3, [pc, #224]	@ (80028fc <ETH_SetDMAConfig+0xf8>)
 800281a:	4013      	ands	r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	6811      	ldr	r1, [r2, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800282a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002836:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	7b1b      	ldrb	r3, [r3, #12]
 800283c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <ETH_SetDMAConfig+0xfc>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	430b      	orrs	r3, r1
 8002858:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800285c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7b5b      	ldrb	r3, [r3, #13]
 8002862:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002874:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002878:	4b22      	ldr	r3, [pc, #136]	@ (8002904 <ETH_SetDMAConfig+0x100>)
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	430b      	orrs	r3, r1
 8002884:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002888:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	7d1b      	ldrb	r3, [r3, #20]
 8002894:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002896:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	7f5b      	ldrb	r3, [r3, #29]
 800289c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80028ae:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <ETH_SetDMAConfig+0x104>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	68f9      	ldr	r1, [r7, #12]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	7f1b      	ldrb	r3, [r3, #28]
 80028c6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <ETH_SetDMAConfig+0x108>)
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	430b      	orrs	r3, r1
 80028e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028ec:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	ffff87fd 	.word	0xffff87fd
 8002900:	ffff2ffe 	.word	0xffff2ffe
 8002904:	fffec000 	.word	0xfffec000
 8002908:	ffc0efef 	.word	0xffc0efef
 800290c:	7fc0ffff 	.word	0x7fc0ffff

08002910 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0a4      	sub	sp, #144	@ 0x90
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800291e:	2300      	movs	r3, #0
 8002920:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800294c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002950:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002958:	2300      	movs	r3, #0
 800295a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002968:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800296c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002974:	2300      	movs	r3, #0
 8002976:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800298a:	2300      	movs	r3, #0
 800298c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800298e:	2300      	movs	r3, #0
 8002990:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002992:	2300      	movs	r3, #0
 8002994:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029a8:	2320      	movs	r3, #32
 80029aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029ba:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029c4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80029ea:	2300      	movs	r3, #0
 80029ec:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fde6 	bl	80025cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a1a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a28:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a30:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002a34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fee1 	bl	8002804 <ETH_SetDMAConfig>
}
 8002a42:	bf00      	nop
 8002a44:	3790      	adds	r7, #144	@ 0x90
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e01d      	b.n	8002a94 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68d9      	ldr	r1, [r3, #12]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2200      	movs	r2, #0
 8002a74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	3206      	adds	r2, #6
 8002a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3301      	adds	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d9de      	bls.n	8002a58 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2303      	movs	r3, #3
 8002aac:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002abc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002acc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e023      	b.n	8002b32 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	3212      	adds	r2, #18
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d9d8      	bls.n	8002aea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2303      	movs	r3, #3
 8002b62:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b72:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b86:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	@ 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ba6:	4b89      	ldr	r3, [pc, #548]	@ (8002dcc <HAL_GPIO_Init+0x234>)
 8002ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002baa:	e194      	b.n	8002ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8186 	beq.w	8002ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d005      	beq.n	8002bdc <HAL_GPIO_Init+0x44>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d130      	bne.n	8002c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c12:	2201      	movs	r2, #1
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0201 	and.w	r2, r3, #1
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d017      	beq.n	8002c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d123      	bne.n	8002cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3208      	adds	r2, #8
 8002cc8:	69b9      	ldr	r1, [r7, #24]
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0203 	and.w	r2, r3, #3
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80e0 	beq.w	8002ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d10:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd0 <HAL_GPIO_Init+0x238>)
 8002d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d16:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <HAL_GPIO_Init+0x238>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_GPIO_Init+0x238>)
 8002d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2e:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <HAL_GPIO_Init+0x23c>)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a20      	ldr	r2, [pc, #128]	@ (8002dd8 <HAL_GPIO_Init+0x240>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d052      	beq.n	8002e00 <HAL_GPIO_Init+0x268>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ddc <HAL_GPIO_Init+0x244>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d031      	beq.n	8002dc6 <HAL_GPIO_Init+0x22e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1e      	ldr	r2, [pc, #120]	@ (8002de0 <HAL_GPIO_Init+0x248>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02b      	beq.n	8002dc2 <HAL_GPIO_Init+0x22a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <HAL_GPIO_Init+0x24c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d025      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1c      	ldr	r2, [pc, #112]	@ (8002de8 <HAL_GPIO_Init+0x250>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01f      	beq.n	8002dba <HAL_GPIO_Init+0x222>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <HAL_GPIO_Init+0x254>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d019      	beq.n	8002db6 <HAL_GPIO_Init+0x21e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1a      	ldr	r2, [pc, #104]	@ (8002df0 <HAL_GPIO_Init+0x258>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	@ (8002df4 <HAL_GPIO_Init+0x25c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00d      	beq.n	8002dae <HAL_GPIO_Init+0x216>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <HAL_GPIO_Init+0x260>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d007      	beq.n	8002daa <HAL_GPIO_Init+0x212>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_GPIO_Init+0x264>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_GPIO_Init+0x20e>
 8002da2:	2309      	movs	r3, #9
 8002da4:	e02d      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002da6:	230a      	movs	r3, #10
 8002da8:	e02b      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002daa:	2308      	movs	r3, #8
 8002dac:	e029      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e027      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002db2:	2306      	movs	r3, #6
 8002db4:	e025      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002db6:	2305      	movs	r3, #5
 8002db8:	e023      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e021      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e01f      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e01d      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01b      	b.n	8002e02 <HAL_GPIO_Init+0x26a>
 8002dca:	bf00      	nop
 8002dcc:	58000080 	.word	0x58000080
 8002dd0:	58024400 	.word	0x58024400
 8002dd4:	58000400 	.word	0x58000400
 8002dd8:	58020000 	.word	0x58020000
 8002ddc:	58020400 	.word	0x58020400
 8002de0:	58020800 	.word	0x58020800
 8002de4:	58020c00 	.word	0x58020c00
 8002de8:	58021000 	.word	0x58021000
 8002dec:	58021400 	.word	0x58021400
 8002df0:	58021800 	.word	0x58021800
 8002df4:	58021c00 	.word	0x58021c00
 8002df8:	58022000 	.word	0x58022000
 8002dfc:	58022400 	.word	0x58022400
 8002e00:	2300      	movs	r3, #0
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	f002 0203 	and.w	r2, r2, #3
 8002e08:	0092      	lsls	r2, r2, #2
 8002e0a:	4093      	lsls	r3, r2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e12:	4938      	ldr	r1, [pc, #224]	@ (8002ef4 <HAL_GPIO_Init+0x35c>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f ae63 	bne.w	8002bac <HAL_GPIO_Init+0x14>
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
 8002eea:	3724      	adds	r7, #36	@ 0x24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	58000400 	.word	0x58000400

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fe3d 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e08b      	b.n	800308a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd ff9c 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	e006      	b.n	8002fe8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d108      	bne.n	8003002 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e007      	b.n	8003012 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <HAL_I2C_Init+0x134>)
 800301e:	430b      	orrs	r3, r1
 8003020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	02008000 	.word	0x02008000

08003098 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	461a      	mov	r2, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	817b      	strh	r3, [r7, #10]
 80030a8:	4613      	mov	r3, r2
 80030aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	f040 80fd 	bne.w	80032b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2C_Master_Transmit+0x30>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0f6      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x21e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030d0:	f7fe fa6a 	bl	80015a8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2319      	movs	r3, #25
 80030dc:	2201      	movs	r2, #1
 80030de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa0a 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0e1      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2221      	movs	r2, #33	@ 0x21
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2210      	movs	r2, #16
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	893a      	ldrh	r2, [r7, #8]
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	2bff      	cmp	r3, #255	@ 0xff
 8003122:	d906      	bls.n	8003132 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	22ff      	movs	r2, #255	@ 0xff
 8003128:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800312a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e007      	b.n	8003142 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800313c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003140:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d024      	beq.n	8003194 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3301      	adds	r3, #1
 8003182:	b2da      	uxtb	r2, r3
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	4b4e      	ldr	r3, [pc, #312]	@ (80032c0 <HAL_I2C_Master_Transmit+0x228>)
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fc05 	bl	800399c <I2C_TransferConfig>
 8003192:	e066      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	8979      	ldrh	r1, [r7, #10]
 800319c:	4b48      	ldr	r3, [pc, #288]	@ (80032c0 <HAL_I2C_Master_Transmit+0x228>)
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fbfa 	bl	800399c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031a8:	e05b      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	6a39      	ldr	r1, [r7, #32]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f9fd 	bl	80035ae <I2C_WaitOnTXISFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07b      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d034      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x1ca>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d130      	bne.n	8003262 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2200      	movs	r2, #0
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f976 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e04d      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2bff      	cmp	r3, #255	@ 0xff
 8003222:	d90e      	bls.n	8003242 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	@ 0xff
 8003228:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322e:	b2da      	uxtb	r2, r3
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fbae 	bl	800399c <I2C_TransferConfig>
 8003240:	e00f      	b.n	8003262 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fb9d 	bl	800399c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d19e      	bne.n	80031aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f9e3 	bl	800363c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01a      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_I2C_Master_Transmit+0x22c>)
 8003294:	400b      	ands	r3, r1
 8003296:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	80002000 	.word	0x80002000
 80032c4:	fe00e800 	.word	0xfe00e800

080032c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
 80032d8:	4613      	mov	r3, r2
 80032da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	f040 80db 	bne.w	80034a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2C_Master_Receive+0x30>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0d4      	b.n	80034a2 <HAL_I2C_Master_Receive+0x1da>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003300:	f7fe f952 	bl	80015a8 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2319      	movs	r3, #25
 800330c:	2201      	movs	r2, #1
 800330e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8f2 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0bf      	b.n	80034a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2222      	movs	r2, #34	@ 0x22
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2210      	movs	r2, #16
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	893a      	ldrh	r2, [r7, #8]
 8003342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2bff      	cmp	r3, #255	@ 0xff
 8003352:	d90e      	bls.n	8003372 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22ff      	movs	r2, #255	@ 0xff
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	b2da      	uxtb	r2, r3
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	4b52      	ldr	r3, [pc, #328]	@ (80034ac <HAL_I2C_Master_Receive+0x1e4>)
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fb16 	bl	800399c <I2C_TransferConfig>
 8003370:	e06d      	b.n	800344e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	4b49      	ldr	r3, [pc, #292]	@ (80034ac <HAL_I2C_Master_Receive+0x1e4>)
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fb05 	bl	800399c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003392:	e05c      	b.n	800344e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	6a39      	ldr	r1, [r7, #32]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f993 	bl	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e07c      	b.n	80034a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d034      	beq.n	800344e <HAL_I2C_Master_Receive+0x186>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d130      	bne.n	800344e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	@ 0x80
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f880 	bl	80034fc <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e04d      	b.n	80034a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2bff      	cmp	r3, #255	@ 0xff
 800340e:	d90e      	bls.n	800342e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	b2da      	uxtb	r2, r3
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fab8 	bl	800399c <I2C_TransferConfig>
 800342c:	e00f      	b.n	800344e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	b2da      	uxtb	r2, r3
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 faa7 	bl	800399c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d19d      	bne.n	8003394 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	6a39      	ldr	r1, [r7, #32]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f8ed 	bl	800363c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01a      	b.n	80034a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2220      	movs	r2, #32
 8003472:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <HAL_I2C_Master_Receive+0x1e8>)
 8003480:	400b      	ands	r3, r1
 8003482:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	80002400 	.word	0x80002400
 80034b0:	fe00e800 	.word	0xfe00e800

080034b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d103      	bne.n	80034d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d007      	beq.n	80034f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	619a      	str	r2, [r3, #24]
  }
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350c:	e03b      	b.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f962 	bl	80037dc <I2C_IsErrorOccurred>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d02d      	beq.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe f83d 	bl	80015a8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x44>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d122      	bne.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	429a      	cmp	r2, r3
 800355c:	d113      	bne.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e00f      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4013      	ands	r3, r2
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d0b4      	beq.n	800350e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ba:	e033      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f90b 	bl	80037dc <I2C_IsErrorOccurred>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e031      	b.n	8003634 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d025      	beq.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d8:	f7fd ffe6 	bl	80015a8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11a      	bne.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d013      	beq.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e007      	b.n	8003634 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d1c4      	bne.n	80035bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003648:	e02f      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8c4 	bl	80037dc <I2C_IsErrorOccurred>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e02d      	b.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fd ffa3 	bl	80015a8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11a      	bne.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d013      	beq.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d1c8      	bne.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036d4:	e071      	b.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f87e 	bl	80037dc <I2C_IsErrorOccurred>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d13b      	bne.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d138      	bne.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d105      	bne.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b10      	cmp	r3, #16
 8003724:	d121      	bne.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2204      	movs	r2, #4
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003748:	400b      	ands	r3, r1
 800374a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
 8003768:	e002      	b.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003770:	f7fd ff1a 	bl	80015a8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d119      	bne.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d00f      	beq.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d002      	beq.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d083      	beq.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	fe00e800 	.word	0xfe00e800

080037dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d068      	beq.n	80038da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2210      	movs	r2, #16
 800380e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003810:	e049      	b.n	80038a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d045      	beq.n	80038a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fd fec5 	bl	80015a8 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_IsErrorOccurred+0x54>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d13a      	bne.n	80038a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003842:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003852:	d121      	bne.n	8003898 <I2C_IsErrorOccurred+0xbc>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800385a:	d01d      	beq.n	8003898 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	2b20      	cmp	r3, #32
 8003860:	d01a      	beq.n	8003898 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003870:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003872:	f7fd fe99 	bl	80015a8 <HAL_GetTick>
 8003876:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003878:	e00e      	b.n	8003898 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800387a:	f7fd fe95 	bl	80015a8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b19      	cmp	r3, #25
 8003886:	d907      	bls.n	8003898 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f043 0320 	orr.w	r3, r3, #32
 800388e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003896:	e006      	b.n	80038a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d1e9      	bne.n	800387a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d003      	beq.n	80038bc <I2C_IsErrorOccurred+0xe0>
 80038b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0aa      	beq.n	8003812 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2220      	movs	r2, #32
 80038ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f043 0308 	orr.w	r3, r3, #8
 8003914:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800391e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003940:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01c      	beq.n	800398a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff fdaf 	bl	80034b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <I2C_IsErrorOccurred+0x1bc>)
 8003962:	400b      	ands	r3, r1
 8003964:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800398a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800398e:	4618      	mov	r0, r3
 8003990:	3728      	adds	r7, #40	@ 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	fe00e800 	.word	0xfe00e800

0800399c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	817b      	strh	r3, [r7, #10]
 80039aa:	4613      	mov	r3, r2
 80039ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039b4:	7a7b      	ldrb	r3, [r7, #9]
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	0d5b      	lsrs	r3, r3, #21
 80039d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <I2C_TransferConfig+0x60>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	43db      	mvns	r3, r3
 80039e0:	ea02 0103 	and.w	r1, r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	03ff63ff 	.word	0x03ff63ff

08003a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d138      	bne.n	8003a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e032      	b.n	8003a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	@ 0x24
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d139      	bne.n	8003b20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e033      	b.n	8003b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2224      	movs	r2, #36	@ 0x24
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ae8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af02      	add	r7, sp, #8
 8003b34:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0fe      	b.n	8003d3e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7fd fb31 	bl	80011bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f005 f8f0 	bl	8008d4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7c1a      	ldrb	r2, [r3, #16]
 8003b74:	f88d 2000 	strb.w	r2, [sp]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7c:	f005 f874 	bl	8008c68 <USB_CoreInit>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e0d5      	b.n	8003d3e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f005 f8e8 	bl	8008d6e <USB_SetCurrentMode>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0c6      	b.n	8003d3e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e04a      	b.n	8003c4c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3315      	adds	r3, #21
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	3314      	adds	r3, #20
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	b298      	uxth	r0, r3
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	332e      	adds	r3, #46	@ 0x2e
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3318      	adds	r3, #24
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	331c      	adds	r3, #28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3320      	adds	r3, #32
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3324      	adds	r3, #36	@ 0x24
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	791b      	ldrb	r3, [r3, #4]
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3af      	bcc.n	8003bb6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e044      	b.n	8003ce6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	791b      	ldrb	r3, [r3, #4]
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3b5      	bcc.n	8003c5c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7c1a      	ldrb	r2, [r3, #16]
 8003cf8:	f88d 2000 	strb.w	r2, [sp]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d00:	f005 f882 	bl	8008e08 <USB_DevInit>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e013      	b.n	8003d3e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7b1b      	ldrb	r3, [r3, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f80b 	bl	8003d48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 fa3d 	bl	80091b6 <USB_DevDisconnect>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_PCDEx_ActivateLPM+0x44>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	10000003 	.word	0x10000003

08003d90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d98:	4b19      	ldr	r3, [pc, #100]	@ (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d00a      	beq.n	8003dba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003da4:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e01f      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e01d      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 0207 	bic.w	r2, r3, #7
 8003dc2:	490f      	ldr	r1, [pc, #60]	@ (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003dca:	f7fd fbed 	bl	80015a8 <HAL_GetTick>
 8003dce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dd0:	e009      	b.n	8003de6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dd2:	f7fd fbe9 	bl	80015a8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003de0:	d901      	bls.n	8003de6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_PWREx_ConfigSupply+0x70>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	58024800 	.word	0x58024800

08003e04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003e08:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a04      	ldr	r2, [pc, #16]	@ (8003e20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	58024800 	.word	0x58024800

08003e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08c      	sub	sp, #48	@ 0x30
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f000 bc48 	b.w	80046c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8088 	beq.w	8003f56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	4b99      	ldr	r3, [pc, #612]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e50:	4b96      	ldr	r3, [pc, #600]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d007      	beq.n	8003e6c <HAL_RCC_OscConfig+0x48>
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	2b18      	cmp	r3, #24
 8003e60:	d111      	bne.n	8003e86 <HAL_RCC_OscConfig+0x62>
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d06d      	beq.n	8003f54 <HAL_RCC_OscConfig+0x130>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d169      	bne.n	8003f54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f000 bc21 	b.w	80046c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x7a>
 8003e90:	4b86      	ldr	r3, [pc, #536]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a85      	ldr	r2, [pc, #532]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	e02e      	b.n	8003efc <HAL_RCC_OscConfig+0xd8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x9c>
 8003ea6:	4b81      	ldr	r3, [pc, #516]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a80      	ldr	r2, [pc, #512]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e01d      	b.n	8003efc <HAL_RCC_OscConfig+0xd8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xc0>
 8003eca:	4b78      	ldr	r3, [pc, #480]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a77      	ldr	r2, [pc, #476]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b75      	ldr	r3, [pc, #468]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a74      	ldr	r2, [pc, #464]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0xd8>
 8003ee4:	4b71      	ldr	r3, [pc, #452]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a70      	ldr	r2, [pc, #448]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b6e      	ldr	r3, [pc, #440]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd fb50 	bl	80015a8 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fd fb4c 	bl	80015a8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	@ 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e3d4      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f1e:	4b63      	ldr	r3, [pc, #396]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0xe8>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fb3c 	bl	80015a8 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd fb38 	bl	80015a8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e3c0      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f46:	4b59      	ldr	r3, [pc, #356]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x110>
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80ca 	beq.w	80040f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f64:	4b51      	ldr	r3, [pc, #324]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_RCC_OscConfig+0x166>
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	2b18      	cmp	r3, #24
 8003f7e:	d156      	bne.n	800402e <HAL_RCC_OscConfig+0x20a>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d151      	bne.n	800402e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8a:	4b48      	ldr	r3, [pc, #288]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x17e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e392      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fa2:	4b42      	ldr	r3, [pc, #264]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 0219 	bic.w	r2, r3, #25
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	493f      	ldr	r1, [pc, #252]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd faf8 	bl	80015a8 <HAL_GetTick>
 8003fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fbc:	f7fd faf4 	bl	80015a8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e37c      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fce:	4b37      	ldr	r3, [pc, #220]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	f7fd fb15 	bl	8001608 <HAL_GetREVID>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d817      	bhi.n	8004018 <HAL_RCC_OscConfig+0x1f4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d108      	bne.n	8004002 <HAL_RCC_OscConfig+0x1de>
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8003ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	e07a      	b.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	031b      	lsls	r3, r3, #12
 8004010:	4926      	ldr	r1, [pc, #152]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004016:	e06f      	b.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004018:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	4921      	ldr	r1, [pc, #132]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402c:	e064      	b.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d047      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004036:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 0219 	bic.w	r2, r3, #25
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	491a      	ldr	r1, [pc, #104]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd faae 	bl	80015a8 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004050:	f7fd faaa 	bl	80015a8 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e332      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004062:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	f7fd facb 	bl	8001608 <HAL_GetREVID>
 8004072:	4603      	mov	r3, r0
 8004074:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004078:	4293      	cmp	r3, r2
 800407a:	d819      	bhi.n	80040b0 <HAL_RCC_OscConfig+0x28c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d108      	bne.n	8004096 <HAL_RCC_OscConfig+0x272>
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800408c:	4a07      	ldr	r2, [pc, #28]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e030      	b.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
 8004096:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	031b      	lsls	r3, r3, #12
 80040a4:	4901      	ldr	r1, [pc, #4]	@ (80040ac <HAL_RCC_OscConfig+0x288>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
 80040aa:	e025      	b.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
 80040ac:	58024400 	.word	0x58024400
 80040b0:	4b9a      	ldr	r3, [pc, #616]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	4997      	ldr	r1, [pc, #604]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b95      	ldr	r3, [pc, #596]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a94      	ldr	r2, [pc, #592]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fd fa69 	bl	80015a8 <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040da:	f7fd fa65 	bl	80015a8 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e2ed      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040ec:	4b8b      	ldr	r3, [pc, #556]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a9 	beq.w	8004258 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004106:	4b85      	ldr	r3, [pc, #532]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800410e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004110:	4b82      	ldr	r3, [pc, #520]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d007      	beq.n	800412c <HAL_RCC_OscConfig+0x308>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b18      	cmp	r3, #24
 8004120:	d13a      	bne.n	8004198 <HAL_RCC_OscConfig+0x374>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d135      	bne.n	8004198 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800412c:	4b7b      	ldr	r3, [pc, #492]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x320>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b80      	cmp	r3, #128	@ 0x80
 800413e:	d001      	beq.n	8004144 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e2c1      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004144:	f7fd fa60 	bl	8001608 <HAL_GetREVID>
 8004148:	4603      	mov	r3, r0
 800414a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800414e:	4293      	cmp	r3, r2
 8004150:	d817      	bhi.n	8004182 <HAL_RCC_OscConfig+0x35e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	2b20      	cmp	r3, #32
 8004158:	d108      	bne.n	800416c <HAL_RCC_OscConfig+0x348>
 800415a:	4b70      	ldr	r3, [pc, #448]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004162:	4a6e      	ldr	r2, [pc, #440]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004168:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800416a:	e075      	b.n	8004258 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800416c:	4b6b      	ldr	r3, [pc, #428]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	069b      	lsls	r3, r3, #26
 800417a:	4968      	ldr	r1, [pc, #416]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004180:	e06a      	b.n	8004258 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004182:	4b66      	ldr	r3, [pc, #408]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	4962      	ldr	r1, [pc, #392]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004196:	e05f      	b.n	8004258 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d042      	beq.n	8004226 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041a0:	4b5e      	ldr	r3, [pc, #376]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80041a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd f9fc 	bl	80015a8 <HAL_GetTick>
 80041b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041b4:	f7fd f9f8 	bl	80015a8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e280      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041c6:	4b55      	ldr	r3, [pc, #340]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041d2:	f7fd fa19 	bl	8001608 <HAL_GetREVID>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041dc:	4293      	cmp	r3, r2
 80041de:	d817      	bhi.n	8004210 <HAL_RCC_OscConfig+0x3ec>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d108      	bne.n	80041fa <HAL_RCC_OscConfig+0x3d6>
 80041e8:	4b4c      	ldr	r3, [pc, #304]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041f0:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80041f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041f6:	6053      	str	r3, [r2, #4]
 80041f8:	e02e      	b.n	8004258 <HAL_RCC_OscConfig+0x434>
 80041fa:	4b48      	ldr	r3, [pc, #288]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	069b      	lsls	r3, r3, #26
 8004208:	4944      	ldr	r1, [pc, #272]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
 800420e:	e023      	b.n	8004258 <HAL_RCC_OscConfig+0x434>
 8004210:	4b42      	ldr	r3, [pc, #264]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	493f      	ldr	r1, [pc, #252]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	60cb      	str	r3, [r1, #12]
 8004224:	e018      	b.n	8004258 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004226:	4b3d      	ldr	r3, [pc, #244]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3c      	ldr	r2, [pc, #240]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800422c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd f9b9 	bl	80015a8 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800423a:	f7fd f9b5 	bl	80015a8 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e23d      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800424c:	4b33      	ldr	r3, [pc, #204]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d036      	beq.n	80042d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d019      	beq.n	80042a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426c:	4b2b      	ldr	r3, [pc, #172]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800426e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004270:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fd f996 	bl	80015a8 <HAL_GetTick>
 800427c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fd f992 	bl	80015a8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e21a      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004292:	4b22      	ldr	r3, [pc, #136]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x45c>
 800429e:	e018      	b.n	80042d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b1e      	ldr	r3, [pc, #120]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80042a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd f97c 	bl	80015a8 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fd f978 	bl	80015a8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e200      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d039      	beq.n	8004352 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01c      	beq.n	8004320 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042f2:	f7fd f959 	bl	80015a8 <HAL_GetTick>
 80042f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042fa:	f7fd f955 	bl	80015a8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e1dd      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800430c:	4b03      	ldr	r3, [pc, #12]	@ (800431c <HAL_RCC_OscConfig+0x4f8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x4d6>
 8004318:	e01b      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004320:	4b9b      	ldr	r3, [pc, #620]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a9a      	ldr	r2, [pc, #616]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800432a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800432c:	f7fd f93c 	bl	80015a8 <HAL_GetTick>
 8004330:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fd f938 	bl	80015a8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e1c0      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004346:	4b92      	ldr	r3, [pc, #584]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8081 	beq.w	8004462 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004360:	4b8c      	ldr	r3, [pc, #560]	@ (8004594 <HAL_RCC_OscConfig+0x770>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a8b      	ldr	r2, [pc, #556]	@ (8004594 <HAL_RCC_OscConfig+0x770>)
 8004366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800436a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800436c:	f7fd f91c 	bl	80015a8 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004374:	f7fd f918 	bl	80015a8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1a0      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004386:	4b83      	ldr	r3, [pc, #524]	@ (8004594 <HAL_RCC_OscConfig+0x770>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d106      	bne.n	80043a8 <HAL_RCC_OscConfig+0x584>
 800439a:	4b7d      	ldr	r3, [pc, #500]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	4a7c      	ldr	r2, [pc, #496]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a6:	e02d      	b.n	8004404 <HAL_RCC_OscConfig+0x5e0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <HAL_RCC_OscConfig+0x5a6>
 80043b0:	4b77      	ldr	r3, [pc, #476]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b4:	4a76      	ldr	r2, [pc, #472]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80043bc:	4b74      	ldr	r3, [pc, #464]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	4a73      	ldr	r2, [pc, #460]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c8:	e01c      	b.n	8004404 <HAL_RCC_OscConfig+0x5e0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x5c8>
 80043d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043de:	4b6c      	ldr	r3, [pc, #432]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0x5e0>
 80043ec:	4b68      	ldr	r3, [pc, #416]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f0:	4a67      	ldr	r2, [pc, #412]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f8:	4b65      	ldr	r3, [pc, #404]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fc:	4a64      	ldr	r2, [pc, #400]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80043fe:	f023 0304 	bic.w	r3, r3, #4
 8004402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d015      	beq.n	8004438 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd f8cc 	bl	80015a8 <HAL_GetTick>
 8004410:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004412:	e00a      	b.n	800442a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fd f8c8 	bl	80015a8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e14e      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800442a:	4b59      	ldr	r3, [pc, #356]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ee      	beq.n	8004414 <HAL_RCC_OscConfig+0x5f0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004438:	f7fd f8b6 	bl	80015a8 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800443e:	e00a      	b.n	8004456 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fd f8b2 	bl	80015a8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e138      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004456:	4b4e      	ldr	r3, [pc, #312]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ee      	bne.n	8004440 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 812d 	beq.w	80046c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800446c:	4b48      	ldr	r3, [pc, #288]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004474:	2b18      	cmp	r3, #24
 8004476:	f000 80bd 	beq.w	80045f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447e:	2b02      	cmp	r3, #2
 8004480:	f040 809e 	bne.w	80045c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	4b42      	ldr	r3, [pc, #264]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a41      	ldr	r2, [pc, #260]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fd f88a 	bl	80015a8 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fd f886 	bl	80015a8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e10e      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044aa:	4b39      	ldr	r3, [pc, #228]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b6:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80044b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ba:	4b37      	ldr	r3, [pc, #220]	@ (8004598 <HAL_RCC_OscConfig+0x774>)
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044c6:	0112      	lsls	r2, r2, #4
 80044c8:	430a      	orrs	r2, r1
 80044ca:	4931      	ldr	r1, [pc, #196]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	3b01      	subs	r3, #1
 80044d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	3b01      	subs	r3, #1
 80044e0:	025b      	lsls	r3, r3, #9
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	3b01      	subs	r3, #1
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004500:	4923      	ldr	r1, [pc, #140]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004506:	4b22      	ldr	r3, [pc, #136]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	4a21      	ldr	r2, [pc, #132]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004512:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004516:	4b21      	ldr	r3, [pc, #132]	@ (800459c <HAL_RCC_OscConfig+0x778>)
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800451e:	00d2      	lsls	r2, r2, #3
 8004520:	491b      	ldr	r1, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004526:	4b1a      	ldr	r3, [pc, #104]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	f023 020c 	bic.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	4917      	ldr	r1, [pc, #92]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004538:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f023 0202 	bic.w	r2, r3, #2
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	4912      	ldr	r1, [pc, #72]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800454a:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a10      	ldr	r2, [pc, #64]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004556:	4b0e      	ldr	r3, [pc, #56]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	4a0d      	ldr	r2, [pc, #52]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800455c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	4a0a      	ldr	r2, [pc, #40]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800456e:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	4a07      	ldr	r2, [pc, #28]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a04      	ldr	r2, [pc, #16]	@ (8004590 <HAL_RCC_OscConfig+0x76c>)
 8004580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fd f80f 	bl	80015a8 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800458c:	e011      	b.n	80045b2 <HAL_RCC_OscConfig+0x78e>
 800458e:	bf00      	nop
 8004590:	58024400 	.word	0x58024400
 8004594:	58024800 	.word	0x58024800
 8004598:	fffffc0c 	.word	0xfffffc0c
 800459c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fd f802 	bl	80015a8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e08a      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045b2:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x77c>
 80045be:	e082      	b.n	80046c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c0:	4b43      	ldr	r3, [pc, #268]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a42      	ldr	r2, [pc, #264]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80045c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fc ffec 	bl	80015a8 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fc ffe8 	bl	80015a8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e070      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045e6:	4b3a      	ldr	r3, [pc, #232]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x7b0>
 80045f2:	e068      	b.n	80046c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045f4:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045fa:	4b35      	ldr	r3, [pc, #212]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	2b01      	cmp	r3, #1
 8004606:	d031      	beq.n	800466c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d12a      	bne.n	800466c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d122      	bne.n	800466c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d11a      	bne.n	800466c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0a5b      	lsrs	r3, r3, #9
 800463a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004642:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d111      	bne.n	800466c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004654:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d108      	bne.n	800466c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	0e1b      	lsrs	r3, r3, #24
 800465e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004666:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e02b      	b.n	80046c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004670:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 8004672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800467a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	d01f      	beq.n	80046c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004686:	4b12      	ldr	r3, [pc, #72]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	4a11      	ldr	r2, [pc, #68]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004692:	f7fc ff89 	bl	80015a8 <HAL_GetTick>
 8004696:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004698:	bf00      	nop
 800469a:	f7fc ff85 	bl	80015a8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d0f9      	beq.n	800469a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80046a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046aa:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <HAL_RCC_OscConfig+0x8b0>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046b2:	00d2      	lsls	r2, r2, #3
 80046b4:	4906      	ldr	r1, [pc, #24]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046ba:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	4a04      	ldr	r2, [pc, #16]	@ (80046d0 <HAL_RCC_OscConfig+0x8ac>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3730      	adds	r7, #48	@ 0x30
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	58024400 	.word	0x58024400
 80046d4:	ffff0007 	.word	0xffff0007

080046d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e19c      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d910      	bls.n	800471c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b87      	ldr	r3, [pc, #540]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 020f 	bic.w	r2, r3, #15
 8004702:	4985      	ldr	r1, [pc, #532]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b83      	ldr	r3, [pc, #524]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e184      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d010      	beq.n	800474a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	4b7b      	ldr	r3, [pc, #492]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004734:	429a      	cmp	r2, r3
 8004736:	d908      	bls.n	800474a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004738:	4b78      	ldr	r3, [pc, #480]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	4975      	ldr	r1, [pc, #468]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	4b70      	ldr	r3, [pc, #448]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004762:	429a      	cmp	r2, r3
 8004764:	d908      	bls.n	8004778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004766:	4b6d      	ldr	r3, [pc, #436]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	496a      	ldr	r1, [pc, #424]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004774:	4313      	orrs	r3, r2
 8004776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d010      	beq.n	80047a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	4b64      	ldr	r3, [pc, #400]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004790:	429a      	cmp	r2, r3
 8004792:	d908      	bls.n	80047a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004794:	4b61      	ldr	r3, [pc, #388]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	495e      	ldr	r1, [pc, #376]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d010      	beq.n	80047d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	4b59      	ldr	r3, [pc, #356]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047be:	429a      	cmp	r2, r3
 80047c0:	d908      	bls.n	80047d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047c2:	4b56      	ldr	r3, [pc, #344]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4953      	ldr	r1, [pc, #332]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d010      	beq.n	8004802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	4b4d      	ldr	r3, [pc, #308]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d908      	bls.n	8004802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b4a      	ldr	r3, [pc, #296]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f023 020f 	bic.w	r2, r3, #15
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4947      	ldr	r1, [pc, #284]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d055      	beq.n	80048ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800480e:	4b43      	ldr	r3, [pc, #268]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4940      	ldr	r1, [pc, #256]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800481c:	4313      	orrs	r3, r2
 800481e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d107      	bne.n	8004838 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004828:	4b3c      	ldr	r3, [pc, #240]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d121      	bne.n	8004878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0f6      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004840:	4b36      	ldr	r3, [pc, #216]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0ea      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004858:	4b30      	ldr	r3, [pc, #192]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0de      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004868:	4b2c      	ldr	r3, [pc, #176]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0d6      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004878:	4b28      	ldr	r3, [pc, #160]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f023 0207 	bic.w	r2, r3, #7
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4925      	ldr	r1, [pc, #148]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 8004886:	4313      	orrs	r3, r2
 8004888:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fc fe8d 	bl	80015a8 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f7fc fe89 	bl	80015a8 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e0be      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a8:	4b1c      	ldr	r3, [pc, #112]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d1eb      	bne.n	8004892 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	4b14      	ldr	r3, [pc, #80]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d208      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d6:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f023 020f 	bic.w	r2, r3, #15
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	490e      	ldr	r1, [pc, #56]	@ (800491c <HAL_RCC_ClockConfig+0x244>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d214      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 020f 	bic.w	r2, r3, #15
 80048fe:	4906      	ldr	r1, [pc, #24]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <HAL_RCC_ClockConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e086      	b.n	8004a26 <HAL_RCC_ClockConfig+0x34e>
 8004918:	52002000 	.word	0x52002000
 800491c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	4b3f      	ldr	r3, [pc, #252]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004938:	429a      	cmp	r2, r3
 800493a:	d208      	bcs.n	800494e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800493c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4939      	ldr	r1, [pc, #228]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 800494a:	4313      	orrs	r3, r2
 800494c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	4b34      	ldr	r3, [pc, #208]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004966:	429a      	cmp	r2, r3
 8004968:	d208      	bcs.n	800497c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800496a:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	492e      	ldr	r1, [pc, #184]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 8004978:	4313      	orrs	r3, r2
 800497a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004994:	429a      	cmp	r2, r3
 8004996:	d208      	bcs.n	80049aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004998:	4b25      	ldr	r3, [pc, #148]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	4922      	ldr	r1, [pc, #136]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d010      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d208      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4917      	ldr	r1, [pc, #92]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049d8:	f000 f834 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b14      	ldr	r3, [pc, #80]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	4912      	ldr	r1, [pc, #72]	@ (8004a34 <HAL_RCC_ClockConfig+0x35c>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a30 <HAL_RCC_ClockConfig+0x358>)
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004a34 <HAL_RCC_ClockConfig+0x35c>)
 8004a00:	5cd3      	ldrb	r3, [r2, r3]
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a38 <HAL_RCC_ClockConfig+0x360>)
 8004a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_RCC_ClockConfig+0x364>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <HAL_RCC_ClockConfig+0x368>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fd7a 	bl	8001514 <HAL_InitTick>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	58024400 	.word	0x58024400
 8004a34:	080094c0 	.word	0x080094c0
 8004a38:	24000004 	.word	0x24000004
 8004a3c:	24000000 	.word	0x24000000
 8004a40:	24000008 	.word	0x24000008

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b089      	sub	sp, #36	@ 0x24
 8004a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a4a:	4bb3      	ldr	r3, [pc, #716]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a52:	2b18      	cmp	r3, #24
 8004a54:	f200 8155 	bhi.w	8004d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a58:	a201      	add	r2, pc, #4	@ (adr r2, 8004a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004ac5 	.word	0x08004ac5
 8004a64:	08004d03 	.word	0x08004d03
 8004a68:	08004d03 	.word	0x08004d03
 8004a6c:	08004d03 	.word	0x08004d03
 8004a70:	08004d03 	.word	0x08004d03
 8004a74:	08004d03 	.word	0x08004d03
 8004a78:	08004d03 	.word	0x08004d03
 8004a7c:	08004d03 	.word	0x08004d03
 8004a80:	08004aeb 	.word	0x08004aeb
 8004a84:	08004d03 	.word	0x08004d03
 8004a88:	08004d03 	.word	0x08004d03
 8004a8c:	08004d03 	.word	0x08004d03
 8004a90:	08004d03 	.word	0x08004d03
 8004a94:	08004d03 	.word	0x08004d03
 8004a98:	08004d03 	.word	0x08004d03
 8004a9c:	08004d03 	.word	0x08004d03
 8004aa0:	08004af1 	.word	0x08004af1
 8004aa4:	08004d03 	.word	0x08004d03
 8004aa8:	08004d03 	.word	0x08004d03
 8004aac:	08004d03 	.word	0x08004d03
 8004ab0:	08004d03 	.word	0x08004d03
 8004ab4:	08004d03 	.word	0x08004d03
 8004ab8:	08004d03 	.word	0x08004d03
 8004abc:	08004d03 	.word	0x08004d03
 8004ac0:	08004af7 	.word	0x08004af7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac4:	4b94      	ldr	r3, [pc, #592]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ad0:	4b91      	ldr	r3, [pc, #580]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	4a90      	ldr	r2, [pc, #576]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ae2:	e111      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ae6:	61bb      	str	r3, [r7, #24]
      break;
 8004ae8:	e10e      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004aea:	4b8d      	ldr	r3, [pc, #564]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004aec:	61bb      	str	r3, [r7, #24]
      break;
 8004aee:	e10b      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004af0:	4b8c      	ldr	r3, [pc, #560]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004af2:	61bb      	str	r3, [r7, #24]
      break;
 8004af4:	e108      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004af6:	4b88      	ldr	r3, [pc, #544]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b00:	4b85      	ldr	r3, [pc, #532]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b0c:	4b82      	ldr	r3, [pc, #520]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b16:	4b80      	ldr	r3, [pc, #512]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80e1 	beq.w	8004cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f000 8083 	beq.w	8004c48 <HAL_RCC_GetSysClockFreq+0x204>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	f200 80a1 	bhi.w	8004c8c <HAL_RCC_GetSysClockFreq+0x248>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x114>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d056      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b56:	e099      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b58:	4b6f      	ldr	r3, [pc, #444]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02d      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b64:	4b6c      	ldr	r3, [pc, #432]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
 8004b74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b62      	ldr	r3, [pc, #392]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ba2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004bbe:	e087      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b51      	ldr	r3, [pc, #324]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004be6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c02:	e065      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b40      	ldr	r3, [pc, #256]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c46:	e043      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c8a:	e021      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004cd0:	4b11      	ldr	r3, [pc, #68]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	0a5b      	lsrs	r3, r3, #9
 8004cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cda:	3301      	adds	r3, #1
 8004cdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 3a90 	vmov	r3, s15
 8004cf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004cfa:	e005      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
      break;
 8004d00:	e002      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d04:	61bb      	str	r3, [r7, #24]
      break;
 8004d06:	bf00      	nop
  }

  return sysclockfreq;
 8004d08:	69bb      	ldr	r3, [r7, #24]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3724      	adds	r7, #36	@ 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	03d09000 	.word	0x03d09000
 8004d20:	003d0900 	.word	0x003d0900
 8004d24:	007a1200 	.word	0x007a1200
 8004d28:	46000000 	.word	0x46000000
 8004d2c:	4c742400 	.word	0x4c742400
 8004d30:	4a742400 	.word	0x4a742400
 8004d34:	4af42400 	.word	0x4af42400

08004d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d3e:	f7ff fe81 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004d42:	4602      	mov	r2, r0
 8004d44:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	490f      	ldr	r1, [pc, #60]	@ (8004d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8004d50:	5ccb      	ldrb	r3, [r1, r3]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	4a09      	ldr	r2, [pc, #36]	@ (8004d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8004d66:	5cd3      	ldrb	r3, [r2, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	4a07      	ldr	r2, [pc, #28]	@ (8004d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d76:	4a07      	ldr	r2, [pc, #28]	@ (8004d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d7c:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	080094c0 	.word	0x080094c0
 8004d90:	24000004 	.word	0x24000004
 8004d94:	24000000 	.word	0x24000000

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d9c:	f7ff ffcc 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	@ (8004dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	080094c0 	.word	0x080094c0

08004dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004dc8:	f7ff ffb6 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4904      	ldr	r1, [pc, #16]	@ (8004dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	58024400 	.word	0x58024400
 8004dec:	080094c0 	.word	0x080094c0

08004df0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b0ca      	sub	sp, #296	@ 0x128
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004e14:	2500      	movs	r5, #0
 8004e16:	ea54 0305 	orrs.w	r3, r4, r5
 8004e1a:	d049      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e26:	d02f      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e2c:	d828      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e32:	d01a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e38:	d822      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e42:	d007      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e44:	e01c      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e46:	4bb8      	ldr	r3, [pc, #736]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	4ab7      	ldr	r2, [pc, #732]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e52:	e01a      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e58:	3308      	adds	r3, #8
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fc8f 	bl	8006780 <RCCEx_PLL2_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e68:	e00f      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	3328      	adds	r3, #40	@ 0x28
 8004e70:	2102      	movs	r1, #2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 fd36 	bl	80068e4 <RCCEx_PLL3_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e7e:	e004      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e92:	4ba5      	ldr	r3, [pc, #660]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea0:	4aa1      	ldr	r2, [pc, #644]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ea6:	e003      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ebc:	f04f 0900 	mov.w	r9, #0
 8004ec0:	ea58 0309 	orrs.w	r3, r8, r9
 8004ec4:	d047      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d82a      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004eed 	.word	0x08004eed
 8004edc:	08004efb 	.word	0x08004efb
 8004ee0:	08004f11 	.word	0x08004f11
 8004ee4:	08004f2f 	.word	0x08004f2f
 8004ee8:	08004f2f 	.word	0x08004f2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eec:	4b8e      	ldr	r3, [pc, #568]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	4a8d      	ldr	r2, [pc, #564]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ef8:	e01a      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	3308      	adds	r3, #8
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 fc3c 	bl	8006780 <RCCEx_PLL2_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f0e:	e00f      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f14:	3328      	adds	r3, #40	@ 0x28
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 fce3 	bl	80068e4 <RCCEx_PLL3_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f24:	e004      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f2c:	e000      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f38:	4b7b      	ldr	r3, [pc, #492]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3c:	f023 0107 	bic.w	r1, r3, #7
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	4a78      	ldr	r2, [pc, #480]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f4c:	e003      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f62:	f04f 0b00 	mov.w	fp, #0
 8004f66:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f6a:	d04c      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f76:	d030      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f7c:	d829      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f80:	d02d      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f84:	d825      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d018      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f8a:	2b80      	cmp	r3, #128	@ 0x80
 8004f8c:	d821      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f92:	2b40      	cmp	r3, #64	@ 0x40
 8004f94:	d007      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f96:	e01c      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f98:	4b63      	ldr	r3, [pc, #396]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	4a62      	ldr	r2, [pc, #392]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e01c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004faa:	3308      	adds	r3, #8
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f001 fbe6 	bl	8006780 <RCCEx_PLL2_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fba:	e011      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	3328      	adds	r3, #40	@ 0x28
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 fc8d 	bl	80068e4 <RCCEx_PLL3_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005012:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005016:	2300      	movs	r3, #0
 8005018:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800501c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005020:	460b      	mov	r3, r1
 8005022:	4313      	orrs	r3, r2
 8005024:	d053      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800502e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005032:	d035      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005038:	d82e      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800503a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800503e:	d031      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005040:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005044:	d828      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504a:	d01a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800504c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005050:	d822      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505a:	d007      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800505c:	e01c      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505e:	4b32      	ldr	r3, [pc, #200]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	4a31      	ldr	r2, [pc, #196]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800506a:	e01c      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800506c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005070:	3308      	adds	r3, #8
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fb83 	bl	8006780 <RCCEx_PLL2_Config>
 800507a:	4603      	mov	r3, r0
 800507c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005080:	e011      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	3328      	adds	r3, #40	@ 0x28
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f001 fc2a 	bl	80068e4 <RCCEx_PLL3_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005096:	e006      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800509e:	e002      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050be:	4a1a      	ldr	r2, [pc, #104]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c4:	e003      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050de:	2300      	movs	r3, #0
 80050e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80050e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d056      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050fa:	d038      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80050fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005100:	d831      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005102:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005106:	d034      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005108:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800510c:	d82b      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800510e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005112:	d01d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005118:	d825      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d006      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800511e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005124:	e01f      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005126:	bf00      	nop
 8005128:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512c:	4ba2      	ldr	r3, [pc, #648]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	4aa1      	ldr	r2, [pc, #644]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005138:	e01c      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	3308      	adds	r3, #8
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fb1c 	bl	8006780 <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800514e:	e011      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005154:	3328      	adds	r3, #40	@ 0x28
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f001 fbc3 	bl	80068e4 <RCCEx_PLL3_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800517c:	4b8e      	ldr	r3, [pc, #568]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800517e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005180:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800518c:	4a8a      	ldr	r2, [pc, #552]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800518e:	430b      	orrs	r3, r1
 8005190:	6593      	str	r3, [r2, #88]	@ 0x58
 8005192:	e003      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d03a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	2b30      	cmp	r3, #48	@ 0x30
 80051c4:	d01f      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051c6:	2b30      	cmp	r3, #48	@ 0x30
 80051c8:	d819      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d00c      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d815      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d019      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d111      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051da:	4b77      	ldr	r3, [pc, #476]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	4a76      	ldr	r2, [pc, #472]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051e6:	e011      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ec:	3308      	adds	r3, #8
 80051ee:	2102      	movs	r1, #2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 fac5 	bl	8006780 <RCCEx_PLL2_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005214:	4b68      	ldr	r3, [pc, #416]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005218:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005222:	4a65      	ldr	r2, [pc, #404]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005224:	430b      	orrs	r3, r1
 8005226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800522e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800523e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005242:	2300      	movs	r3, #0
 8005244:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005248:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800524c:	460b      	mov	r3, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	d051      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525c:	d035      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800525e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005262:	d82e      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005264:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005268:	d031      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800526a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800526e:	d828      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005274:	d01a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800527a:	d822      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005284:	d007      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005286:	e01c      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005288:	4b4b      	ldr	r3, [pc, #300]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	4a4a      	ldr	r2, [pc, #296]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800528e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005294:	e01c      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529a:	3308      	adds	r3, #8
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fa6e 	bl	8006780 <RCCEx_PLL2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052aa:	e011      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b0:	3328      	adds	r3, #40	@ 0x28
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fb15 	bl	80068e4 <RCCEx_PLL3_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052c0:	e006      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052d8:	4b37      	ldr	r3, [pc, #220]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e6:	4a34      	ldr	r2, [pc, #208]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005306:	2300      	movs	r3, #0
 8005308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800530c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d056      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005320:	d033      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005322:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005326:	d82c      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005328:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800532c:	d02f      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800532e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005332:	d826      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005338:	d02b      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800533a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800533e:	d820      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005344:	d012      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800534a:	d81a      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d022      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005354:	d115      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	3308      	adds	r3, #8
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f001 fa0e 	bl	8006780 <RCCEx_PLL2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800536a:	e015      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005370:	3328      	adds	r3, #40	@ 0x28
 8005372:	2101      	movs	r1, #1
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fab5 	bl	80068e4 <RCCEx_PLL3_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005380:	e00a      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005388:	e006      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800538a:	bf00      	nop
 800538c:	e004      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800538e:	bf00      	nop
 8005390:	e002      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10d      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053a0:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ae:	4a02      	ldr	r2, [pc, #8]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80053b4:	e006      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d055      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f0:	d033      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80053f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f6:	d82c      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d02f      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005402:	d826      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005408:	d02b      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800540a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800540e:	d820      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005414:	d012      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541a:	d81a      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d022      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005424:	d115      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542a:	3308      	adds	r3, #8
 800542c:	2101      	movs	r1, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f001 f9a6 	bl	8006780 <RCCEx_PLL2_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800543a:	e015      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800543c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005440:	3328      	adds	r3, #40	@ 0x28
 8005442:	2101      	movs	r1, #1
 8005444:	4618      	mov	r0, r3
 8005446:	f001 fa4d 	bl	80068e4 <RCCEx_PLL3_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005450:	e00a      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005458:	e006      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800545a:	bf00      	nop
 800545c:	e004      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005470:	4ba3      	ldr	r3, [pc, #652]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005474:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005480:	4a9f      	ldr	r2, [pc, #636]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005482:	430b      	orrs	r3, r1
 8005484:	6593      	str	r3, [r2, #88]	@ 0x58
 8005486:	e003      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800548c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800549c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054a0:	2300      	movs	r3, #0
 80054a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054aa:	460b      	mov	r3, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	d037      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ba:	d00e      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054c0:	d816      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80054c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ca:	d111      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	4a8b      	ldr	r2, [pc, #556]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054d8:	e00f      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	3308      	adds	r3, #8
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f94c 	bl	8006780 <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054ee:	e004      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005502:	4b7f      	ldr	r3, [pc, #508]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005506:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005510:	4a7b      	ldr	r2, [pc, #492]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005512:	430b      	orrs	r3, r1
 8005514:	6513      	str	r3, [r2, #80]	@ 0x50
 8005516:	e003      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800552c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005536:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800553a:	460b      	mov	r3, r1
 800553c:	4313      	orrs	r3, r2
 800553e:	d039      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005546:	2b03      	cmp	r3, #3
 8005548:	d81c      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800554a:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	0800558d 	.word	0x0800558d
 8005554:	08005561 	.word	0x08005561
 8005558:	0800556f 	.word	0x0800556f
 800555c:	0800558d 	.word	0x0800558d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b67      	ldr	r3, [pc, #412]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4a66      	ldr	r2, [pc, #408]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800556c:	e00f      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 f902 	bl	8006780 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800558c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005596:	4b5a      	ldr	r3, [pc, #360]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559a:	f023 0103 	bic.w	r1, r3, #3
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a4:	4a56      	ldr	r2, [pc, #344]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a6:	430b      	orrs	r3, r1
 80055a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055aa:	e003      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f000 809f 	beq.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a4a      	ldr	r2, [pc, #296]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e2:	f7fb ffe1 	bl	80015a8 <HAL_GetTick>
 80055e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ea:	e00b      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fb ffdc 	bl	80015a8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b64      	cmp	r3, #100	@ 0x64
 80055fa:	d903      	bls.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005604:	4b3f      	ldr	r3, [pc, #252]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ed      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005614:	2b00      	cmp	r3, #0
 8005616:	d179      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005618:	4b39      	ldr	r3, [pc, #228]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800561a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005624:	4053      	eors	r3, r2
 8005626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800562e:	4b34      	ldr	r3, [pc, #208]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005636:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800563a:	4b31      	ldr	r3, [pc, #196]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	4a30      	ldr	r2, [pc, #192]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005646:	4b2e      	ldr	r3, [pc, #184]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005650:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005652:	4a2b      	ldr	r2, [pc, #172]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005658:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005666:	d118      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fb ff9e 	bl	80015a8 <HAL_GetTick>
 800566c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005670:	e00d      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fb ff99 	bl	80015a8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800567c:	1ad2      	subs	r2, r2, r3
 800567e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005682:	429a      	cmp	r2, r3
 8005684:	d903      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800568c:	e005      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800568e:	4b1c      	ldr	r3, [pc, #112]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0eb      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800569a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d129      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056b2:	d10e      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80056b4:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056c4:	091a      	lsrs	r2, r3, #4
 80056c6:	4b10      	ldr	r3, [pc, #64]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6113      	str	r3, [r2, #16]
 80056d0:	e005      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80056d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056dc:	6113      	str	r3, [r2, #16]
 80056de:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	4a04      	ldr	r2, [pc, #16]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f4:	e00e      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80056fe:	e009      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005700:	58024400 	.word	0x58024400
 8005704:	58024800 	.word	0x58024800
 8005708:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 0301 	and.w	r3, r2, #1
 8005720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800572a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	f000 8089 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800573c:	2b28      	cmp	r3, #40	@ 0x28
 800573e:	d86b      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005740:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005821 	.word	0x08005821
 800574c:	08005819 	.word	0x08005819
 8005750:	08005819 	.word	0x08005819
 8005754:	08005819 	.word	0x08005819
 8005758:	08005819 	.word	0x08005819
 800575c:	08005819 	.word	0x08005819
 8005760:	08005819 	.word	0x08005819
 8005764:	08005819 	.word	0x08005819
 8005768:	080057ed 	.word	0x080057ed
 800576c:	08005819 	.word	0x08005819
 8005770:	08005819 	.word	0x08005819
 8005774:	08005819 	.word	0x08005819
 8005778:	08005819 	.word	0x08005819
 800577c:	08005819 	.word	0x08005819
 8005780:	08005819 	.word	0x08005819
 8005784:	08005819 	.word	0x08005819
 8005788:	08005803 	.word	0x08005803
 800578c:	08005819 	.word	0x08005819
 8005790:	08005819 	.word	0x08005819
 8005794:	08005819 	.word	0x08005819
 8005798:	08005819 	.word	0x08005819
 800579c:	08005819 	.word	0x08005819
 80057a0:	08005819 	.word	0x08005819
 80057a4:	08005819 	.word	0x08005819
 80057a8:	08005821 	.word	0x08005821
 80057ac:	08005819 	.word	0x08005819
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005819 	.word	0x08005819
 80057bc:	08005819 	.word	0x08005819
 80057c0:	08005819 	.word	0x08005819
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005821 	.word	0x08005821
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005819 	.word	0x08005819
 80057d8:	08005819 	.word	0x08005819
 80057dc:	08005819 	.word	0x08005819
 80057e0:	08005819 	.word	0x08005819
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005821 	.word	0x08005821
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	3308      	adds	r3, #8
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 ffc3 	bl	8006780 <RCCEx_PLL2_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005800:	e00f      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	3328      	adds	r3, #40	@ 0x28
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f86a 	bl	80068e4 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005816:	e004      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800582a:	4bbf      	ldr	r3, [pc, #764]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005838:	4abb      	ldr	r2, [pc, #748]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800583a:	430b      	orrs	r3, r1
 800583c:	6553      	str	r3, [r2, #84]	@ 0x54
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 0302 	and.w	r3, r2, #2
 8005854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800585e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d041      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800586e:	2b05      	cmp	r3, #5
 8005870:	d824      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005872:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	080058c5 	.word	0x080058c5
 800587c:	08005891 	.word	0x08005891
 8005880:	080058a7 	.word	0x080058a7
 8005884:	080058c5 	.word	0x080058c5
 8005888:	080058c5 	.word	0x080058c5
 800588c:	080058c5 	.word	0x080058c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	3308      	adds	r3, #8
 8005896:	2101      	movs	r1, #1
 8005898:	4618      	mov	r0, r3
 800589a:	f000 ff71 	bl	8006780 <RCCEx_PLL2_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058a4:	e00f      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3328      	adds	r3, #40	@ 0x28
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 f818 	bl	80068e4 <RCCEx_PLL3_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058ce:	4b96      	ldr	r3, [pc, #600]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	f023 0107 	bic.w	r1, r3, #7
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058dc:	4a92      	ldr	r2, [pc, #584]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80058e2:	e003      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f002 0304 	and.w	r3, r2, #4
 80058f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005902:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d044      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005914:	2b05      	cmp	r3, #5
 8005916:	d825      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005918:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	0800596d 	.word	0x0800596d
 8005924:	08005939 	.word	0x08005939
 8005928:	0800594f 	.word	0x0800594f
 800592c:	0800596d 	.word	0x0800596d
 8005930:	0800596d 	.word	0x0800596d
 8005934:	0800596d 	.word	0x0800596d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593c:	3308      	adds	r3, #8
 800593e:	2101      	movs	r1, #1
 8005940:	4618      	mov	r0, r3
 8005942:	f000 ff1d 	bl	8006780 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800594c:	e00f      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005952:	3328      	adds	r3, #40	@ 0x28
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ffc4 	bl	80068e4 <RCCEx_PLL3_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005976:	4b6c      	ldr	r3, [pc, #432]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f023 0107 	bic.w	r1, r3, #7
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005986:	4a68      	ldr	r2, [pc, #416]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005988:	430b      	orrs	r3, r1
 800598a:	6593      	str	r3, [r2, #88]	@ 0x58
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f002 0320 	and.w	r3, r2, #32
 80059a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d055      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059c2:	d033      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80059c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059c8:	d82c      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d02f      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d4:	d826      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059da:	d02b      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80059dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059e0:	d820      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059e6:	d012      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ec:	d81a      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d022      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80059f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f6:	d115      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	3308      	adds	r3, #8
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 febd 	bl	8006780 <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e015      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	3328      	adds	r3, #40	@ 0x28
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 ff64 	bl	80068e4 <RCCEx_PLL3_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a22:	e00a      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a2c:	bf00      	nop
 8005a2e:	e004      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a30:	bf00      	nop
 8005a32:	e002      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a42:	4b39      	ldr	r3, [pc, #228]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a52:	4a35      	ldr	r2, [pc, #212]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	d058      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a8e:	d033      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a94:	d82c      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9a:	d02f      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa0:	d826      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aa6:	d02b      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005aa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aac:	d820      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab2:	d012      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab8:	d81a      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d022      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac2:	d115      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	3308      	adds	r3, #8
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fe57 	bl	8006780 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ad8:	e015      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	3328      	adds	r3, #40	@ 0x28
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fefe 	bl	80068e4 <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005aee:	e00a      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005af6:	e006      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005af8:	bf00      	nop
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10e      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b0e:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b1e:	4a02      	ldr	r2, [pc, #8]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b24:	e006      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d055      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b60:	d033      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005b62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b66:	d82c      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b6c:	d02f      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b72:	d826      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b78:	d02b      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005b7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b7e:	d820      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b84:	d012      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b8a:	d81a      	bhi.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d022      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	d115      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fdee 	bl	8006780 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005baa:	e015      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	3328      	adds	r3, #40	@ 0x28
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fe95 	bl	80068e4 <RCCEx_PLL3_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bc8:	e006      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bca:	bf00      	nop
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bce:	bf00      	nop
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005be0:	4ba1      	ldr	r3, [pc, #644]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bf0:	4a9d      	ldr	r2, [pc, #628]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0308 	and.w	r3, r2, #8
 8005c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d01e      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	3328      	adds	r3, #40	@ 0x28
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fe54 	bl	80068e4 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c48:	4b87      	ldr	r3, [pc, #540]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c58:	4a83      	ldr	r2, [pc, #524]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f002 0310 	and.w	r3, r2, #16
 8005c6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	d01e      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	3328      	adds	r3, #40	@ 0x28
 8005c92:	2102      	movs	r1, #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fe25 	bl	80068e4 <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ca6:	4b70      	ldr	r3, [pc, #448]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005caa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cb6:	4a6c      	ldr	r2, [pc, #432]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d03e      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ce8:	d022      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cee:	d81b      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d00b      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005cfa:	e015      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	3308      	adds	r3, #8
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fd3b 	bl	8006780 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	3328      	adds	r3, #40	@ 0x28
 8005d18:	2102      	movs	r1, #2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fde2 	bl	80068e4 <RCCEx_PLL3_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d4a:	4a47      	ldr	r2, [pc, #284]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d68:	2300      	movs	r3, #0
 8005d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d03b      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d82:	d01f      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005d84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d88:	d818      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8e:	d003      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d94:	d007      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d96:	e011      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d98:	4b33      	ldr	r3, [pc, #204]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9c:	4a32      	ldr	r2, [pc, #200]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005da4:	e00f      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	3328      	adds	r3, #40	@ 0x28
 8005dac:	2101      	movs	r1, #1
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fd98 	bl	80068e4 <RCCEx_PLL3_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dba:	e004      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dce:	4b26      	ldr	r3, [pc, #152]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	4a22      	ldr	r2, [pc, #136]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005de4:	e003      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005dfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d034      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e18:	d007      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005e1a:	e011      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e1c:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	4a11      	ldr	r2, [pc, #68]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e28:	e00e      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	3308      	adds	r3, #8
 8005e30:	2102      	movs	r1, #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fca4 	bl	8006780 <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10d      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5e:	4a02      	ldr	r2, [pc, #8]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e60:	430b      	orrs	r3, r1
 8005e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e82:	2300      	movs	r3, #0
 8005e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	d00c      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e94:	3328      	adds	r3, #40	@ 0x28
 8005e96:	2102      	movs	r1, #2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fd23 	bl	80068e4 <RCCEx_PLL3_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005eb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eb8:	2300      	movs	r3, #0
 8005eba:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ebc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d038      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed2:	d018      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed8:	d811      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ede:	d014      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d80b      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d011      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eee:	d106      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef0:	4bc3      	ldr	r3, [pc, #780]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	4ac2      	ldr	r2, [pc, #776]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005efc:	e008      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f04:	e004      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f18:	4bb9      	ldr	r3, [pc, #740]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f28:	4ab5      	ldr	r2, [pc, #724]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f46:	2300      	movs	r3, #0
 8005f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4313      	orrs	r3, r2
 8005f52:	d009      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f54:	4baa      	ldr	r3, [pc, #680]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f62:	4aa7      	ldr	r2, [pc, #668]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f76:	2300      	movs	r3, #0
 8005f78:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4313      	orrs	r3, r2
 8005f82:	d00a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f84:	4b9e      	ldr	r3, [pc, #632]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f94:	4a9a      	ldr	r2, [pc, #616]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa8:	2300      	movs	r3, #0
 8005faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fb6:	4b92      	ldr	r3, [pc, #584]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fd8:	2300      	movs	r3, #0
 8005fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fe6:	4b86      	ldr	r3, [pc, #536]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	4a85      	ldr	r2, [pc, #532]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ff0:	6113      	str	r3, [r2, #16]
 8005ff2:	4b83      	ldr	r3, [pc, #524]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ff4:	6919      	ldr	r1, [r3, #16]
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ffe:	4a80      	ldr	r2, [pc, #512]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006010:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006012:	2300      	movs	r3, #0
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006016:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006020:	4b77      	ldr	r3, [pc, #476]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006024:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602e:	4a74      	ldr	r2, [pc, #464]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006030:	430b      	orrs	r3, r1
 8006032:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006040:	633b      	str	r3, [r7, #48]	@ 0x30
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
 8006046:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d00a      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006050:	4b6b      	ldr	r3, [pc, #428]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006054:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006060:	4a67      	ldr	r2, [pc, #412]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006062:	430b      	orrs	r3, r1
 8006064:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	2100      	movs	r1, #0
 8006070:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006078:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d011      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	3308      	adds	r3, #8
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fb78 	bl	8006780 <RCCEx_PLL2_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	2100      	movs	r1, #0
 80060b0:	6239      	str	r1, [r7, #32]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060bc:	460b      	mov	r3, r1
 80060be:	4313      	orrs	r3, r2
 80060c0:	d011      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	3308      	adds	r3, #8
 80060c8:	2101      	movs	r1, #1
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fb58 	bl	8006780 <RCCEx_PLL2_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	2100      	movs	r1, #0
 80060f0:	61b9      	str	r1, [r7, #24]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060fc:	460b      	mov	r3, r1
 80060fe:	4313      	orrs	r3, r2
 8006100:	d011      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	3308      	adds	r3, #8
 8006108:	2102      	movs	r1, #2
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fb38 	bl	8006780 <RCCEx_PLL2_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	2100      	movs	r1, #0
 8006130:	6139      	str	r1, [r7, #16]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800613c:	460b      	mov	r3, r1
 800613e:	4313      	orrs	r3, r2
 8006140:	d011      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	3328      	adds	r3, #40	@ 0x28
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fbca 	bl	80068e4 <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	2100      	movs	r1, #0
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800617c:	460b      	mov	r3, r1
 800617e:	4313      	orrs	r3, r2
 8006180:	d011      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3328      	adds	r3, #40	@ 0x28
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fbaa 	bl	80068e4 <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	2100      	movs	r1, #0
 80061b0:	6039      	str	r1, [r7, #0]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d011      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	3328      	adds	r3, #40	@ 0x28
 80061c8:	2102      	movs	r1, #2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fb8a 	bl	80068e4 <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80061e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80061fa:	46bd      	mov	sp, r7
 80061fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006200:	58024400 	.word	0x58024400

08006204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006208:	f7fe fd96 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 800620c:	4602      	mov	r2, r0
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	4904      	ldr	r1, [pc, #16]	@ (800622c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800621a:	5ccb      	ldrb	r3, [r1, r3]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006224:	4618      	mov	r0, r3
 8006226:	bd80      	pop	{r7, pc}
 8006228:	58024400 	.word	0x58024400
 800622c:	080094c0 	.word	0x080094c0

08006230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006230:	b480      	push	{r7}
 8006232:	b089      	sub	sp, #36	@ 0x24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006238:	4ba1      	ldr	r3, [pc, #644]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006242:	4b9f      	ldr	r3, [pc, #636]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	0b1b      	lsrs	r3, r3, #12
 8006248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800624c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800624e:	4b9c      	ldr	r3, [pc, #624]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	091b      	lsrs	r3, r3, #4
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800625a:	4b99      	ldr	r3, [pc, #612]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625e:	08db      	lsrs	r3, r3, #3
 8006260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8111 	beq.w	80064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b02      	cmp	r3, #2
 8006282:	f000 8083 	beq.w	800638c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b02      	cmp	r3, #2
 800628a:	f200 80a1 	bhi.w	80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d056      	beq.n	8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800629a:	e099      	b.n	80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800629c:	4b88      	ldr	r3, [pc, #544]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d02d      	beq.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062a8:	4b85      	ldr	r3, [pc, #532]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	08db      	lsrs	r3, r3, #3
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	4a84      	ldr	r2, [pc, #528]	@ (80064c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
 80062b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d2:	4b7b      	ldr	r3, [pc, #492]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006302:	e087      	b.n	8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006316:	4b6a      	ldr	r3, [pc, #424]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	ed97 6a03 	vldr	s12, [r7, #12]
 800632a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006346:	e065      	b.n	8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635a:	4b59      	ldr	r3, [pc, #356]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636a:	ed97 6a03 	vldr	s12, [r7, #12]
 800636e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638a:	e043      	b.n	8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800639a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639e:	4b48      	ldr	r3, [pc, #288]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ce:	e021      	b.n	8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e2:	4b37      	ldr	r3, [pc, #220]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006412:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006414:	4b2a      	ldr	r3, [pc, #168]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006418:	0a5b      	lsrs	r3, r3, #9
 800641a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800642a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800642e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643a:	ee17 2a90 	vmov	r2, s15
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006442:	4b1f      	ldr	r3, [pc, #124]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800645c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006468:	ee17 2a90 	vmov	r2, s15
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006470:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006474:	0e1b      	lsrs	r3, r3, #24
 8006476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800648a:	edd7 6a07 	vldr	s13, [r7, #28]
 800648e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006496:	ee17 2a90 	vmov	r2, s15
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800649e:	e008      	b.n	80064b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
}
 80064b2:	bf00      	nop
 80064b4:	3724      	adds	r7, #36	@ 0x24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	58024400 	.word	0x58024400
 80064c4:	03d09000 	.word	0x03d09000
 80064c8:	46000000 	.word	0x46000000
 80064cc:	4c742400 	.word	0x4c742400
 80064d0:	4a742400 	.word	0x4a742400
 80064d4:	4af42400 	.word	0x4af42400

080064d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80064d8:	b480      	push	{r7}
 80064da:	b089      	sub	sp, #36	@ 0x24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064e0:	4ba1      	ldr	r3, [pc, #644]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80064ea:	4b9f      	ldr	r3, [pc, #636]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	0d1b      	lsrs	r3, r3, #20
 80064f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006502:	4b99      	ldr	r3, [pc, #612]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006506:	08db      	lsrs	r3, r3, #3
 8006508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8111 	beq.w	8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b02      	cmp	r3, #2
 800652a:	f000 8083 	beq.w	8006634 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b02      	cmp	r3, #2
 8006532:	f200 80a1 	bhi.w	8006678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d056      	beq.n	80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006542:	e099      	b.n	8006678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006544:	4b88      	ldr	r3, [pc, #544]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d02d      	beq.n	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006550:	4b85      	ldr	r3, [pc, #532]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	08db      	lsrs	r3, r3, #3
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	4a84      	ldr	r2, [pc, #528]	@ (800676c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
 8006560:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657a:	4b7b      	ldr	r3, [pc, #492]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658a:	ed97 6a03 	vldr	s12, [r7, #12]
 800658e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065aa:	e087      	b.n	80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006774 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065be:	4b6a      	ldr	r3, [pc, #424]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ee:	e065      	b.n	80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006602:	4b59      	ldr	r3, [pc, #356]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006612:	ed97 6a03 	vldr	s12, [r7, #12]
 8006616:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800661a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006632:	e043      	b.n	80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800677c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006646:	4b48      	ldr	r3, [pc, #288]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006656:	ed97 6a03 	vldr	s12, [r7, #12]
 800665a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800665e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800666a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006676:	e021      	b.n	80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006682:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668a:	4b37      	ldr	r3, [pc, #220]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669a:	ed97 6a03 	vldr	s12, [r7, #12]
 800669e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80066bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	0a5b      	lsrs	r3, r3, #9
 80066c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e2:	ee17 2a90 	vmov	r2, s15
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80066ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	0c1b      	lsrs	r3, r3, #16
 80066f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006704:	edd7 6a07 	vldr	s13, [r7, #28]
 8006708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006710:	ee17 2a90 	vmov	r2, s15
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006718:	4b13      	ldr	r3, [pc, #76]	@ (8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800672e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006732:	edd7 6a07 	vldr	s13, [r7, #28]
 8006736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800673a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800673e:	ee17 2a90 	vmov	r2, s15
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006746:	e008      	b.n	800675a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	609a      	str	r2, [r3, #8]
}
 800675a:	bf00      	nop
 800675c:	3724      	adds	r7, #36	@ 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	58024400 	.word	0x58024400
 800676c:	03d09000 	.word	0x03d09000
 8006770:	46000000 	.word	0x46000000
 8006774:	4c742400 	.word	0x4c742400
 8006778:	4a742400 	.word	0x4a742400
 800677c:	4af42400 	.word	0x4af42400

08006780 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800678e:	4b53      	ldr	r3, [pc, #332]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	2b03      	cmp	r3, #3
 8006798:	d101      	bne.n	800679e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e099      	b.n	80068d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800679e:	4b4f      	ldr	r3, [pc, #316]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a4e      	ldr	r2, [pc, #312]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067aa:	f7fa fefd 	bl	80015a8 <HAL_GetTick>
 80067ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067b0:	e008      	b.n	80067c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067b2:	f7fa fef9 	bl	80015a8 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e086      	b.n	80068d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067c4:	4b45      	ldr	r3, [pc, #276]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067d0:	4b42      	ldr	r3, [pc, #264]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	031b      	lsls	r3, r3, #12
 80067de:	493f      	ldr	r1, [pc, #252]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	025b      	lsls	r3, r3, #9
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	3b01      	subs	r3, #1
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	3b01      	subs	r3, #1
 800680e:	061b      	lsls	r3, r3, #24
 8006810:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006814:	4931      	ldr	r1, [pc, #196]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006816:	4313      	orrs	r3, r2
 8006818:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800681a:	4b30      	ldr	r3, [pc, #192]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 800681c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	492d      	ldr	r1, [pc, #180]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800682c:	4b2b      	ldr	r3, [pc, #172]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	f023 0220 	bic.w	r2, r3, #32
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	4928      	ldr	r1, [pc, #160]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 800683a:	4313      	orrs	r3, r2
 800683c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800683e:	4b27      	ldr	r3, [pc, #156]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	4a26      	ldr	r2, [pc, #152]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006844:	f023 0310 	bic.w	r3, r3, #16
 8006848:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800684a:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 800684c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800684e:	4b24      	ldr	r3, [pc, #144]	@ (80068e0 <RCCEx_PLL2_Config+0x160>)
 8006850:	4013      	ands	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	69d2      	ldr	r2, [r2, #28]
 8006856:	00d2      	lsls	r2, r2, #3
 8006858:	4920      	ldr	r1, [pc, #128]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 800685a:	4313      	orrs	r3, r2
 800685c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800685e:	4b1f      	ldr	r3, [pc, #124]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	4a1e      	ldr	r2, [pc, #120]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006864:	f043 0310 	orr.w	r3, r3, #16
 8006868:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006870:	4b1a      	ldr	r3, [pc, #104]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	4a19      	ldr	r2, [pc, #100]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006876:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800687a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800687c:	e00f      	b.n	800689e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006884:	4b15      	ldr	r3, [pc, #84]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	4a14      	ldr	r2, [pc, #80]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 800688a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800688e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006890:	e005      	b.n	800689e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006892:	4b12      	ldr	r3, [pc, #72]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a11      	ldr	r2, [pc, #68]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 8006898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800689e:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a0e      	ldr	r2, [pc, #56]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80068a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068aa:	f7fa fe7d 	bl	80015a8 <HAL_GetTick>
 80068ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068b0:	e008      	b.n	80068c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068b2:	f7fa fe79 	bl	80015a8 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e006      	b.n	80068d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <RCCEx_PLL2_Config+0x15c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	58024400 	.word	0x58024400
 80068e0:	ffff0007 	.word	0xffff0007

080068e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068f2:	4b53      	ldr	r3, [pc, #332]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80068f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d101      	bne.n	8006902 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e099      	b.n	8006a36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006902:	4b4f      	ldr	r3, [pc, #316]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4e      	ldr	r2, [pc, #312]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800690c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800690e:	f7fa fe4b 	bl	80015a8 <HAL_GetTick>
 8006912:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006914:	e008      	b.n	8006928 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006916:	f7fa fe47 	bl	80015a8 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e086      	b.n	8006a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006928:	4b45      	ldr	r3, [pc, #276]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006934:	4b42      	ldr	r3, [pc, #264]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006938:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	051b      	lsls	r3, r3, #20
 8006942:	493f      	ldr	r1, [pc, #252]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006944:	4313      	orrs	r3, r2
 8006946:	628b      	str	r3, [r1, #40]	@ 0x28
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	3b01      	subs	r3, #1
 800694e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	3b01      	subs	r3, #1
 8006958:	025b      	lsls	r3, r3, #9
 800695a:	b29b      	uxth	r3, r3
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	3b01      	subs	r3, #1
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	3b01      	subs	r3, #1
 8006972:	061b      	lsls	r3, r3, #24
 8006974:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006978:	4931      	ldr	r1, [pc, #196]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800697e:	4b30      	ldr	r3, [pc, #192]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006982:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	492d      	ldr	r1, [pc, #180]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006990:	4b2b      	ldr	r3, [pc, #172]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	4928      	ldr	r1, [pc, #160]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069a2:	4b27      	ldr	r3, [pc, #156]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a6:	4a26      	ldr	r2, [pc, #152]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069ae:	4b24      	ldr	r3, [pc, #144]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b2:	4b24      	ldr	r3, [pc, #144]	@ (8006a44 <RCCEx_PLL3_Config+0x160>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	69d2      	ldr	r2, [r2, #28]
 80069ba:	00d2      	lsls	r2, r2, #3
 80069bc:	4920      	ldr	r1, [pc, #128]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	4a19      	ldr	r2, [pc, #100]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80069de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069e0:	e00f      	b.n	8006a02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d106      	bne.n	80069f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069e8:	4b15      	ldr	r3, [pc, #84]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	4a14      	ldr	r2, [pc, #80]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069f4:	e005      	b.n	8006a02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069f6:	4b12      	ldr	r3, [pc, #72]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	4a11      	ldr	r2, [pc, #68]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a02:	4b0f      	ldr	r3, [pc, #60]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a0e      	ldr	r2, [pc, #56]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0e:	f7fa fdcb 	bl	80015a8 <HAL_GetTick>
 8006a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a14:	e008      	b.n	8006a28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a16:	f7fa fdc7 	bl	80015a8 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e006      	b.n	8006a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <RCCEx_PLL3_Config+0x15c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
 8006a44:	ffff0007 	.word	0xffff0007

08006a48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e10f      	b.n	8006c7a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a87      	ldr	r2, [pc, #540]	@ (8006c84 <HAL_SPI_Init+0x23c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00f      	beq.n	8006a8a <HAL_SPI_Init+0x42>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a86      	ldr	r2, [pc, #536]	@ (8006c88 <HAL_SPI_Init+0x240>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00a      	beq.n	8006a8a <HAL_SPI_Init+0x42>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a84      	ldr	r2, [pc, #528]	@ (8006c8c <HAL_SPI_Init+0x244>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d005      	beq.n	8006a8a <HAL_SPI_Init+0x42>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b0f      	cmp	r3, #15
 8006a84:	d901      	bls.n	8006a8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e0f7      	b.n	8006c7a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fbbc 	bl	8007208 <SPI_GetPacketSize>
 8006a90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a7b      	ldr	r2, [pc, #492]	@ (8006c84 <HAL_SPI_Init+0x23c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00c      	beq.n	8006ab6 <HAL_SPI_Init+0x6e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a79      	ldr	r2, [pc, #484]	@ (8006c88 <HAL_SPI_Init+0x240>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d007      	beq.n	8006ab6 <HAL_SPI_Init+0x6e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a78      	ldr	r2, [pc, #480]	@ (8006c8c <HAL_SPI_Init+0x244>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d002      	beq.n	8006ab6 <HAL_SPI_Init+0x6e>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d811      	bhi.n	8006ada <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006aba:	4a72      	ldr	r2, [pc, #456]	@ (8006c84 <HAL_SPI_Init+0x23c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a70      	ldr	r2, [pc, #448]	@ (8006c88 <HAL_SPI_Init+0x240>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_SPI_Init+0x8c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a6f      	ldr	r2, [pc, #444]	@ (8006c8c <HAL_SPI_Init+0x244>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d104      	bne.n	8006ade <HAL_SPI_Init+0x96>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d901      	bls.n	8006ade <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e0cd      	b.n	8006c7a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fa fa50 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006b1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b24:	d119      	bne.n	8006b5a <HAL_SPI_Init+0x112>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b2e:	d103      	bne.n	8006b38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10c      	bne.n	8006b5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b48:	d107      	bne.n	8006b5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <HAL_SPI_Init+0x13e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2b06      	cmp	r3, #6
 8006b6c:	d90b      	bls.n	8006b86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e007      	b.n	8006b96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	ea42 0103 	orr.w	r1, r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d113      	bne.n	8006c36 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40013000 	.word	0x40013000
 8006c88:	40003800 	.word	0x40003800
 8006c8c:	40003c00 	.word	0x40003c00

08006c90 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3320      	adds	r3, #32
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ca8:	f7fa fc7e 	bl	80015a8 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d001      	beq.n	8006cbe <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e1d1      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_SPI_Transmit+0x3a>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e1c9      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_SPI_Transmit+0x4c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e1c2      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006d34:	d108      	bne.n	8006d48 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e009      	b.n	8006d5c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006d5a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	4b96      	ldr	r3, [pc, #600]	@ (8006fbc <HAL_SPI_Transmit+0x32c>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	88f9      	ldrh	r1, [r7, #6]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d88:	d107      	bne.n	8006d9a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d947      	bls.n	8006e32 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006da2:	e03f      	b.n	8006e24 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d114      	bne.n	8006ddc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6812      	ldr	r2, [r2, #0]
 8006dbc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006dda:	e023      	b.n	8006e24 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ddc:	f7fa fbe4 	bl	80015a8 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_Transmit+0x164>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Transmit+0x16a>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d114      	bne.n	8006e24 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f936 	bl	800706c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e11e      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1b9      	bne.n	8006da4 <HAL_SPI_Transmit+0x114>
 8006e30:	e0f1      	b.n	8007016 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b07      	cmp	r3, #7
 8006e38:	f240 80e6 	bls.w	8007008 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006e3c:	e05d      	b.n	8006efa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d132      	bne.n	8006eb2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d918      	bls.n	8006e8a <HAL_SPI_Transmit+0x1fa>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d014      	beq.n	8006e8a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b02      	subs	r3, #2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e88:	e037      	b.n	8006efa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8e:	881a      	ldrh	r2, [r3, #0]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e98:	1c9a      	adds	r2, r3, #2
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006eb0:	e023      	b.n	8006efa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb2:	f7fa fb79 	bl	80015a8 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d803      	bhi.n	8006eca <HAL_SPI_Transmit+0x23a>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d102      	bne.n	8006ed0 <HAL_SPI_Transmit+0x240>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d114      	bne.n	8006efa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f8cb 	bl	800706c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006edc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e0b3      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d19b      	bne.n	8006e3e <HAL_SPI_Transmit+0x1ae>
 8006f06:	e086      	b.n	8007016 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d154      	bne.n	8006fc0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d918      	bls.n	8006f54 <HAL_SPI_Transmit+0x2c4>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f26:	2b40      	cmp	r3, #64	@ 0x40
 8006f28:	d914      	bls.n	8006f54 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b04      	subs	r3, #4
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006f52:	e059      	b.n	8007008 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d917      	bls.n	8006f90 <HAL_SPI_Transmit+0x300>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d013      	beq.n	8006f90 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f76:	1c9a      	adds	r2, r3, #2
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b02      	subs	r3, #2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006f8e:	e03b      	b.n	8007008 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3320      	adds	r3, #32
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006fba:	e025      	b.n	8007008 <HAL_SPI_Transmit+0x378>
 8006fbc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc0:	f7fa faf2 	bl	80015a8 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d803      	bhi.n	8006fd8 <HAL_SPI_Transmit+0x348>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d102      	bne.n	8006fde <HAL_SPI_Transmit+0x34e>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d114      	bne.n	8007008 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f844 	bl	800706c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e02c      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f af79 	bne.w	8006f08 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2200      	movs	r2, #0
 800701e:	2108      	movs	r1, #8
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f8c3 	bl	80071ac <SPI_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007032:	f043 0220 	orr.w	r2, r3, #32
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f815 	bl	800706c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007060:	2300      	movs	r3, #0
  }
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop

0800706c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0208 	orr.w	r2, r2, #8
 800708a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0210 	orr.w	r2, r2, #16
 800709a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6919      	ldr	r1, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b3c      	ldr	r3, [pc, #240]	@ (80071a8 <SPI_CloseTransfer+0x13c>)
 80070b8:	400b      	ands	r3, r1
 80070ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80070ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d014      	beq.n	8007102 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00f      	beq.n	8007102 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0220 	orr.w	r2, r2, #32
 8007100:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d014      	beq.n	8007138 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800711e:	f043 0204 	orr.w	r2, r3, #4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007136:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00f      	beq.n	8007162 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007148:	f043 0201 	orr.w	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007160:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00f      	beq.n	800718c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007172:	f043 0208 	orr.w	r2, r3, #8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800718a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	fffffc90 	.word	0xfffffc90

080071ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80071bc:	e010      	b.n	80071e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071be:	f7fa f9f3 	bl	80015a8 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d803      	bhi.n	80071d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d102      	bne.n	80071dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e00f      	b.n	8007200 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695a      	ldr	r2, [r3, #20]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d0df      	beq.n	80071be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3307      	adds	r3, #7
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e042      	b.n	80072d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7f9 ff38 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2224      	movs	r2, #36	@ 0x24
 800726c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0201 	bic.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f96b 	bl	8008564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fc00 	bl	8007a94 <UART_SetConfig>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e01b      	b.n	80072d6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f9ea 	bl	80086a8 <UART_CheckIdleState>
 80072d4:	4603      	mov	r3, r0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b0ba      	sub	sp, #232	@ 0xe8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007306:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800730a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800730e:	4013      	ands	r3, r2
 8007310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11b      	bne.n	8007354 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800731c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d015      	beq.n	8007354 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800732c:	f003 0320 	and.w	r3, r3, #32
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8377 	beq.w	8007a38 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
      }
      return;
 8007352:	e371      	b.n	8007a38 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8123 	beq.w	80075a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800735e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007362:	4b8d      	ldr	r3, [pc, #564]	@ (8007598 <HAL_UART_IRQHandler+0x2b8>)
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800736a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800736e:	4b8b      	ldr	r3, [pc, #556]	@ (800759c <HAL_UART_IRQHandler+0x2bc>)
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8116 	beq.w	80075a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d011      	beq.n	80073a8 <HAL_UART_IRQHandler+0xc8>
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2201      	movs	r2, #1
 8007396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800739e:	f043 0201 	orr.w	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d011      	beq.n	80073d8 <HAL_UART_IRQHandler+0xf8>
 80073b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2202      	movs	r2, #2
 80073c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ce:	f043 0204 	orr.w	r2, r3, #4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d011      	beq.n	8007408 <HAL_UART_IRQHandler+0x128>
 80073e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2204      	movs	r2, #4
 80073f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fe:	f043 0202 	orr.w	r2, r3, #2
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d017      	beq.n	8007444 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007420:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007424:	4b5c      	ldr	r3, [pc, #368]	@ (8007598 <HAL_UART_IRQHandler+0x2b8>)
 8007426:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2208      	movs	r2, #8
 8007432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	f043 0208 	orr.w	r2, r3, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800744c:	2b00      	cmp	r3, #0
 800744e:	d012      	beq.n	8007476 <HAL_UART_IRQHandler+0x196>
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007454:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00c      	beq.n	8007476 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 82dd 	beq.w	8007a3c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d013      	beq.n	80074b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800748e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800749a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800749e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ca:	2b40      	cmp	r3, #64	@ 0x40
 80074cc:	d005      	beq.n	80074da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d054      	beq.n	8007584 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 f9fc 	bl	80088d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ea:	2b40      	cmp	r3, #64	@ 0x40
 80074ec:	d146      	bne.n	800757c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3308      	adds	r3, #8
 80074f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800750c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3308      	adds	r3, #8
 8007516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800751a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800751e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1d9      	bne.n	80074ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800754a:	4a15      	ldr	r2, [pc, #84]	@ (80075a0 <HAL_UART_IRQHandler+0x2c0>)
 800754c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007554:	4618      	mov	r0, r3
 8007556:	f7fa fca5 	bl	8001ea4 <HAL_DMA_Abort_IT>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d019      	beq.n	8007594 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800756e:	4610      	mov	r0, r2
 8007570:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007572:	e00f      	b.n	8007594 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa77 	bl	8007a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	e00b      	b.n	8007594 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa73 	bl	8007a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007582:	e007      	b.n	8007594 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa6f 	bl	8007a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007592:	e253      	b.n	8007a3c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007594:	bf00      	nop
    return;
 8007596:	e251      	b.n	8007a3c <HAL_UART_IRQHandler+0x75c>
 8007598:	10000001 	.word	0x10000001
 800759c:	04000120 	.word	0x04000120
 80075a0:	080089a5 	.word	0x080089a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	f040 81e7 	bne.w	800797c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 81e0 	beq.w	800797c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 81d9 	beq.w	800797c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2210      	movs	r2, #16
 80075d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075dc:	2b40      	cmp	r3, #64	@ 0x40
 80075de:	f040 8151 	bne.w	8007884 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a96      	ldr	r2, [pc, #600]	@ (8007844 <HAL_UART_IRQHandler+0x564>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d068      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a93      	ldr	r2, [pc, #588]	@ (8007848 <HAL_UART_IRQHandler+0x568>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d061      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a91      	ldr	r2, [pc, #580]	@ (800784c <HAL_UART_IRQHandler+0x56c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d05a      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a8e      	ldr	r2, [pc, #568]	@ (8007850 <HAL_UART_IRQHandler+0x570>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d053      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a8c      	ldr	r2, [pc, #560]	@ (8007854 <HAL_UART_IRQHandler+0x574>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04c      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a89      	ldr	r2, [pc, #548]	@ (8007858 <HAL_UART_IRQHandler+0x578>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d045      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a87      	ldr	r2, [pc, #540]	@ (800785c <HAL_UART_IRQHandler+0x57c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d03e      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a84      	ldr	r2, [pc, #528]	@ (8007860 <HAL_UART_IRQHandler+0x580>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d037      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a82      	ldr	r2, [pc, #520]	@ (8007864 <HAL_UART_IRQHandler+0x584>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d030      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a7f      	ldr	r2, [pc, #508]	@ (8007868 <HAL_UART_IRQHandler+0x588>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d029      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a7d      	ldr	r2, [pc, #500]	@ (800786c <HAL_UART_IRQHandler+0x58c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d022      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a7a      	ldr	r2, [pc, #488]	@ (8007870 <HAL_UART_IRQHandler+0x590>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d01b      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a78      	ldr	r2, [pc, #480]	@ (8007874 <HAL_UART_IRQHandler+0x594>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d014      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a75      	ldr	r2, [pc, #468]	@ (8007878 <HAL_UART_IRQHandler+0x598>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00d      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a73      	ldr	r2, [pc, #460]	@ (800787c <HAL_UART_IRQHandler+0x59c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d006      	beq.n	80076c2 <HAL_UART_IRQHandler+0x3e2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a70      	ldr	r2, [pc, #448]	@ (8007880 <HAL_UART_IRQHandler+0x5a0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d106      	bne.n	80076d0 <HAL_UART_IRQHandler+0x3f0>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	e005      	b.n	80076dc <HAL_UART_IRQHandler+0x3fc>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 81ab 	beq.w	8007a40 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f080 81a3 	bcs.w	8007a40 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007710:	f000 8087 	beq.w	8007822 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800772c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800773e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007742:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800774a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1da      	bne.n	8007714 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800776e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007782:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800778a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e1      	bne.n	800775e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3308      	adds	r3, #8
 80077ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e3      	bne.n	800779a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007802:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007804:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e4      	bne.n	80077e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800781c:	4618      	mov	r0, r3
 800781e:	f7fa f823 	bl	8001868 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007834:	b29b      	uxth	r3, r3
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	b29b      	uxth	r3, r3
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f91d 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007842:	e0fd      	b.n	8007a40 <HAL_UART_IRQHandler+0x760>
 8007844:	40020010 	.word	0x40020010
 8007848:	40020028 	.word	0x40020028
 800784c:	40020040 	.word	0x40020040
 8007850:	40020058 	.word	0x40020058
 8007854:	40020070 	.word	0x40020070
 8007858:	40020088 	.word	0x40020088
 800785c:	400200a0 	.word	0x400200a0
 8007860:	400200b8 	.word	0x400200b8
 8007864:	40020410 	.word	0x40020410
 8007868:	40020428 	.word	0x40020428
 800786c:	40020440 	.word	0x40020440
 8007870:	40020458 	.word	0x40020458
 8007874:	40020470 	.word	0x40020470
 8007878:	40020488 	.word	0x40020488
 800787c:	400204a0 	.word	0x400204a0
 8007880:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007890:	b29b      	uxth	r3, r3
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 80cf 	beq.w	8007a44 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80078a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 80ca 	beq.w	8007a44 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e4      	bne.n	80078b0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3308      	adds	r3, #8
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	623b      	str	r3, [r7, #32]
   return(result);
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	4b55      	ldr	r3, [pc, #340]	@ (8007a50 <HAL_UART_IRQHandler+0x770>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800790a:	633a      	str	r2, [r7, #48]	@ 0x30
 800790c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e3      	bne.n	80078e6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0310 	bic.w	r3, r3, #16
 8007946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	69b9      	ldr	r1, [r7, #24]
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	617b      	str	r3, [r7, #20]
   return(result);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e4      	bne.n	8007932 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800796e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f881 	bl	8007a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800797a:	e063      	b.n	8007a44 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800797c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00e      	beq.n	80079a6 <HAL_UART_IRQHandler+0x6c6>
 8007988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800798c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800799c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 f841 	bl	8008a26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079a4:	e051      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d014      	beq.n	80079dc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d03a      	beq.n	8007a48 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
    }
    return;
 80079da:	e035      	b.n	8007a48 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_UART_IRQHandler+0x71c>
 80079e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 ffeb 	bl	80089d0 <UART_EndTransmit_IT>
    return;
 80079fa:	e026      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <HAL_UART_IRQHandler+0x73c>
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f81a 	bl	8008a4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a1a:	e016      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d010      	beq.n	8007a4a <HAL_UART_IRQHandler+0x76a>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da0c      	bge.n	8007a4a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f802 	bl	8008a3a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a36:	e008      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a38:	bf00      	nop
 8007a3a:	e006      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
    return;
 8007a3c:	bf00      	nop
 8007a3e:	e004      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a40:	bf00      	nop
 8007a42:	e002      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a44:	bf00      	nop
 8007a46:	e000      	b.n	8007a4a <HAL_UART_IRQHandler+0x76a>
    return;
 8007a48:	bf00      	nop
  }
}
 8007a4a:	37e8      	adds	r7, #232	@ 0xe8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	effffffe 	.word	0xeffffffe

08007a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a98:	b092      	sub	sp, #72	@ 0x48
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4bbe      	ldr	r3, [pc, #760]	@ (8007dbc <UART_SetConfig+0x328>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007acc:	430b      	orrs	r3, r1
 8007ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4ab3      	ldr	r2, [pc, #716]	@ (8007dc0 <UART_SetConfig+0x32c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007afc:	4313      	orrs	r3, r2
 8007afe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	4baf      	ldr	r3, [pc, #700]	@ (8007dc4 <UART_SetConfig+0x330>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b10:	430b      	orrs	r3, r1
 8007b12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1a:	f023 010f 	bic.w	r1, r3, #15
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4aa6      	ldr	r2, [pc, #664]	@ (8007dc8 <UART_SetConfig+0x334>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d177      	bne.n	8007c24 <UART_SetConfig+0x190>
 8007b34:	4ba5      	ldr	r3, [pc, #660]	@ (8007dcc <UART_SetConfig+0x338>)
 8007b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b3c:	2b28      	cmp	r3, #40	@ 0x28
 8007b3e:	d86d      	bhi.n	8007c1c <UART_SetConfig+0x188>
 8007b40:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <UART_SetConfig+0xb4>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007bed 	.word	0x08007bed
 8007b4c:	08007c1d 	.word	0x08007c1d
 8007b50:	08007c1d 	.word	0x08007c1d
 8007b54:	08007c1d 	.word	0x08007c1d
 8007b58:	08007c1d 	.word	0x08007c1d
 8007b5c:	08007c1d 	.word	0x08007c1d
 8007b60:	08007c1d 	.word	0x08007c1d
 8007b64:	08007c1d 	.word	0x08007c1d
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007c1d 	.word	0x08007c1d
 8007b70:	08007c1d 	.word	0x08007c1d
 8007b74:	08007c1d 	.word	0x08007c1d
 8007b78:	08007c1d 	.word	0x08007c1d
 8007b7c:	08007c1d 	.word	0x08007c1d
 8007b80:	08007c1d 	.word	0x08007c1d
 8007b84:	08007c1d 	.word	0x08007c1d
 8007b88:	08007bfd 	.word	0x08007bfd
 8007b8c:	08007c1d 	.word	0x08007c1d
 8007b90:	08007c1d 	.word	0x08007c1d
 8007b94:	08007c1d 	.word	0x08007c1d
 8007b98:	08007c1d 	.word	0x08007c1d
 8007b9c:	08007c1d 	.word	0x08007c1d
 8007ba0:	08007c1d 	.word	0x08007c1d
 8007ba4:	08007c1d 	.word	0x08007c1d
 8007ba8:	08007c05 	.word	0x08007c05
 8007bac:	08007c1d 	.word	0x08007c1d
 8007bb0:	08007c1d 	.word	0x08007c1d
 8007bb4:	08007c1d 	.word	0x08007c1d
 8007bb8:	08007c1d 	.word	0x08007c1d
 8007bbc:	08007c1d 	.word	0x08007c1d
 8007bc0:	08007c1d 	.word	0x08007c1d
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c0d 	.word	0x08007c0d
 8007bcc:	08007c1d 	.word	0x08007c1d
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007c1d 	.word	0x08007c1d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c1d 	.word	0x08007c1d
 8007be0:	08007c1d 	.word	0x08007c1d
 8007be4:	08007c1d 	.word	0x08007c1d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e222      	b.n	800803a <UART_SetConfig+0x5a6>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e21e      	b.n	800803a <UART_SetConfig+0x5a6>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e21a      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c04:	2310      	movs	r3, #16
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e216      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e212      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c14:	2340      	movs	r3, #64	@ 0x40
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e20e      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c1c:	2380      	movs	r3, #128	@ 0x80
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e20a      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a69      	ldr	r2, [pc, #420]	@ (8007dd0 <UART_SetConfig+0x33c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d130      	bne.n	8007c90 <UART_SetConfig+0x1fc>
 8007c2e:	4b67      	ldr	r3, [pc, #412]	@ (8007dcc <UART_SetConfig+0x338>)
 8007c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d826      	bhi.n	8007c88 <UART_SetConfig+0x1f4>
 8007c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c40 <UART_SetConfig+0x1ac>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c59 	.word	0x08007c59
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	08007c69 	.word	0x08007c69
 8007c4c:	08007c71 	.word	0x08007c71
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e1ec      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e1e8      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e1e4      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e1e0      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e1dc      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c80:	2340      	movs	r3, #64	@ 0x40
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e1d8      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c88:	2380      	movs	r3, #128	@ 0x80
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e1d4      	b.n	800803a <UART_SetConfig+0x5a6>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a4f      	ldr	r2, [pc, #316]	@ (8007dd4 <UART_SetConfig+0x340>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d130      	bne.n	8007cfc <UART_SetConfig+0x268>
 8007c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8007dcc <UART_SetConfig+0x338>)
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d826      	bhi.n	8007cf4 <UART_SetConfig+0x260>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <UART_SetConfig+0x218>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e1b6      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e1b2      	b.n	800803a <UART_SetConfig+0x5a6>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e1ae      	b.n	800803a <UART_SetConfig+0x5a6>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e1aa      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e1a6      	b.n	800803a <UART_SetConfig+0x5a6>
 8007cec:	2340      	movs	r3, #64	@ 0x40
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e1a2      	b.n	800803a <UART_SetConfig+0x5a6>
 8007cf4:	2380      	movs	r3, #128	@ 0x80
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e19e      	b.n	800803a <UART_SetConfig+0x5a6>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a35      	ldr	r2, [pc, #212]	@ (8007dd8 <UART_SetConfig+0x344>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d130      	bne.n	8007d68 <UART_SetConfig+0x2d4>
 8007d06:	4b31      	ldr	r3, [pc, #196]	@ (8007dcc <UART_SetConfig+0x338>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d826      	bhi.n	8007d60 <UART_SetConfig+0x2cc>
 8007d12:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <UART_SetConfig+0x284>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d31 	.word	0x08007d31
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e180      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e17c      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e178      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e174      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d50:	2320      	movs	r3, #32
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e170      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d58:	2340      	movs	r3, #64	@ 0x40
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e16c      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d60:	2380      	movs	r3, #128	@ 0x80
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e168      	b.n	800803a <UART_SetConfig+0x5a6>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ddc <UART_SetConfig+0x348>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d142      	bne.n	8007df8 <UART_SetConfig+0x364>
 8007d72:	4b16      	ldr	r3, [pc, #88]	@ (8007dcc <UART_SetConfig+0x338>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d838      	bhi.n	8007df0 <UART_SetConfig+0x35c>
 8007d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <UART_SetConfig+0x2f0>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007de1 	.word	0x08007de1
 8007d98:	08007de9 	.word	0x08007de9
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e14a      	b.n	800803a <UART_SetConfig+0x5a6>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e146      	b.n	800803a <UART_SetConfig+0x5a6>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e142      	b.n	800803a <UART_SetConfig+0x5a6>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e13e      	b.n	800803a <UART_SetConfig+0x5a6>
 8007dbc:	cfff69f3 	.word	0xcfff69f3
 8007dc0:	58000c00 	.word	0x58000c00
 8007dc4:	11fff4ff 	.word	0x11fff4ff
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	40004400 	.word	0x40004400
 8007dd4:	40004800 	.word	0x40004800
 8007dd8:	40004c00 	.word	0x40004c00
 8007ddc:	40005000 	.word	0x40005000
 8007de0:	2320      	movs	r3, #32
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e128      	b.n	800803a <UART_SetConfig+0x5a6>
 8007de8:	2340      	movs	r3, #64	@ 0x40
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e124      	b.n	800803a <UART_SetConfig+0x5a6>
 8007df0:	2380      	movs	r3, #128	@ 0x80
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e120      	b.n	800803a <UART_SetConfig+0x5a6>
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4acb      	ldr	r2, [pc, #812]	@ (800812c <UART_SetConfig+0x698>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d176      	bne.n	8007ef0 <UART_SetConfig+0x45c>
 8007e02:	4bcb      	ldr	r3, [pc, #812]	@ (8008130 <UART_SetConfig+0x69c>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e0a:	2b28      	cmp	r3, #40	@ 0x28
 8007e0c:	d86c      	bhi.n	8007ee8 <UART_SetConfig+0x454>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0x380>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007eb9 	.word	0x08007eb9
 8007e18:	08007ee9 	.word	0x08007ee9
 8007e1c:	08007ee9 	.word	0x08007ee9
 8007e20:	08007ee9 	.word	0x08007ee9
 8007e24:	08007ee9 	.word	0x08007ee9
 8007e28:	08007ee9 	.word	0x08007ee9
 8007e2c:	08007ee9 	.word	0x08007ee9
 8007e30:	08007ee9 	.word	0x08007ee9
 8007e34:	08007ec1 	.word	0x08007ec1
 8007e38:	08007ee9 	.word	0x08007ee9
 8007e3c:	08007ee9 	.word	0x08007ee9
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007ee9 	.word	0x08007ee9
 8007e48:	08007ee9 	.word	0x08007ee9
 8007e4c:	08007ee9 	.word	0x08007ee9
 8007e50:	08007ee9 	.word	0x08007ee9
 8007e54:	08007ec9 	.word	0x08007ec9
 8007e58:	08007ee9 	.word	0x08007ee9
 8007e5c:	08007ee9 	.word	0x08007ee9
 8007e60:	08007ee9 	.word	0x08007ee9
 8007e64:	08007ee9 	.word	0x08007ee9
 8007e68:	08007ee9 	.word	0x08007ee9
 8007e6c:	08007ee9 	.word	0x08007ee9
 8007e70:	08007ee9 	.word	0x08007ee9
 8007e74:	08007ed1 	.word	0x08007ed1
 8007e78:	08007ee9 	.word	0x08007ee9
 8007e7c:	08007ee9 	.word	0x08007ee9
 8007e80:	08007ee9 	.word	0x08007ee9
 8007e84:	08007ee9 	.word	0x08007ee9
 8007e88:	08007ee9 	.word	0x08007ee9
 8007e8c:	08007ee9 	.word	0x08007ee9
 8007e90:	08007ee9 	.word	0x08007ee9
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ee9 	.word	0x08007ee9
 8007e9c:	08007ee9 	.word	0x08007ee9
 8007ea0:	08007ee9 	.word	0x08007ee9
 8007ea4:	08007ee9 	.word	0x08007ee9
 8007ea8:	08007ee9 	.word	0x08007ee9
 8007eac:	08007ee9 	.word	0x08007ee9
 8007eb0:	08007ee9 	.word	0x08007ee9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e0bc      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e0b8      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ece:	e0b4      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	e0b0      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ed8:	2320      	movs	r3, #32
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ede:	e0ac      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ee0:	2340      	movs	r3, #64	@ 0x40
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e0a8      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e0a4      	b.n	800803a <UART_SetConfig+0x5a6>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a8f      	ldr	r2, [pc, #572]	@ (8008134 <UART_SetConfig+0x6a0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d130      	bne.n	8007f5c <UART_SetConfig+0x4c8>
 8007efa:	4b8d      	ldr	r3, [pc, #564]	@ (8008130 <UART_SetConfig+0x69c>)
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d826      	bhi.n	8007f54 <UART_SetConfig+0x4c0>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <UART_SetConfig+0x478>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f25 	.word	0x08007f25
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f35 	.word	0x08007f35
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	2300      	movs	r3, #0
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e086      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e082      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3a:	e07e      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e07a      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f44:	2320      	movs	r3, #32
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4a:	e076      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f4c:	2340      	movs	r3, #64	@ 0x40
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e072      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f54:	2380      	movs	r3, #128	@ 0x80
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e06e      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a75      	ldr	r2, [pc, #468]	@ (8008138 <UART_SetConfig+0x6a4>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d130      	bne.n	8007fc8 <UART_SetConfig+0x534>
 8007f66:	4b72      	ldr	r3, [pc, #456]	@ (8008130 <UART_SetConfig+0x69c>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	d826      	bhi.n	8007fc0 <UART_SetConfig+0x52c>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <UART_SetConfig+0x4e4>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	08007fa1 	.word	0x08007fa1
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb9 	.word	0x08007fb9
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e050      	b.n	800803a <UART_SetConfig+0x5a6>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e04c      	b.n	800803a <UART_SetConfig+0x5a6>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e048      	b.n	800803a <UART_SetConfig+0x5a6>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e044      	b.n	800803a <UART_SetConfig+0x5a6>
 8007fb0:	2320      	movs	r3, #32
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb6:	e040      	b.n	800803a <UART_SetConfig+0x5a6>
 8007fb8:	2340      	movs	r3, #64	@ 0x40
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fbe:	e03c      	b.n	800803a <UART_SetConfig+0x5a6>
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e038      	b.n	800803a <UART_SetConfig+0x5a6>
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a5b      	ldr	r2, [pc, #364]	@ (800813c <UART_SetConfig+0x6a8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d130      	bne.n	8008034 <UART_SetConfig+0x5a0>
 8007fd2:	4b57      	ldr	r3, [pc, #348]	@ (8008130 <UART_SetConfig+0x69c>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d826      	bhi.n	800802c <UART_SetConfig+0x598>
 8007fde:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <UART_SetConfig+0x550>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08007ffd 	.word	0x08007ffd
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	0800800d 	.word	0x0800800d
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e01a      	b.n	800803a <UART_SetConfig+0x5a6>
 8008004:	2304      	movs	r3, #4
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e016      	b.n	800803a <UART_SetConfig+0x5a6>
 800800c:	2308      	movs	r3, #8
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e012      	b.n	800803a <UART_SetConfig+0x5a6>
 8008014:	2310      	movs	r3, #16
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801a:	e00e      	b.n	800803a <UART_SetConfig+0x5a6>
 800801c:	2320      	movs	r3, #32
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008022:	e00a      	b.n	800803a <UART_SetConfig+0x5a6>
 8008024:	2340      	movs	r3, #64	@ 0x40
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802a:	e006      	b.n	800803a <UART_SetConfig+0x5a6>
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008032:	e002      	b.n	800803a <UART_SetConfig+0x5a6>
 8008034:	2380      	movs	r3, #128	@ 0x80
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a3f      	ldr	r2, [pc, #252]	@ (800813c <UART_SetConfig+0x6a8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	f040 80f8 	bne.w	8008236 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008046:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800804a:	2b20      	cmp	r3, #32
 800804c:	dc46      	bgt.n	80080dc <UART_SetConfig+0x648>
 800804e:	2b02      	cmp	r3, #2
 8008050:	f2c0 8082 	blt.w	8008158 <UART_SetConfig+0x6c4>
 8008054:	3b02      	subs	r3, #2
 8008056:	2b1e      	cmp	r3, #30
 8008058:	d87e      	bhi.n	8008158 <UART_SetConfig+0x6c4>
 800805a:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <UART_SetConfig+0x5cc>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	080080e3 	.word	0x080080e3
 8008064:	08008159 	.word	0x08008159
 8008068:	080080eb 	.word	0x080080eb
 800806c:	08008159 	.word	0x08008159
 8008070:	08008159 	.word	0x08008159
 8008074:	08008159 	.word	0x08008159
 8008078:	080080fb 	.word	0x080080fb
 800807c:	08008159 	.word	0x08008159
 8008080:	08008159 	.word	0x08008159
 8008084:	08008159 	.word	0x08008159
 8008088:	08008159 	.word	0x08008159
 800808c:	08008159 	.word	0x08008159
 8008090:	08008159 	.word	0x08008159
 8008094:	08008159 	.word	0x08008159
 8008098:	0800810b 	.word	0x0800810b
 800809c:	08008159 	.word	0x08008159
 80080a0:	08008159 	.word	0x08008159
 80080a4:	08008159 	.word	0x08008159
 80080a8:	08008159 	.word	0x08008159
 80080ac:	08008159 	.word	0x08008159
 80080b0:	08008159 	.word	0x08008159
 80080b4:	08008159 	.word	0x08008159
 80080b8:	08008159 	.word	0x08008159
 80080bc:	08008159 	.word	0x08008159
 80080c0:	08008159 	.word	0x08008159
 80080c4:	08008159 	.word	0x08008159
 80080c8:	08008159 	.word	0x08008159
 80080cc:	08008159 	.word	0x08008159
 80080d0:	08008159 	.word	0x08008159
 80080d4:	08008159 	.word	0x08008159
 80080d8:	0800814b 	.word	0x0800814b
 80080dc:	2b40      	cmp	r3, #64	@ 0x40
 80080de:	d037      	beq.n	8008150 <UART_SetConfig+0x6bc>
 80080e0:	e03a      	b.n	8008158 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80080e2:	f7fe f88f 	bl	8006204 <HAL_RCCEx_GetD3PCLK1Freq>
 80080e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080e8:	e03c      	b.n	8008164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe f89e 	bl	8006230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f8:	e034      	b.n	8008164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080fa:	f107 0318 	add.w	r3, r7, #24
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe f9ea 	bl	80064d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008108:	e02c      	b.n	8008164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800810a:	4b09      	ldr	r3, [pc, #36]	@ (8008130 <UART_SetConfig+0x69c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d016      	beq.n	8008144 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008116:	4b06      	ldr	r3, [pc, #24]	@ (8008130 <UART_SetConfig+0x69c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	08db      	lsrs	r3, r3, #3
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	4a07      	ldr	r2, [pc, #28]	@ (8008140 <UART_SetConfig+0x6ac>)
 8008122:	fa22 f303 	lsr.w	r3, r2, r3
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008128:	e01c      	b.n	8008164 <UART_SetConfig+0x6d0>
 800812a:	bf00      	nop
 800812c:	40011400 	.word	0x40011400
 8008130:	58024400 	.word	0x58024400
 8008134:	40007800 	.word	0x40007800
 8008138:	40007c00 	.word	0x40007c00
 800813c:	58000c00 	.word	0x58000c00
 8008140:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008144:	4b9d      	ldr	r3, [pc, #628]	@ (80083bc <UART_SetConfig+0x928>)
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008148:	e00c      	b.n	8008164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800814a:	4b9d      	ldr	r3, [pc, #628]	@ (80083c0 <UART_SetConfig+0x92c>)
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	e009      	b.n	8008164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008156:	e005      	b.n	8008164 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008162:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 81de 	beq.w	8008528 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008170:	4a94      	ldr	r2, [pc, #592]	@ (80083c4 <UART_SetConfig+0x930>)
 8008172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008176:	461a      	mov	r2, r3
 8008178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800817a:	fbb3 f3f2 	udiv	r3, r3, r2
 800817e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	4413      	add	r3, r2
 800818a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800818c:	429a      	cmp	r2, r3
 800818e:	d305      	bcc.n	800819c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008198:	429a      	cmp	r2, r3
 800819a:	d903      	bls.n	80081a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081a2:	e1c1      	b.n	8008528 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a6:	2200      	movs	r2, #0
 80081a8:	60bb      	str	r3, [r7, #8]
 80081aa:	60fa      	str	r2, [r7, #12]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b0:	4a84      	ldr	r2, [pc, #528]	@ (80083c4 <UART_SetConfig+0x930>)
 80081b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	2200      	movs	r2, #0
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081c6:	f7f8 f887 	bl	80002d8 <__aeabi_uldivmod>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4610      	mov	r0, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	020b      	lsls	r3, r1, #8
 80081dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081e0:	0202      	lsls	r2, r0, #8
 80081e2:	6979      	ldr	r1, [r7, #20]
 80081e4:	6849      	ldr	r1, [r1, #4]
 80081e6:	0849      	lsrs	r1, r1, #1
 80081e8:	2000      	movs	r0, #0
 80081ea:	460c      	mov	r4, r1
 80081ec:	4605      	mov	r5, r0
 80081ee:	eb12 0804 	adds.w	r8, r2, r4
 80081f2:	eb43 0905 	adc.w	r9, r3, r5
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	469a      	mov	sl, r3
 80081fe:	4693      	mov	fp, r2
 8008200:	4652      	mov	r2, sl
 8008202:	465b      	mov	r3, fp
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 f866 	bl	80002d8 <__aeabi_uldivmod>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4613      	mov	r3, r2
 8008212:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800821a:	d308      	bcc.n	800822e <UART_SetConfig+0x79a>
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008222:	d204      	bcs.n	800822e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800822a:	60da      	str	r2, [r3, #12]
 800822c:	e17c      	b.n	8008528 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008234:	e178      	b.n	8008528 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800823e:	f040 80c5 	bne.w	80083cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008242:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008246:	2b20      	cmp	r3, #32
 8008248:	dc48      	bgt.n	80082dc <UART_SetConfig+0x848>
 800824a:	2b00      	cmp	r3, #0
 800824c:	db7b      	blt.n	8008346 <UART_SetConfig+0x8b2>
 800824e:	2b20      	cmp	r3, #32
 8008250:	d879      	bhi.n	8008346 <UART_SetConfig+0x8b2>
 8008252:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <UART_SetConfig+0x7c4>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	080082e3 	.word	0x080082e3
 800825c:	080082eb 	.word	0x080082eb
 8008260:	08008347 	.word	0x08008347
 8008264:	08008347 	.word	0x08008347
 8008268:	080082f3 	.word	0x080082f3
 800826c:	08008347 	.word	0x08008347
 8008270:	08008347 	.word	0x08008347
 8008274:	08008347 	.word	0x08008347
 8008278:	08008303 	.word	0x08008303
 800827c:	08008347 	.word	0x08008347
 8008280:	08008347 	.word	0x08008347
 8008284:	08008347 	.word	0x08008347
 8008288:	08008347 	.word	0x08008347
 800828c:	08008347 	.word	0x08008347
 8008290:	08008347 	.word	0x08008347
 8008294:	08008347 	.word	0x08008347
 8008298:	08008313 	.word	0x08008313
 800829c:	08008347 	.word	0x08008347
 80082a0:	08008347 	.word	0x08008347
 80082a4:	08008347 	.word	0x08008347
 80082a8:	08008347 	.word	0x08008347
 80082ac:	08008347 	.word	0x08008347
 80082b0:	08008347 	.word	0x08008347
 80082b4:	08008347 	.word	0x08008347
 80082b8:	08008347 	.word	0x08008347
 80082bc:	08008347 	.word	0x08008347
 80082c0:	08008347 	.word	0x08008347
 80082c4:	08008347 	.word	0x08008347
 80082c8:	08008347 	.word	0x08008347
 80082cc:	08008347 	.word	0x08008347
 80082d0:	08008347 	.word	0x08008347
 80082d4:	08008347 	.word	0x08008347
 80082d8:	08008339 	.word	0x08008339
 80082dc:	2b40      	cmp	r3, #64	@ 0x40
 80082de:	d02e      	beq.n	800833e <UART_SetConfig+0x8aa>
 80082e0:	e031      	b.n	8008346 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e2:	f7fc fd59 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 80082e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082e8:	e033      	b.n	8008352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082ea:	f7fc fd6b 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 80082ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082f0:	e02f      	b.n	8008352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fd ff9a 	bl	8006230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008300:	e027      	b.n	8008352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008302:	f107 0318 	add.w	r3, r7, #24
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe f8e6 	bl	80064d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008310:	e01f      	b.n	8008352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008312:	4b2d      	ldr	r3, [pc, #180]	@ (80083c8 <UART_SetConfig+0x934>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800831e:	4b2a      	ldr	r3, [pc, #168]	@ (80083c8 <UART_SetConfig+0x934>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	08db      	lsrs	r3, r3, #3
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	4a24      	ldr	r2, [pc, #144]	@ (80083bc <UART_SetConfig+0x928>)
 800832a:	fa22 f303 	lsr.w	r3, r2, r3
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008330:	e00f      	b.n	8008352 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008332:	4b22      	ldr	r3, [pc, #136]	@ (80083bc <UART_SetConfig+0x928>)
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008336:	e00c      	b.n	8008352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008338:	4b21      	ldr	r3, [pc, #132]	@ (80083c0 <UART_SetConfig+0x92c>)
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833c:	e009      	b.n	8008352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008344:	e005      	b.n	8008352 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80e7 	beq.w	8008528 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	4a19      	ldr	r2, [pc, #100]	@ (80083c4 <UART_SetConfig+0x930>)
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	461a      	mov	r2, r3
 8008366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008368:	fbb3 f3f2 	udiv	r3, r3, r2
 800836c:	005a      	lsls	r2, r3, #1
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	441a      	add	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	fbb2 f3f3 	udiv	r3, r2, r3
 800837e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	2b0f      	cmp	r3, #15
 8008384:	d916      	bls.n	80083b4 <UART_SetConfig+0x920>
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800838c:	d212      	bcs.n	80083b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800838e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008390:	b29b      	uxth	r3, r3
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083a6:	4313      	orrs	r3, r2
 80083a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	e0b9      	b.n	8008528 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80083ba:	e0b5      	b.n	8008528 <UART_SetConfig+0xa94>
 80083bc:	03d09000 	.word	0x03d09000
 80083c0:	003d0900 	.word	0x003d0900
 80083c4:	080094d0 	.word	0x080094d0
 80083c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80083cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	dc49      	bgt.n	8008468 <UART_SetConfig+0x9d4>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	db7c      	blt.n	80084d2 <UART_SetConfig+0xa3e>
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d87a      	bhi.n	80084d2 <UART_SetConfig+0xa3e>
 80083dc:	a201      	add	r2, pc, #4	@ (adr r2, 80083e4 <UART_SetConfig+0x950>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	0800846f 	.word	0x0800846f
 80083e8:	08008477 	.word	0x08008477
 80083ec:	080084d3 	.word	0x080084d3
 80083f0:	080084d3 	.word	0x080084d3
 80083f4:	0800847f 	.word	0x0800847f
 80083f8:	080084d3 	.word	0x080084d3
 80083fc:	080084d3 	.word	0x080084d3
 8008400:	080084d3 	.word	0x080084d3
 8008404:	0800848f 	.word	0x0800848f
 8008408:	080084d3 	.word	0x080084d3
 800840c:	080084d3 	.word	0x080084d3
 8008410:	080084d3 	.word	0x080084d3
 8008414:	080084d3 	.word	0x080084d3
 8008418:	080084d3 	.word	0x080084d3
 800841c:	080084d3 	.word	0x080084d3
 8008420:	080084d3 	.word	0x080084d3
 8008424:	0800849f 	.word	0x0800849f
 8008428:	080084d3 	.word	0x080084d3
 800842c:	080084d3 	.word	0x080084d3
 8008430:	080084d3 	.word	0x080084d3
 8008434:	080084d3 	.word	0x080084d3
 8008438:	080084d3 	.word	0x080084d3
 800843c:	080084d3 	.word	0x080084d3
 8008440:	080084d3 	.word	0x080084d3
 8008444:	080084d3 	.word	0x080084d3
 8008448:	080084d3 	.word	0x080084d3
 800844c:	080084d3 	.word	0x080084d3
 8008450:	080084d3 	.word	0x080084d3
 8008454:	080084d3 	.word	0x080084d3
 8008458:	080084d3 	.word	0x080084d3
 800845c:	080084d3 	.word	0x080084d3
 8008460:	080084d3 	.word	0x080084d3
 8008464:	080084c5 	.word	0x080084c5
 8008468:	2b40      	cmp	r3, #64	@ 0x40
 800846a:	d02e      	beq.n	80084ca <UART_SetConfig+0xa36>
 800846c:	e031      	b.n	80084d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800846e:	f7fc fc93 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8008472:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008474:	e033      	b.n	80084de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008476:	f7fc fca5 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 800847a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800847c:	e02f      	b.n	80084de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800847e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008482:	4618      	mov	r0, r3
 8008484:	f7fd fed4 	bl	8006230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848c:	e027      	b.n	80084de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800848e:	f107 0318 	add.w	r3, r7, #24
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe f820 	bl	80064d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849c:	e01f      	b.n	80084de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800849e:	4b2d      	ldr	r3, [pc, #180]	@ (8008554 <UART_SetConfig+0xac0>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008554 <UART_SetConfig+0xac0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	08db      	lsrs	r3, r3, #3
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	4a28      	ldr	r2, [pc, #160]	@ (8008558 <UART_SetConfig+0xac4>)
 80084b6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084bc:	e00f      	b.n	80084de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80084be:	4b26      	ldr	r3, [pc, #152]	@ (8008558 <UART_SetConfig+0xac4>)
 80084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c2:	e00c      	b.n	80084de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084c4:	4b25      	ldr	r3, [pc, #148]	@ (800855c <UART_SetConfig+0xac8>)
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c8:	e009      	b.n	80084de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d0:	e005      	b.n	80084de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80084dc:	bf00      	nop
    }

    if (pclk != 0U)
 80084de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d021      	beq.n	8008528 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008560 <UART_SetConfig+0xacc>)
 80084ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	441a      	add	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	fbb2 f3f3 	udiv	r3, r2, r3
 8008506:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d909      	bls.n	8008522 <UART_SetConfig+0xa8e>
 800850e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d205      	bcs.n	8008522 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008518:	b29a      	uxth	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60da      	str	r2, [r3, #12]
 8008520:	e002      	b.n	8008528 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2201      	movs	r2, #1
 800852c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2201      	movs	r2, #1
 8008534:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2200      	movs	r2, #0
 800853c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2200      	movs	r2, #0
 8008542:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008544:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008548:	4618      	mov	r0, r3
 800854a:	3748      	adds	r7, #72	@ 0x48
 800854c:	46bd      	mov	sp, r7
 800854e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008552:	bf00      	nop
 8008554:	58024400 	.word	0x58024400
 8008558:	03d09000 	.word	0x03d09000
 800855c:	003d0900 	.word	0x003d0900
 8008560:	080094d0 	.word	0x080094d0

08008564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01a      	beq.n	800867a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008662:	d10a      	bne.n	800867a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b098      	sub	sp, #96	@ 0x60
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086b8:	f7f8 ff76 	bl	80015a8 <HAL_GetTick>
 80086bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b08      	cmp	r3, #8
 80086ca:	d12f      	bne.n	800872c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086d4:	2200      	movs	r2, #0
 80086d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f88e 	bl	80087fc <UART_WaitOnFlagUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d022      	beq.n	800872c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008704:	647b      	str	r3, [r7, #68]	@ 0x44
 8008706:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800870a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e6      	bne.n	80086e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e063      	b.n	80087f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b04      	cmp	r3, #4
 8008738:	d149      	bne.n	80087ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800873a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008742:	2200      	movs	r2, #0
 8008744:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f857 	bl	80087fc <UART_WaitOnFlagUntilTimeout>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d03c      	beq.n	80087ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	623b      	str	r3, [r7, #32]
   return(result);
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008772:	633b      	str	r3, [r7, #48]	@ 0x30
 8008774:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e6      	bne.n	8008754 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	60fb      	str	r3, [r7, #12]
   return(result);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f023 0301 	bic.w	r3, r3, #1
 800879c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3308      	adds	r3, #8
 80087a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087a6:	61fa      	str	r2, [r7, #28]
 80087a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	69b9      	ldr	r1, [r7, #24]
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	617b      	str	r3, [r7, #20]
   return(result);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e5      	bne.n	8008786 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e012      	b.n	80087f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3758      	adds	r7, #88	@ 0x58
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800880c:	e04f      	b.n	80088ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d04b      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008816:	f7f8 fec7 	bl	80015a8 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <UART_WaitOnFlagUntilTimeout+0x30>
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e04e      	b.n	80088ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	d037      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b80      	cmp	r3, #128	@ 0x80
 8008842:	d034      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b40      	cmp	r3, #64	@ 0x40
 8008848:	d031      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f003 0308 	and.w	r3, r3, #8
 8008854:	2b08      	cmp	r3, #8
 8008856:	d110      	bne.n	800887a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2208      	movs	r2, #8
 800885e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f839 	bl	80088d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2208      	movs	r2, #8
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e029      	b.n	80088ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008888:	d111      	bne.n	80088ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 f81f 	bl	80088d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e00f      	b.n	80088ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4013      	ands	r3, r2
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	bf0c      	ite	eq
 80088be:	2301      	moveq	r3, #1
 80088c0:	2300      	movne	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d0a0      	beq.n	800880e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b095      	sub	sp, #84	@ 0x54
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008900:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e6      	bne.n	80088e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	61fb      	str	r3, [r7, #28]
   return(result);
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	4b1e      	ldr	r3, [pc, #120]	@ (80089a0 <UART_EndRxTransfer+0xc8>)
 8008926:	4013      	ands	r3, r2
 8008928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e5      	bne.n	8008912 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800894a:	2b01      	cmp	r3, #1
 800894c:	d118      	bne.n	8008980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	60bb      	str	r3, [r7, #8]
   return(result);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f023 0310 	bic.w	r3, r3, #16
 8008962:	647b      	str	r3, [r7, #68]	@ 0x44
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6979      	ldr	r1, [r7, #20]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	613b      	str	r3, [r7, #16]
   return(result);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e6      	bne.n	800894e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008994:	bf00      	nop
 8008996:	3754      	adds	r7, #84	@ 0x54
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	effffffe 	.word	0xeffffffe

080089a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff f850 	bl	8007a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6979      	ldr	r1, [r7, #20]
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	613b      	str	r3, [r7, #16]
   return(result);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e6      	bne.n	80089d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff f81b 	bl	8007a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a1e:	bf00      	nop
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e027      	b.n	8008ac8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2224      	movs	r2, #36	@ 0x24
 8008a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0201 	bic.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008aa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e02d      	b.n	8008b48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2224      	movs	r2, #36	@ 0x24
 8008af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0201 	bic.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f84f 	bl	8008bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e02d      	b.n	8008bc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2224      	movs	r2, #36	@ 0x24
 8008b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0201 	bic.w	r2, r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f811 	bl	8008bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d108      	bne.n	8008bee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bec:	e031      	b.n	8008c52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bee:	2310      	movs	r3, #16
 8008bf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bf2:	2310      	movs	r3, #16
 8008bf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	0e5b      	lsrs	r3, r3, #25
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	0f5b      	lsrs	r3, r3, #29
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	7b3a      	ldrb	r2, [r7, #12]
 8008c1a:	4911      	ldr	r1, [pc, #68]	@ (8008c60 <UARTEx_SetNbDataToProcess+0x94>)
 8008c1c:	5c8a      	ldrb	r2, [r1, r2]
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c22:	7b3a      	ldrb	r2, [r7, #12]
 8008c24:	490f      	ldr	r1, [pc, #60]	@ (8008c64 <UARTEx_SetNbDataToProcess+0x98>)
 8008c26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	7b7a      	ldrb	r2, [r7, #13]
 8008c38:	4909      	ldr	r1, [pc, #36]	@ (8008c60 <UARTEx_SetNbDataToProcess+0x94>)
 8008c3a:	5c8a      	ldrb	r2, [r1, r2]
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c40:	7b7a      	ldrb	r2, [r7, #13]
 8008c42:	4908      	ldr	r1, [pc, #32]	@ (8008c64 <UARTEx_SetNbDataToProcess+0x98>)
 8008c44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	080094e8 	.word	0x080094e8
 8008c64:	080094f0 	.word	0x080094f0

08008c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c68:	b084      	sub	sp, #16
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	f107 001c 	add.w	r0, r7, #28
 8008c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d121      	bne.n	8008cc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	4b2c      	ldr	r3, [pc, #176]	@ (8008d44 <USB_CoreInit+0xdc>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d105      	bne.n	8008cba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 faaa 	bl	8009214 <USB_CoreReset>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
 8008cc4:	e01b      	b.n	8008cfe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa9e 	bl	8009214 <USB_CoreReset>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008cdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cf0:	e005      	b.n	8008cfe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008cfe:	7fbb      	ldrb	r3, [r7, #30]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d116      	bne.n	8008d32 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <USB_CoreInit+0xe0>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f043 0206 	orr.w	r2, r3, #6
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f043 0220 	orr.w	r2, r3, #32
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d3e:	b004      	add	sp, #16
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	ffbdffbf 	.word	0xffbdffbf
 8008d48:	03ee0000 	.word	0x03ee0000

08008d4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f023 0201 	bic.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d115      	bne.n	8008dbc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d9c:	200a      	movs	r0, #10
 8008d9e:	f7f8 fc0f 	bl	80015c0 <HAL_Delay>
      ms += 10U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	330a      	adds	r3, #10
 8008da6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fa25 	bl	80091f8 <USB_GetMode>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d01e      	beq.n	8008df2 <USB_SetCurrentMode+0x84>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2bc7      	cmp	r3, #199	@ 0xc7
 8008db8:	d9f0      	bls.n	8008d9c <USB_SetCurrentMode+0x2e>
 8008dba:	e01a      	b.n	8008df2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d115      	bne.n	8008dee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008dce:	200a      	movs	r0, #10
 8008dd0:	f7f8 fbf6 	bl	80015c0 <HAL_Delay>
      ms += 10U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	330a      	adds	r3, #10
 8008dd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa0c 	bl	80091f8 <USB_GetMode>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <USB_SetCurrentMode+0x84>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2bc7      	cmp	r3, #199	@ 0xc7
 8008dea:	d9f0      	bls.n	8008dce <USB_SetCurrentMode+0x60>
 8008dec:	e001      	b.n	8008df2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e005      	b.n	8008dfe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2bc8      	cmp	r3, #200	@ 0xc8
 8008df6:	d101      	bne.n	8008dfc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e000      	b.n	8008dfe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e08:	b084      	sub	sp, #16
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	e009      	b.n	8008e3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3340      	adds	r3, #64	@ 0x40
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b0e      	cmp	r3, #14
 8008e40:	d9f2      	bls.n	8008e28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d11c      	bne.n	8008e84 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e62:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e005      	b.n	8008e90 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e96:	461a      	mov	r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d10d      	bne.n	8008ec0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f968 	bl	8009184 <USB_SetDevSpeed>
 8008eb4:	e008      	b.n	8008ec8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f963 	bl	8009184 <USB_SetDevSpeed>
 8008ebe:	e003      	b.n	8008ec8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ec0:	2103      	movs	r1, #3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f95e 	bl	8009184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ec8:	2110      	movs	r1, #16
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f8fa 	bl	80090c4 <USB_FlushTxFifo>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f924 	bl	8009128 <USB_FlushRxFifo>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008efc:	461a      	mov	r2, r3
 8008efe:	2300      	movs	r3, #0
 8008f00:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f08:	461a      	mov	r2, r3
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f0e:	2300      	movs	r3, #0
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e043      	b.n	8008f9c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f2a:	d118      	bne.n	8008f5e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	e013      	b.n	8008f70 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f54:	461a      	mov	r2, r3
 8008f56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	e008      	b.n	8008f70 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2300      	movs	r3, #0
 8008f80:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d3b5      	bcc.n	8008f14 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	e043      	b.n	8009036 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fc4:	d118      	bne.n	8008ff8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e013      	b.n	800900a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e008      	b.n	800900a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009004:	461a      	mov	r2, r3
 8009006:	2300      	movs	r3, #0
 8009008:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009016:	461a      	mov	r2, r3
 8009018:	2300      	movs	r3, #0
 800901a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009028:	461a      	mov	r2, r3
 800902a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800902e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	3301      	adds	r3, #1
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800903a:	461a      	mov	r2, r3
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	4293      	cmp	r3, r2
 8009040:	d3b5      	bcc.n	8008fae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009054:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009062:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f043 0210 	orr.w	r2, r3, #16
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	4b0f      	ldr	r3, [pc, #60]	@ (80090bc <USB_DevInit+0x2b4>)
 800907e:	4313      	orrs	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009084:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f043 0208 	orr.w	r2, r3, #8
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009098:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800909c:	2b01      	cmp	r3, #1
 800909e:	d105      	bne.n	80090ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <USB_DevInit+0x2b8>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090b8:	b004      	add	sp, #16
 80090ba:	4770      	bx	lr
 80090bc:	803c3800 	.word	0x803c3800
 80090c0:	40000004 	.word	0x40000004

080090c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3301      	adds	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090de:	d901      	bls.n	80090e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e01b      	b.n	800911c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	daf2      	bge.n	80090d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	019b      	lsls	r3, r3, #6
 80090f4:	f043 0220 	orr.w	r2, r3, #32
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009108:	d901      	bls.n	800910e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e006      	b.n	800911c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b20      	cmp	r3, #32
 8009118:	d0f0      	beq.n	80090fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009140:	d901      	bls.n	8009146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e018      	b.n	8009178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	daf2      	bge.n	8009134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2210      	movs	r2, #16
 8009156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3301      	adds	r3, #1
 800915c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009164:	d901      	bls.n	800916a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e006      	b.n	8009178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	f003 0310 	and.w	r3, r3, #16
 8009172:	2b10      	cmp	r3, #16
 8009174:	d0f0      	beq.n	8009158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091a4:	4313      	orrs	r3, r2
 80091a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091e4:	f043 0302 	orr.w	r3, r3, #2
 80091e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	f003 0301 	and.w	r3, r3, #1
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3301      	adds	r3, #1
 8009224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800922c:	d901      	bls.n	8009232 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e01b      	b.n	800926a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	daf2      	bge.n	8009220 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f043 0201 	orr.w	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009256:	d901      	bls.n	800925c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e006      	b.n	800926a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b01      	cmp	r3, #1
 8009266:	d0f0      	beq.n	800924a <USB_CoreReset+0x36>

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <memset>:
 8009276:	4402      	add	r2, r0
 8009278:	4603      	mov	r3, r0
 800927a:	4293      	cmp	r3, r2
 800927c:	d100      	bne.n	8009280 <memset+0xa>
 800927e:	4770      	bx	lr
 8009280:	f803 1b01 	strb.w	r1, [r3], #1
 8009284:	e7f9      	b.n	800927a <memset+0x4>
	...

08009288 <__libc_init_array>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4d0d      	ldr	r5, [pc, #52]	@ (80092c0 <__libc_init_array+0x38>)
 800928c:	4c0d      	ldr	r4, [pc, #52]	@ (80092c4 <__libc_init_array+0x3c>)
 800928e:	1b64      	subs	r4, r4, r5
 8009290:	10a4      	asrs	r4, r4, #2
 8009292:	2600      	movs	r6, #0
 8009294:	42a6      	cmp	r6, r4
 8009296:	d109      	bne.n	80092ac <__libc_init_array+0x24>
 8009298:	4d0b      	ldr	r5, [pc, #44]	@ (80092c8 <__libc_init_array+0x40>)
 800929a:	4c0c      	ldr	r4, [pc, #48]	@ (80092cc <__libc_init_array+0x44>)
 800929c:	f000 f818 	bl	80092d0 <_init>
 80092a0:	1b64      	subs	r4, r4, r5
 80092a2:	10a4      	asrs	r4, r4, #2
 80092a4:	2600      	movs	r6, #0
 80092a6:	42a6      	cmp	r6, r4
 80092a8:	d105      	bne.n	80092b6 <__libc_init_array+0x2e>
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b0:	4798      	blx	r3
 80092b2:	3601      	adds	r6, #1
 80092b4:	e7ee      	b.n	8009294 <__libc_init_array+0xc>
 80092b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ba:	4798      	blx	r3
 80092bc:	3601      	adds	r6, #1
 80092be:	e7f2      	b.n	80092a6 <__libc_init_array+0x1e>
 80092c0:	08009500 	.word	0x08009500
 80092c4:	08009500 	.word	0x08009500
 80092c8:	08009500 	.word	0x08009500
 80092cc:	08009504 	.word	0x08009504

080092d0 <_init>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr

080092dc <_fini>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr
