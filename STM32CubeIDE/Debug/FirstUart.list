
FirstUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800a188  0800a188  0000b188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a224  0800a224  0000b224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a22c  0800a22c  0000b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a230  0800a230  0000b230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a234  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800a294  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a2f4  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  24000120  0800a354  0000c120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000958  0800a354  0000c958  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d20c  00000000  00000000  0000c14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003146  00000000  00000000  0002935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f04  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385dc  00000000  00000000  0002e6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c506  00000000  00000000  00066cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016269c  00000000  00000000  000831c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e5862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d8  00000000  00000000  001e58a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001eb080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a170 	.word	0x0800a170

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800a170 	.word	0x0800a170

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 feb6 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f816 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f99e 	bl	80009cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f892 	bl	80007b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000694:	f000 f91c 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 f966 	bl	8000968 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800069c:	f000 f8d8 	bl	8000850 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006a0:	2209      	movs	r2, #9
 80006a2:	4903      	ldr	r1, [pc, #12]	@ (80006b0 <main+0x30>)
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <main+0x34>)
 80006a6:	f006 fa59 	bl	8006b5c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <main+0x2a>
 80006ae:	bf00      	nop
 80006b0:	240007f4 	.word	0x240007f4
 80006b4:	24000278 	.word	0x24000278

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09c      	sub	sp, #112	@ 0x70
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c2:	224c      	movs	r2, #76	@ 0x4c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f009 f8c0 	bl	800984c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2220      	movs	r2, #32
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f009 f8ba 	bl	800984c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d8:	2002      	movs	r0, #2
 80006da:	f003 fb05 	bl	8003ce8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <SystemClock_Config+0xf8>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	4a32      	ldr	r2, [pc, #200]	@ (80007b0 <SystemClock_Config+0xf8>)
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006ee:	4b30      	ldr	r3, [pc, #192]	@ (80007b0 <SystemClock_Config+0xf8>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <SystemClock_Config+0xfc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a2c      	ldr	r2, [pc, #176]	@ (80007b4 <SystemClock_Config+0xfc>)
 8000702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <SystemClock_Config+0xfc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000714:	bf00      	nop
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xfc>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800071e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000722:	d1f8      	bne.n	8000716 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000724:	2303      	movs	r3, #3
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800072e:	2301      	movs	r3, #1
 8000730:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000732:	2340      	movs	r3, #64	@ 0x40
 8000734:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	2302      	movs	r3, #2
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000742:	2318      	movs	r3, #24
 8000744:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074a:	2304      	movs	r3, #4
 800074c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000752:	230c      	movs	r3, #12
 8000754:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000756:	2300      	movs	r3, #0
 8000758:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fb0a 	bl	8003d7c <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800076e:	f000 fad1 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	233f      	movs	r3, #63	@ 0x3f
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f003 ff4a 	bl	8004630 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007a2:	f000 fab7 	bl	8000d14 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3770      	adds	r7, #112	@ 0x70
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	58000400 	.word	0x58000400
 80007b4:	58024800 	.word	0x58024800

080007b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_ETH_Init+0x80>)
 80007be:	4a1f      	ldr	r2, [pc, #124]	@ (800083c <MX_ETH_Init+0x84>)
 80007c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_ETH_Init+0x88>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <MX_ETH_Init+0x88>)
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_ETH_Init+0x88>)
 80007d0:	22e1      	movs	r2, #225	@ 0xe1
 80007d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_ETH_Init+0x88>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_ETH_Init+0x88>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_ETH_Init+0x88>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_ETH_Init+0x80>)
 80007e8:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <MX_ETH_Init+0x88>)
 80007ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_ETH_Init+0x80>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_ETH_Init+0x80>)
 80007f4:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <MX_ETH_Init+0x8c>)
 80007f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_ETH_Init+0x80>)
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <MX_ETH_Init+0x90>)
 80007fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_ETH_Init+0x80>)
 8000800:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000804:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000806:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_ETH_Init+0x80>)
 8000808:	f001 fd3e 	bl	8002288 <HAL_ETH_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000812:	f000 fa7f 	bl	8000d14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000816:	2238      	movs	r2, #56	@ 0x38
 8000818:	2100      	movs	r1, #0
 800081a:	480c      	ldr	r0, [pc, #48]	@ (800084c <MX_ETH_Init+0x94>)
 800081c:	f009 f816 	bl	800984c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_ETH_Init+0x94>)
 8000822:	2221      	movs	r2, #33	@ 0x21
 8000824:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_ETH_Init+0x94>)
 8000828:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800082c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_ETH_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000174 	.word	0x24000174
 800083c:	40028000 	.word	0x40028000
 8000840:	24000800 	.word	0x24000800
 8000844:	240000c0 	.word	0x240000c0
 8000848:	24000060 	.word	0x24000060
 800084c:	2400013c 	.word	0x2400013c

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f002 fb14 	bl	8002eb8 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fa3d 	bl	8000d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f003 f85b 	bl	8003958 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fa34 	bl	8000d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f003 f89d 	bl	80039ee <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fa2b 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24000224 	.word	0x24000224
 80008c8:	40005400 	.word	0x40005400
 80008cc:	10707dbc 	.word	0x10707dbc

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART3_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800091a:	f006 f841 	bl	80069a0 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f9f6 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800092c:	f008 fb9b 	bl	8009066 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f9ed 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800093e:	f008 fbd0 	bl	80090e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f9e4 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800094e:	f008 fb51 	bl	8008ff4 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f9dc 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000278 	.word	0x24000278
 8000964:	40004800 	.word	0x40004800

08000968 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000974:	2209      	movs	r2, #9
 8000976:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097a:	2202      	movs	r2, #2
 800097c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000986:	2202      	movs	r2, #2
 8000988:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098c:	2201      	movs	r2, #1
 800098e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b0:	f003 f869 	bl	8003a86 <HAL_PCD_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 f9ab 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2400030c 	.word	0x2400030c
 80009c8:	40080000 	.word	0x40080000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b66      	ldr	r3, [pc, #408]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a64      	ldr	r2, [pc, #400]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b62      	ldr	r3, [pc, #392]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a00:	4b5e      	ldr	r3, [pc, #376]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a5d      	ldr	r2, [pc, #372]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b5a      	ldr	r3, [pc, #360]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b57      	ldr	r3, [pc, #348]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4a55      	ldr	r2, [pc, #340]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4b53      	ldr	r3, [pc, #332]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4a4e      	ldr	r2, [pc, #312]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4b48      	ldr	r3, [pc, #288]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	4a46      	ldr	r2, [pc, #280]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6a:	4b44      	ldr	r3, [pc, #272]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a78:	4b40      	ldr	r3, [pc, #256]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a88:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a37      	ldr	r2, [pc, #220]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b35      	ldr	r3, [pc, #212]	@ (8000b7c <MX_GPIO_Init+0x1b0>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000aba:	4831      	ldr	r0, [pc, #196]	@ (8000b80 <MX_GPIO_Init+0x1b4>)
 8000abc:	f002 f9c8 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac6:	482f      	ldr	r0, [pc, #188]	@ (8000b84 <MX_GPIO_Init+0x1b8>)
 8000ac8:	f002 f9c2 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	482d      	ldr	r0, [pc, #180]	@ (8000b88 <MX_GPIO_Init+0x1bc>)
 8000ad2:	f002 f9bd 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000adc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <MX_GPIO_Init+0x1c0>)
 8000aee:	f001 ffff 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000af2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481d      	ldr	r0, [pc, #116]	@ (8000b80 <MX_GPIO_Init+0x1b4>)
 8000b0c:	f001 fff0 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <MX_GPIO_Init+0x1b8>)
 8000b2a:	f001 ffe1 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b2e:	2380      	movs	r3, #128	@ 0x80
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4813      	ldr	r0, [pc, #76]	@ (8000b90 <MX_GPIO_Init+0x1c4>)
 8000b44:	f001 ffd4 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <MX_GPIO_Init+0x1bc>)
 8000b60:	f001 ffc6 	bl	8002af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2028      	movs	r0, #40	@ 0x28
 8000b6a:	f000 fdf4 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b6e:	2028      	movs	r0, #40	@ 0x28
 8000b70:	f000 fe0b 	bl	800178a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	@ 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	58020400 	.word	0x58020400
 8000b84:	58020c00 	.word	0x58020c00
 8000b88:	58021000 	.word	0x58021000
 8000b8c:	58020800 	.word	0x58020800
 8000b90:	58021800 	.word	0x58021800

08000b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba4:	d104      	bne.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
	  counter++;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0x28>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a03      	ldr	r2, [pc, #12]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0x28>)
 8000bae:	6013      	str	r3, [r2, #0]
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	240007f0 	.word	0x240007f0

08000bc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	  execute_flag = '6';
	}
	*/


	if (strncmp(rx_buffer, "Read_AIN0", 9) == 0)
 8000bc8:	2209      	movs	r2, #9
 8000bca:	4925      	ldr	r1, [pc, #148]	@ (8000c60 <HAL_UART_RxCpltCallback+0xa0>)
 8000bcc:	4825      	ldr	r0, [pc, #148]	@ (8000c64 <HAL_UART_RxCpltCallback+0xa4>)
 8000bce:	f008 fe45 	bl	800985c <strncmp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10d      	bne.n	8000bf4 <HAL_UART_RxCpltCallback+0x34>
	{
		uint8_t Anal = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
		uint8_t LDR = PCF8591_ReadAnalog(Anal);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f86e 	bl	8000cc0 <PCF8591_ReadAnalog>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73bb      	strb	r3, [r7, #14]

		SendMessage(LDR, Anal);
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f840 	bl	8000c74 <SendMessage>
	}

	if (strncmp(rx_buffer, "Read_AIN1", 9) == 0)
 8000bf4:	2209      	movs	r2, #9
 8000bf6:	491c      	ldr	r1, [pc, #112]	@ (8000c68 <HAL_UART_RxCpltCallback+0xa8>)
 8000bf8:	481a      	ldr	r0, [pc, #104]	@ (8000c64 <HAL_UART_RxCpltCallback+0xa4>)
 8000bfa:	f008 fe2f 	bl	800985c <strncmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10d      	bne.n	8000c20 <HAL_UART_RxCpltCallback+0x60>
	{
		uint8_t Anal = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	737b      	strb	r3, [r7, #13]
		uint8_t Temp = PCF8591_ReadAnalog(Anal);
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f858 	bl	8000cc0 <PCF8591_ReadAnalog>
 8000c10:	4603      	mov	r3, r0
 8000c12:	733b      	strb	r3, [r7, #12]

		SendMessage(Temp, Anal);
 8000c14:	7b7a      	ldrb	r2, [r7, #13]
 8000c16:	7b3b      	ldrb	r3, [r7, #12]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f82a 	bl	8000c74 <SendMessage>
	}

	if (strncmp(rx_buffer, "Read_AIN3", 9) == 0)
 8000c20:	2209      	movs	r2, #9
 8000c22:	4912      	ldr	r1, [pc, #72]	@ (8000c6c <HAL_UART_RxCpltCallback+0xac>)
 8000c24:	480f      	ldr	r0, [pc, #60]	@ (8000c64 <HAL_UART_RxCpltCallback+0xa4>)
 8000c26:	f008 fe19 	bl	800985c <strncmp>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10d      	bne.n	8000c4c <HAL_UART_RxCpltCallback+0x8c>
	{
		uint8_t Anal = 3;
 8000c30:	2303      	movs	r3, #3
 8000c32:	72fb      	strb	r3, [r7, #11]
		uint8_t Pot = PCF8591_ReadAnalog(Anal);
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f842 	bl	8000cc0 <PCF8591_ReadAnalog>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	72bb      	strb	r3, [r7, #10]

		SendMessage(Pot, Anal);
 8000c40:	7afa      	ldrb	r2, [r7, #11]
 8000c42:	7abb      	ldrb	r3, [r7, #10]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f814 	bl	8000c74 <SendMessage>
	}

	HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	4905      	ldr	r1, [pc, #20]	@ (8000c64 <HAL_UART_RxCpltCallback+0xa4>)
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <HAL_UART_RxCpltCallback+0xb0>)
 8000c52:	f005 ff83 	bl	8006b5c <HAL_UART_Receive_IT>
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	0800a188 	.word	0x0800a188
 8000c64:	240007f4 	.word	0x240007f4
 8000c68:	0800a194 	.word	0x0800a194
 8000c6c:	0800a1a0 	.word	0x0800a1a0
 8000c70:	24000278 	.word	0x24000278

08000c74 <SendMessage>:


void SendMessage(uint8_t value, uint8_t port)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	char message[10];

	sprintf(message, "AIN%d: %d\r\n", port, value);
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f107 000c 	add.w	r0, r7, #12
 8000c8c:	490a      	ldr	r1, [pc, #40]	@ (8000cb8 <SendMessage+0x44>)
 8000c8e:	f008 fdbd 	bl	800980c <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fb22 	bl	80002e0 <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	f107 010c 	add.w	r1, r7, #12
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <SendMessage+0x48>)
 8000caa:	f005 fec9 	bl	8006a40 <HAL_UART_Transmit>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800a1ac 	.word	0x0800a1ac
 8000cbc:	24000278 	.word	0x24000278

08000cc0 <PCF8591_ReadAnalog>:

uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000cde:	f107 020f 	add.w	r2, r7, #15
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2190      	movs	r1, #144	@ 0x90
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <PCF8591_ReadAnalog+0x50>)
 8000cee:	f002 f97f 	bl	8002ff0 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000cf2:	f107 020c 	add.w	r2, r7, #12
 8000cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	2190      	movs	r1, #144	@ 0x90
 8000d00:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <PCF8591_ReadAnalog+0x50>)
 8000d02:	f002 fa8d 	bl	8003220 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24000224 	.word	0x24000224

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2c:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x30>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024400 	.word	0x58024400

08000d54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	@ 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a59      	ldr	r2, [pc, #356]	@ (8000ed8 <HAL_ETH_MspInit+0x184>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	f040 80ab 	bne.w	8000ece <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d78:	4b58      	ldr	r3, [pc, #352]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7e:	4a57      	ldr	r2, [pc, #348]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d88:	4b54      	ldr	r3, [pc, #336]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d92:	623b      	str	r3, [r7, #32]
 8000d94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d96:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000da2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000da6:	4b4d      	ldr	r3, [pc, #308]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000db4:	4b49      	ldr	r3, [pc, #292]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dba:	4a48      	ldr	r2, [pc, #288]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dc4:	4b45      	ldr	r3, [pc, #276]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b42      	ldr	r3, [pc, #264]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	4a40      	ldr	r2, [pc, #256]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de2:	4b3e      	ldr	r3, [pc, #248]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b3a      	ldr	r3, [pc, #232]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a39      	ldr	r2, [pc, #228]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a31      	ldr	r2, [pc, #196]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	4a2a      	ldr	r2, [pc, #168]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <HAL_ETH_MspInit+0x188>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e4a:	2332      	movs	r3, #50	@ 0x32
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5a:	230b      	movs	r3, #11
 8000e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	481e      	ldr	r0, [pc, #120]	@ (8000ee0 <HAL_ETH_MspInit+0x18c>)
 8000e66:	f001 fe43 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e6a:	2386      	movs	r3, #134	@ 0x86
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7a:	230b      	movs	r3, #11
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4817      	ldr	r0, [pc, #92]	@ (8000ee4 <HAL_ETH_MspInit+0x190>)
 8000e86:	f001 fe33 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9c:	230b      	movs	r3, #11
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <HAL_ETH_MspInit+0x194>)
 8000ea8:	f001 fe22 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4808      	ldr	r0, [pc, #32]	@ (8000eec <HAL_ETH_MspInit+0x198>)
 8000eca:	f001 fe11 	bl	8002af0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3738      	adds	r7, #56	@ 0x38
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40028000 	.word	0x40028000
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58020800 	.word	0x58020800
 8000ee4:	58020000 	.word	0x58020000
 8000ee8:	58020400 	.word	0x58020400
 8000eec:	58021800 	.word	0x58021800

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	22c0      	movs	r2, #192	@ 0xc0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f008 fc9b 	bl	800984c <memset>
  if(hi2c->Instance==I2C1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d146      	bne.n	8000fae <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f20:	f04f 0208 	mov.w	r2, #8
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 ff06 	bl	8004d48 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f42:	f7ff fee7 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6c:	2312      	movs	r3, #18
 8000f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <HAL_I2C_MspInit+0xd0>)
 8000f8c:	f001 fdb0 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f96:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fae:	bf00      	nop
 8000fb0:	37e8      	adds	r7, #232	@ 0xe8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020400 	.word	0x58020400

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	22c0      	movs	r2, #192	@ 0xc0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 fc31 	bl	800984c <memset>
  if(huart->Instance==USART3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2b      	ldr	r2, [pc, #172]	@ (800109c <HAL_UART_MspInit+0xd8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d14e      	bne.n	8001092 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff4:	f04f 0202 	mov.w	r2, #2
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fe9c 	bl	8004d48 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001016:	f7ff fe7d 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800101a:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <HAL_UART_MspInit+0xdc>)
 800101c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001020:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <HAL_UART_MspInit+0xdc>)
 8001022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001026:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <HAL_UART_MspInit+0xdc>)
 800102c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_UART_MspInit+0xdc>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <HAL_UART_MspInit+0xdc>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001048:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_UART_MspInit+0xdc>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001056:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001070:	2307      	movs	r3, #7
 8001072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001076:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800107a:	4619      	mov	r1, r3
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <HAL_UART_MspInit+0xe0>)
 800107e:	f001 fd37 	bl	8002af0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2027      	movs	r0, #39	@ 0x27
 8001088:	f000 fb65 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800108c:	2027      	movs	r0, #39	@ 0x27
 800108e:	f000 fb7c 	bl	800178a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	37e8      	adds	r7, #232	@ 0xe8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004800 	.word	0x40004800
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020c00 	.word	0x58020c00

080010a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ba      	sub	sp, #232	@ 0xe8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	22c0      	movs	r2, #192	@ 0xc0
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fbbf 	bl	800984c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a30      	ldr	r2, [pc, #192]	@ (8001194 <HAL_PCD_MspInit+0xec>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d159      	bne.n	800118c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 fe29 	bl	8004d48 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80010fc:	f7ff fe0a 	bl	8000d14 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001100:	f002 fe2c 	bl	8003d5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_PCD_MspInit+0xf0>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <HAL_PCD_MspInit+0xf0>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <HAL_PCD_MspInit+0xf0>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001122:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800113c:	230a      	movs	r3, #10
 800113e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001146:	4619      	mov	r1, r3
 8001148:	4814      	ldr	r0, [pc, #80]	@ (800119c <HAL_PCD_MspInit+0xf4>)
 800114a:	f001 fcd1 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <HAL_PCD_MspInit+0xf4>)
 800116a:	f001 fcc1 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_PCD_MspInit+0xf0>)
 8001170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001174:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_PCD_MspInit+0xf0>)
 8001176:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800117a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_PCD_MspInit+0xf0>)
 8001180:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800118c:	bf00      	nop
 800118e:	37e8      	adds	r7, #232	@ 0xe8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40080000 	.word	0x40080000
 8001198:	58024400 	.word	0x58024400
 800119c:	58020000 	.word	0x58020000

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <NMI_Handler+0x4>

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <MemManage_Handler+0x4>

080011b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f6:	f000 f96f 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <USART3_IRQHandler+0x10>)
 8001206:	f005 fcf5 	bl	8006bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	24000278 	.word	0x24000278

08001214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001218:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800121c:	f001 fe31 	bl	8002e82 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f008 fb14 	bl	8009880 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24080000 	.word	0x24080000
 8001284:	00000400 	.word	0x00000400
 8001288:	24000808 	.word	0x24000808
 800128c:	24000958 	.word	0x24000958

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001294:	f000 f826 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f008 fae5 	bl	800988c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff f9dd 	bl	8000680 <main>
  bx  lr
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80012d4:	0800a234 	.word	0x0800a234
  ldr r2, =_sbss
 80012d8:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80012dc:	24000958 	.word	0x24000958

080012e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC3_IRQHandler>
	...

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e8:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <SystemInit+0xe4>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ee:	4a36      	ldr	r2, [pc, #216]	@ (80013c8 <SystemInit+0xe4>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f8:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <SystemInit+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	2b06      	cmp	r3, #6
 8001302:	d807      	bhi.n	8001314 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001304:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <SystemInit+0xe8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 030f 	bic.w	r3, r3, #15
 800130c:	4a2f      	ldr	r2, [pc, #188]	@ (80013cc <SystemInit+0xe8>)
 800130e:	f043 0307 	orr.w	r3, r3, #7
 8001312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001314:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <SystemInit+0xec>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2d      	ldr	r2, [pc, #180]	@ (80013d0 <SystemInit+0xec>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <SystemInit+0xec>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <SystemInit+0xec>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4929      	ldr	r1, [pc, #164]	@ (80013d0 <SystemInit+0xec>)
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <SystemInit+0xf0>)
 800132e:	4013      	ands	r3, r2
 8001330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <SystemInit+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <SystemInit+0xe8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 030f 	bic.w	r3, r3, #15
 8001346:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <SystemInit+0xe8>)
 8001348:	f043 0307 	orr.w	r3, r3, #7
 800134c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <SystemInit+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <SystemInit+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <SystemInit+0xec>)
 8001362:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <SystemInit+0xf4>)
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <SystemInit+0xec>)
 8001368:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <SystemInit+0xf8>)
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <SystemInit+0xec>)
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <SystemInit+0xfc>)
 8001370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <SystemInit+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <SystemInit+0xec>)
 800137a:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <SystemInit+0xfc>)
 800137c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <SystemInit+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <SystemInit+0xec>)
 8001386:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <SystemInit+0xfc>)
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <SystemInit+0xec>)
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <SystemInit+0xec>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <SystemInit+0xec>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <SystemInit+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <SystemInit+0x100>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <SystemInit+0x104>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ae:	d202      	bcs.n	80013b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <SystemInit+0x108>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <SystemInit+0x10c>)
 80013b8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	52002000 	.word	0x52002000
 80013d0:	58024400 	.word	0x58024400
 80013d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d8:	02020200 	.word	0x02020200
 80013dc:	01ff0000 	.word	0x01ff0000
 80013e0:	01010280 	.word	0x01010280
 80013e4:	5c001000 	.word	0x5c001000
 80013e8:	ffff0000 	.word	0xffff0000
 80013ec:	51008108 	.word	0x51008108
 80013f0:	52004000 	.word	0x52004000

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 f9a0 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001400:	f003 facc 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8001404:	4602      	mov	r2, r0
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_Init+0x68>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	4913      	ldr	r1, [pc, #76]	@ (8001460 <HAL_Init+0x6c>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	f003 031f 	and.w	r3, r3, #31
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_Init+0x68>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <HAL_Init+0x6c>)
 8001428:	5cd3      	ldrb	r3, [r2, r3]
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_Init+0x70>)
 8001436:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_Init+0x74>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f814 	bl	800146c <HAL_InitTick>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e002      	b.n	8001454 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800144e:	f7ff fc67 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400
 8001460:	0800a1b8 	.word	0x0800a1b8
 8001464:	24000004 	.word	0x24000004
 8001468:	24000000 	.word	0x24000000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_InitTick+0x60>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e021      	b.n	80014c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <HAL_InitTick+0x64>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_InitTick+0x60>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f985 	bl	80017a6 <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f94f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	@ (80014d4 <HAL_InitTick+0x68>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2400000c 	.word	0x2400000c
 80014d0:	24000000 	.word	0x24000000
 80014d4:	24000008 	.word	0x24000008

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2400000c 	.word	0x2400000c
 80014fc:	2400080c 	.word	0x2400080c

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2400080c 	.word	0x2400080c

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2400000c 	.word	0x2400000c

08001560 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_GetREVID+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0c1b      	lsrs	r3, r3, #16
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	5c001000 	.word	0x5c001000

08001578 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001588:	4904      	ldr	r1, [pc, #16]	@ (800159c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	58000400 	.word	0x58000400

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x40>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	05fa0000 	.word	0x05fa0000

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	@ (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff40 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff33 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa4 	bl	80016fc <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fe9a 	bl	8001500 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2dc      	b.n	8001d92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e2cd      	b.n	8001d92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a76      	ldr	r2, [pc, #472]	@ (80019d4 <HAL_DMA_Abort+0x214>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04a      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a74      	ldr	r2, [pc, #464]	@ (80019d8 <HAL_DMA_Abort+0x218>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d045      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a73      	ldr	r2, [pc, #460]	@ (80019dc <HAL_DMA_Abort+0x21c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d040      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a71      	ldr	r2, [pc, #452]	@ (80019e0 <HAL_DMA_Abort+0x220>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d03b      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a70      	ldr	r2, [pc, #448]	@ (80019e4 <HAL_DMA_Abort+0x224>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d036      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6e      	ldr	r2, [pc, #440]	@ (80019e8 <HAL_DMA_Abort+0x228>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d031      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6d      	ldr	r2, [pc, #436]	@ (80019ec <HAL_DMA_Abort+0x22c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d02c      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_DMA_Abort+0x230>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d027      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6a      	ldr	r2, [pc, #424]	@ (80019f4 <HAL_DMA_Abort+0x234>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a68      	ldr	r2, [pc, #416]	@ (80019f8 <HAL_DMA_Abort+0x238>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01d      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a67      	ldr	r2, [pc, #412]	@ (80019fc <HAL_DMA_Abort+0x23c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d018      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_DMA_Abort+0x240>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a64      	ldr	r2, [pc, #400]	@ (8001a04 <HAL_DMA_Abort+0x244>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00e      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a62      	ldr	r2, [pc, #392]	@ (8001a08 <HAL_DMA_Abort+0x248>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d009      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a61      	ldr	r2, [pc, #388]	@ (8001a0c <HAL_DMA_Abort+0x24c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d004      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5f      	ldr	r2, [pc, #380]	@ (8001a10 <HAL_DMA_Abort+0x250>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_DMA_Abort+0xda>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_DMA_Abort+0xdc>
 800189a:	2300      	movs	r3, #0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 021e 	bic.w	r2, r2, #30
 80018ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e00a      	b.n	80018de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_DMA_Abort+0x214>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d072      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3a      	ldr	r2, [pc, #232]	@ (80019d8 <HAL_DMA_Abort+0x218>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d06d      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a39      	ldr	r2, [pc, #228]	@ (80019dc <HAL_DMA_Abort+0x21c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d068      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a37      	ldr	r2, [pc, #220]	@ (80019e0 <HAL_DMA_Abort+0x220>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d063      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <HAL_DMA_Abort+0x224>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a34      	ldr	r2, [pc, #208]	@ (80019e8 <HAL_DMA_Abort+0x228>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d059      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a33      	ldr	r2, [pc, #204]	@ (80019ec <HAL_DMA_Abort+0x22c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d054      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a31      	ldr	r2, [pc, #196]	@ (80019f0 <HAL_DMA_Abort+0x230>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04f      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_DMA_Abort+0x234>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04a      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2e      	ldr	r2, [pc, #184]	@ (80019f8 <HAL_DMA_Abort+0x238>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d045      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_DMA_Abort+0x23c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d040      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <HAL_DMA_Abort+0x240>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d03b      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a04 <HAL_DMA_Abort+0x244>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d036      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a28      	ldr	r2, [pc, #160]	@ (8001a08 <HAL_DMA_Abort+0x248>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_DMA_Abort+0x24c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d02c      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a25      	ldr	r2, [pc, #148]	@ (8001a10 <HAL_DMA_Abort+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d027      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	@ (8001a14 <HAL_DMA_Abort+0x254>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <HAL_DMA_Abort+0x258>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01d      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <HAL_DMA_Abort+0x25c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d018      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a20 <HAL_DMA_Abort+0x260>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_DMA_Abort+0x264>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <HAL_DMA_Abort+0x268>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <HAL_DMA_Abort+0x26c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_DMA_Abort+0x270>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d132      	bne.n	8001a34 <HAL_DMA_Abort+0x274>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e031      	b.n	8001a36 <HAL_DMA_Abort+0x276>
 80019d2:	bf00      	nop
 80019d4:	40020010 	.word	0x40020010
 80019d8:	40020028 	.word	0x40020028
 80019dc:	40020040 	.word	0x40020040
 80019e0:	40020058 	.word	0x40020058
 80019e4:	40020070 	.word	0x40020070
 80019e8:	40020088 	.word	0x40020088
 80019ec:	400200a0 	.word	0x400200a0
 80019f0:	400200b8 	.word	0x400200b8
 80019f4:	40020410 	.word	0x40020410
 80019f8:	40020428 	.word	0x40020428
 80019fc:	40020440 	.word	0x40020440
 8001a00:	40020458 	.word	0x40020458
 8001a04:	40020470 	.word	0x40020470
 8001a08:	40020488 	.word	0x40020488
 8001a0c:	400204a0 	.word	0x400204a0
 8001a10:	400204b8 	.word	0x400204b8
 8001a14:	58025408 	.word	0x58025408
 8001a18:	5802541c 	.word	0x5802541c
 8001a1c:	58025430 	.word	0x58025430
 8001a20:	58025444 	.word	0x58025444
 8001a24:	58025458 	.word	0x58025458
 8001a28:	5802546c 	.word	0x5802546c
 8001a2c:	58025480 	.word	0x58025480
 8001a30:	58025494 	.word	0x58025494
 8001a34:	2300      	movs	r3, #0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8001c04 <HAL_DMA_Abort+0x444>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04a      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6b      	ldr	r2, [pc, #428]	@ (8001c08 <HAL_DMA_Abort+0x448>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d045      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6a      	ldr	r2, [pc, #424]	@ (8001c0c <HAL_DMA_Abort+0x44c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d040      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a68      	ldr	r2, [pc, #416]	@ (8001c10 <HAL_DMA_Abort+0x450>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d03b      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a67      	ldr	r2, [pc, #412]	@ (8001c14 <HAL_DMA_Abort+0x454>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d036      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a65      	ldr	r2, [pc, #404]	@ (8001c18 <HAL_DMA_Abort+0x458>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d031      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a64      	ldr	r2, [pc, #400]	@ (8001c1c <HAL_DMA_Abort+0x45c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d02c      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a62      	ldr	r2, [pc, #392]	@ (8001c20 <HAL_DMA_Abort+0x460>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d027      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a61      	ldr	r2, [pc, #388]	@ (8001c24 <HAL_DMA_Abort+0x464>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c28 <HAL_DMA_Abort+0x468>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01d      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c2c <HAL_DMA_Abort+0x46c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d018      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5c      	ldr	r2, [pc, #368]	@ (8001c30 <HAL_DMA_Abort+0x470>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c34 <HAL_DMA_Abort+0x474>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a59      	ldr	r2, [pc, #356]	@ (8001c38 <HAL_DMA_Abort+0x478>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a58      	ldr	r2, [pc, #352]	@ (8001c3c <HAL_DMA_Abort+0x47c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d004      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a56      	ldr	r2, [pc, #344]	@ (8001c40 <HAL_DMA_Abort+0x480>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d108      	bne.n	8001afc <HAL_DMA_Abort+0x33c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e007      	b.n	8001b0c <HAL_DMA_Abort+0x34c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b0c:	e013      	b.n	8001b36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fcf7 	bl	8001500 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d90c      	bls.n	8001b36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e12d      	b.n	8001d92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e5      	bne.n	8001b0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2f      	ldr	r2, [pc, #188]	@ (8001c04 <HAL_DMA_Abort+0x444>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04a      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	@ (8001c08 <HAL_DMA_Abort+0x448>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d045      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <HAL_DMA_Abort+0x44c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d040      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2a      	ldr	r2, [pc, #168]	@ (8001c10 <HAL_DMA_Abort+0x450>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d03b      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a29      	ldr	r2, [pc, #164]	@ (8001c14 <HAL_DMA_Abort+0x454>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d036      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <HAL_DMA_Abort+0x458>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d031      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a26      	ldr	r2, [pc, #152]	@ (8001c1c <HAL_DMA_Abort+0x45c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d02c      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <HAL_DMA_Abort+0x460>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d027      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <HAL_DMA_Abort+0x464>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d022      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a21      	ldr	r2, [pc, #132]	@ (8001c28 <HAL_DMA_Abort+0x468>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01d      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a20      	ldr	r2, [pc, #128]	@ (8001c2c <HAL_DMA_Abort+0x46c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <HAL_DMA_Abort+0x470>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_DMA_Abort+0x474>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c38 <HAL_DMA_Abort+0x478>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c3c <HAL_DMA_Abort+0x47c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <HAL_DMA_Abort+0x480>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_DMA_Abort+0x426>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_DMA_Abort+0x428>
 8001be6:	2300      	movs	r3, #0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02b      	beq.n	8001c44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	223f      	movs	r2, #63	@ 0x3f
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	e02a      	b.n	8001c5a <HAL_DMA_Abort+0x49a>
 8001c04:	40020010 	.word	0x40020010
 8001c08:	40020028 	.word	0x40020028
 8001c0c:	40020040 	.word	0x40020040
 8001c10:	40020058 	.word	0x40020058
 8001c14:	40020070 	.word	0x40020070
 8001c18:	40020088 	.word	0x40020088
 8001c1c:	400200a0 	.word	0x400200a0
 8001c20:	400200b8 	.word	0x400200b8
 8001c24:	40020410 	.word	0x40020410
 8001c28:	40020428 	.word	0x40020428
 8001c2c:	40020440 	.word	0x40020440
 8001c30:	40020458 	.word	0x40020458
 8001c34:	40020470 	.word	0x40020470
 8001c38:	40020488 	.word	0x40020488
 8001c3c:	400204a0 	.word	0x400204a0
 8001c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2201      	movs	r2, #1
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <HAL_DMA_Abort+0x5dc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d072      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_DMA_Abort+0x5e0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d06d      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4c      	ldr	r2, [pc, #304]	@ (8001da4 <HAL_DMA_Abort+0x5e4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d068      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001da8 <HAL_DMA_Abort+0x5e8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d063      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a49      	ldr	r2, [pc, #292]	@ (8001dac <HAL_DMA_Abort+0x5ec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a47      	ldr	r2, [pc, #284]	@ (8001db0 <HAL_DMA_Abort+0x5f0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d059      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a46      	ldr	r2, [pc, #280]	@ (8001db4 <HAL_DMA_Abort+0x5f4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d054      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a44      	ldr	r2, [pc, #272]	@ (8001db8 <HAL_DMA_Abort+0x5f8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04f      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a43      	ldr	r2, [pc, #268]	@ (8001dbc <HAL_DMA_Abort+0x5fc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04a      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a41      	ldr	r2, [pc, #260]	@ (8001dc0 <HAL_DMA_Abort+0x600>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d045      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a40      	ldr	r2, [pc, #256]	@ (8001dc4 <HAL_DMA_Abort+0x604>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d040      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_DMA_Abort+0x608>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d03b      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <HAL_DMA_Abort+0x60c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d036      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd0 <HAL_DMA_Abort+0x610>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d031      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_DMA_Abort+0x614>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d02c      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a38      	ldr	r2, [pc, #224]	@ (8001dd8 <HAL_DMA_Abort+0x618>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d027      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a37      	ldr	r2, [pc, #220]	@ (8001ddc <HAL_DMA_Abort+0x61c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a35      	ldr	r2, [pc, #212]	@ (8001de0 <HAL_DMA_Abort+0x620>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01d      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a34      	ldr	r2, [pc, #208]	@ (8001de4 <HAL_DMA_Abort+0x624>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d018      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a32      	ldr	r2, [pc, #200]	@ (8001de8 <HAL_DMA_Abort+0x628>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <HAL_DMA_Abort+0x62c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <HAL_DMA_Abort+0x630>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001df4 <HAL_DMA_Abort+0x634>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2c      	ldr	r2, [pc, #176]	@ (8001df8 <HAL_DMA_Abort+0x638>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_Abort+0x58e>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_Abort+0x590>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d015      	beq.n	8001d80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40020010 	.word	0x40020010
 8001da0:	40020028 	.word	0x40020028
 8001da4:	40020040 	.word	0x40020040
 8001da8:	40020058 	.word	0x40020058
 8001dac:	40020070 	.word	0x40020070
 8001db0:	40020088 	.word	0x40020088
 8001db4:	400200a0 	.word	0x400200a0
 8001db8:	400200b8 	.word	0x400200b8
 8001dbc:	40020410 	.word	0x40020410
 8001dc0:	40020428 	.word	0x40020428
 8001dc4:	40020440 	.word	0x40020440
 8001dc8:	40020458 	.word	0x40020458
 8001dcc:	40020470 	.word	0x40020470
 8001dd0:	40020488 	.word	0x40020488
 8001dd4:	400204a0 	.word	0x400204a0
 8001dd8:	400204b8 	.word	0x400204b8
 8001ddc:	58025408 	.word	0x58025408
 8001de0:	5802541c 	.word	0x5802541c
 8001de4:	58025430 	.word	0x58025430
 8001de8:	58025444 	.word	0x58025444
 8001dec:	58025458 	.word	0x58025458
 8001df0:	5802546c 	.word	0x5802546c
 8001df4:	58025480 	.word	0x58025480
 8001df8:	58025494 	.word	0x58025494

08001dfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e237      	b.n	800227e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e22c      	b.n	800227e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5c      	ldr	r2, [pc, #368]	@ (8001f9c <HAL_DMA_Abort_IT+0x1a0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d04a      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d045      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a59      	ldr	r2, [pc, #356]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d040      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a58      	ldr	r2, [pc, #352]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d03b      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a56      	ldr	r2, [pc, #344]	@ (8001fac <HAL_DMA_Abort_IT+0x1b0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d036      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a55      	ldr	r2, [pc, #340]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d031      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a53      	ldr	r2, [pc, #332]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02c      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d027      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a50      	ldr	r2, [pc, #320]	@ (8001fbc <HAL_DMA_Abort_IT+0x1c0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01d      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8001fcc <HAL_DMA_Abort_IT+0x1d0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a49      	ldr	r2, [pc, #292]	@ (8001fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a47      	ldr	r2, [pc, #284]	@ (8001fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	@ (8001fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DMA_Abort_IT+0xcc>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_Abort_IT+0xce>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8086 	beq.w	8001fdc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f9c <HAL_DMA_Abort_IT+0x1a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d04a      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d045      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d040      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d03b      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a29      	ldr	r2, [pc, #164]	@ (8001fac <HAL_DMA_Abort_IT+0x1b0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d036      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a28      	ldr	r2, [pc, #160]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d031      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d02c      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d027      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	@ (8001fbc <HAL_DMA_Abort_IT+0x1c0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d022      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d01d      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d018      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_DMA_Abort_IT+0x1d0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <HAL_DMA_Abort_IT+0x18e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e178      	b.n	800227c <HAL_DMA_Abort_IT+0x480>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e16f      	b.n	800227c <HAL_DMA_Abort_IT+0x480>
 8001f9c:	40020010 	.word	0x40020010
 8001fa0:	40020028 	.word	0x40020028
 8001fa4:	40020040 	.word	0x40020040
 8001fa8:	40020058 	.word	0x40020058
 8001fac:	40020070 	.word	0x40020070
 8001fb0:	40020088 	.word	0x40020088
 8001fb4:	400200a0 	.word	0x400200a0
 8001fb8:	400200b8 	.word	0x400200b8
 8001fbc:	40020410 	.word	0x40020410
 8001fc0:	40020428 	.word	0x40020428
 8001fc4:	40020440 	.word	0x40020440
 8001fc8:	40020458 	.word	0x40020458
 8001fcc:	40020470 	.word	0x40020470
 8001fd0:	40020488 	.word	0x40020488
 8001fd4:	400204a0 	.word	0x400204a0
 8001fd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020e 	bic.w	r2, r2, #14
 8001fea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6c      	ldr	r2, [pc, #432]	@ (80021a4 <HAL_DMA_Abort_IT+0x3a8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d04a      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6b      	ldr	r2, [pc, #428]	@ (80021a8 <HAL_DMA_Abort_IT+0x3ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d045      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a69      	ldr	r2, [pc, #420]	@ (80021ac <HAL_DMA_Abort_IT+0x3b0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d040      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a68      	ldr	r2, [pc, #416]	@ (80021b0 <HAL_DMA_Abort_IT+0x3b4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d03b      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a66      	ldr	r2, [pc, #408]	@ (80021b4 <HAL_DMA_Abort_IT+0x3b8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d036      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <HAL_DMA_Abort_IT+0x3bc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d031      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a63      	ldr	r2, [pc, #396]	@ (80021bc <HAL_DMA_Abort_IT+0x3c0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02c      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a62      	ldr	r2, [pc, #392]	@ (80021c0 <HAL_DMA_Abort_IT+0x3c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d027      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a60      	ldr	r2, [pc, #384]	@ (80021c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d022      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5f      	ldr	r2, [pc, #380]	@ (80021c8 <HAL_DMA_Abort_IT+0x3cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d01d      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5d      	ldr	r2, [pc, #372]	@ (80021cc <HAL_DMA_Abort_IT+0x3d0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d018      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5c      	ldr	r2, [pc, #368]	@ (80021d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5a      	ldr	r2, [pc, #360]	@ (80021d4 <HAL_DMA_Abort_IT+0x3d8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a59      	ldr	r2, [pc, #356]	@ (80021d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a57      	ldr	r2, [pc, #348]	@ (80021dc <HAL_DMA_Abort_IT+0x3e0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_DMA_Abort_IT+0x3e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <HAL_DMA_Abort_IT+0x2a2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e007      	b.n	80020ae <HAL_DMA_Abort_IT+0x2b2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_DMA_Abort_IT+0x3a8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d072      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_DMA_Abort_IT+0x3ac>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d06d      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a39      	ldr	r2, [pc, #228]	@ (80021ac <HAL_DMA_Abort_IT+0x3b0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d068      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a37      	ldr	r2, [pc, #220]	@ (80021b0 <HAL_DMA_Abort_IT+0x3b4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d063      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a36      	ldr	r2, [pc, #216]	@ (80021b4 <HAL_DMA_Abort_IT+0x3b8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_DMA_Abort_IT+0x3bc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d059      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <HAL_DMA_Abort_IT+0x3c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d054      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a31      	ldr	r2, [pc, #196]	@ (80021c0 <HAL_DMA_Abort_IT+0x3c4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04f      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <HAL_DMA_Abort_IT+0x3cc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2d      	ldr	r2, [pc, #180]	@ (80021cc <HAL_DMA_Abort_IT+0x3d0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <HAL_DMA_Abort_IT+0x3d8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	@ (80021d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <HAL_DMA_Abort_IT+0x3e0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <HAL_DMA_Abort_IT+0x3e4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	@ (80021e4 <HAL_DMA_Abort_IT+0x3e8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <HAL_DMA_Abort_IT+0x3ec>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <HAL_DMA_Abort_IT+0x3f0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_DMA_Abort_IT+0x3f4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_DMA_Abort_IT+0x3f8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_DMA_Abort_IT+0x3fc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_DMA_Abort_IT+0x400>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_DMA_Abort_IT+0x404>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d132      	bne.n	8002204 <HAL_DMA_Abort_IT+0x408>
 800219e:	2301      	movs	r3, #1
 80021a0:	e031      	b.n	8002206 <HAL_DMA_Abort_IT+0x40a>
 80021a2:	bf00      	nop
 80021a4:	40020010 	.word	0x40020010
 80021a8:	40020028 	.word	0x40020028
 80021ac:	40020040 	.word	0x40020040
 80021b0:	40020058 	.word	0x40020058
 80021b4:	40020070 	.word	0x40020070
 80021b8:	40020088 	.word	0x40020088
 80021bc:	400200a0 	.word	0x400200a0
 80021c0:	400200b8 	.word	0x400200b8
 80021c4:	40020410 	.word	0x40020410
 80021c8:	40020428 	.word	0x40020428
 80021cc:	40020440 	.word	0x40020440
 80021d0:	40020458 	.word	0x40020458
 80021d4:	40020470 	.word	0x40020470
 80021d8:	40020488 	.word	0x40020488
 80021dc:	400204a0 	.word	0x400204a0
 80021e0:	400204b8 	.word	0x400204b8
 80021e4:	58025408 	.word	0x58025408
 80021e8:	5802541c 	.word	0x5802541c
 80021ec:	58025430 	.word	0x58025430
 80021f0:	58025444 	.word	0x58025444
 80021f4:	58025458 	.word	0x58025458
 80021f8:	5802546c 	.word	0x5802546c
 80021fc:	58025480 	.word	0x58025480
 8002200:	58025494 	.word	0x58025494
 8002204:	2300      	movs	r3, #0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d028      	beq.n	800225c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002218:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002238:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800224c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002250:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800225a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0e3      	b.n	8002462 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2223      	movs	r2, #35	@ 0x23
 80022a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe fd51 	bl	8000d54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	4b6e      	ldr	r3, [pc, #440]	@ (800246c <HAL_ETH_Init+0x1e4>)
 80022b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022b8:	4a6c      	ldr	r2, [pc, #432]	@ (800246c <HAL_ETH_Init+0x1e4>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022c2:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_ETH_Init+0x1e4>)
 80022c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7a1b      	ldrb	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff f94d 	bl	8001578 <HAL_SYSCFG_ETHInterfaceSelect>
 80022de:	e003      	b.n	80022e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80022e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80022e4:	f7ff f948 	bl	8001578 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80022e8:	4b61      	ldr	r3, [pc, #388]	@ (8002470 <HAL_ETH_Init+0x1e8>)
 80022ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7ff f8fc 	bl	8001500 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800230a:	e011      	b.n	8002330 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800230c:	f7ff f8f8 	bl	8001500 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800231a:	d909      	bls.n	8002330 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2204      	movs	r2, #4
 8002320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	22e0      	movs	r2, #224	@ 0xe0
 8002328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e098      	b.n	8002462 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e4      	bne.n	800230c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f89e 	bl	8002484 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002348:	f002 fca2 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 800234c:	4603      	mov	r3, r0
 800234e:	4a49      	ldr	r2, [pc, #292]	@ (8002474 <HAL_ETH_Init+0x1ec>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9a      	lsrs	r2, r3, #18
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3a01      	subs	r2, #1
 800235c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fa81 	bl	8002868 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800236e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002372:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800237e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002382:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	22e0      	movs	r2, #224	@ 0xe0
 800239e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e05d      	b.n	8002462 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80023b2:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <HAL_ETH_Init+0x1f0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6952      	ldr	r2, [r2, #20]
 80023ba:	0051      	lsls	r1, r2, #1
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fae9 	bl	80029a2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fb2f 	bl	8002a34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	3305      	adds	r3, #5
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	3303      	adds	r3, #3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	061a      	lsls	r2, r3, #24
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	3302      	adds	r3, #2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	3301      	adds	r3, #1
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002414:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002422:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002424:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_ETH_Init+0x1f4>)
 8002436:	430b      	orrs	r3, r1
 8002438:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_ETH_Init+0x1f8>)
 800244a:	430b      	orrs	r3, r1
 800244c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2210      	movs	r2, #16
 800245c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	58024400 	.word	0x58024400
 8002470:	58000400 	.word	0x58000400
 8002474:	431bde83 	.word	0x431bde83
 8002478:	ffff8001 	.word	0xffff8001
 800247c:	0c020060 	.word	0x0c020060
 8002480:	0c20c000 	.word	0x0c20c000

08002484 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002494:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800249c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800249e:	f002 fbf7 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 80024a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002510 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d804      	bhi.n	80024b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e022      	b.n	80024fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_ETH_SetMDIOClockRange+0x90>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d204      	bcs.n	80024c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e019      	b.n	80024fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <HAL_ETH_SetMDIOClockRange+0x94>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d915      	bls.n	80024fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4a12      	ldr	r2, [pc, #72]	@ (800251c <HAL_ETH_SetMDIOClockRange+0x98>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d804      	bhi.n	80024e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e00c      	b.n	80024fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d804      	bhi.n	80024f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e003      	b.n	80024fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80024fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	02160ebf 	.word	0x02160ebf
 8002514:	03938700 	.word	0x03938700
 8002518:	05f5e0ff 	.word	0x05f5e0ff
 800251c:	08f0d17f 	.word	0x08f0d17f
 8002520:	0ee6b27f 	.word	0x0ee6b27f

08002524 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002536:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800253e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	7b1b      	ldrb	r3, [r3, #12]
 8002544:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002546:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	7b5b      	ldrb	r3, [r3, #13]
 800254c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800254e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	7b9b      	ldrb	r3, [r3, #14]
 8002554:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	7bdb      	ldrb	r3, [r3, #15]
 800255c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800255e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	7c12      	ldrb	r2, [r2, #16]
 8002564:	2a00      	cmp	r2, #0
 8002566:	d102      	bne.n	800256e <ETH_SetMACConfig+0x4a>
 8002568:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800256c:	e000      	b.n	8002570 <ETH_SetMACConfig+0x4c>
 800256e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002570:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	7c52      	ldrb	r2, [r2, #17]
 8002576:	2a00      	cmp	r2, #0
 8002578:	d102      	bne.n	8002580 <ETH_SetMACConfig+0x5c>
 800257a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800257e:	e000      	b.n	8002582 <ETH_SetMACConfig+0x5e>
 8002580:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7c9b      	ldrb	r3, [r3, #18]
 8002588:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800258a:	431a      	orrs	r2, r3
               macconf->Speed |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002590:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002596:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	7f1b      	ldrb	r3, [r3, #28]
 800259c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800259e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	7f5b      	ldrb	r3, [r3, #29]
 80025a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	7f92      	ldrb	r2, [r2, #30]
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d102      	bne.n	80025b6 <ETH_SetMACConfig+0x92>
 80025b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025b4:	e000      	b.n	80025b8 <ETH_SetMACConfig+0x94>
 80025b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	7fdb      	ldrb	r3, [r3, #31]
 80025be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d102      	bne.n	80025d2 <ETH_SetMACConfig+0xae>
 80025cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025d0:	e000      	b.n	80025d4 <ETH_SetMACConfig+0xb0>
 80025d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80025e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <ETH_SetMACConfig+0x22c>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	430b      	orrs	r3, r1
 8002600:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002606:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800260e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002610:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002618:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800261a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002622:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002624:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800262c:	2a00      	cmp	r2, #0
 800262e:	d102      	bne.n	8002636 <ETH_SetMACConfig+0x112>
 8002630:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002634:	e000      	b.n	8002638 <ETH_SetMACConfig+0x114>
 8002636:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002638:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4b42      	ldr	r3, [pc, #264]	@ (8002754 <ETH_SetMACConfig+0x230>)
 800264a:	4013      	ands	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	430b      	orrs	r3, r1
 8002654:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800265c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <ETH_SetMACConfig+0x234>)
 800266e:	4013      	ands	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	430b      	orrs	r3, r1
 8002678:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002680:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002686:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800268e:	2a00      	cmp	r2, #0
 8002690:	d101      	bne.n	8002696 <ETH_SetMACConfig+0x172>
 8002692:	2280      	movs	r2, #128	@ 0x80
 8002694:	e000      	b.n	8002698 <ETH_SetMACConfig+0x174>
 8002696:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002698:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026aa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	430b      	orrs	r3, r1
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80026c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80026c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	f023 0103 	bic.w	r1, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80026ee:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800270a:	2a00      	cmp	r2, #0
 800270c:	d101      	bne.n	8002712 <ETH_SetMACConfig+0x1ee>
 800270e:	2240      	movs	r2, #64	@ 0x40
 8002710:	e000      	b.n	8002714 <ETH_SetMACConfig+0x1f0>
 8002712:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002714:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800271c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800271e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002726:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002734:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	430a      	orrs	r2, r1
 8002740:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	00048083 	.word	0x00048083
 8002754:	c0f88000 	.word	0xc0f88000
 8002758:	fffffef0 	.word	0xfffffef0

0800275c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <ETH_SetDMAConfig+0xf8>)
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	6811      	ldr	r1, [r2, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002782:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	791b      	ldrb	r3, [r3, #4]
 8002788:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800278e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	7b1b      	ldrb	r3, [r3, #12]
 8002794:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <ETH_SetDMAConfig+0xfc>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	430b      	orrs	r3, r1
 80027b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7b5b      	ldrb	r3, [r3, #13]
 80027ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80027d0:	4b22      	ldr	r3, [pc, #136]	@ (800285c <ETH_SetDMAConfig+0x100>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	430b      	orrs	r3, r1
 80027dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027e0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7f5b      	ldrb	r3, [r3, #29]
 80027f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002802:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002806:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <ETH_SetDMAConfig+0x104>)
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	68f9      	ldr	r1, [r7, #12]
 8002810:	430b      	orrs	r3, r1
 8002812:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002816:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7f1b      	ldrb	r3, [r3, #28]
 800281e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002830:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <ETH_SetDMAConfig+0x108>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	430b      	orrs	r3, r1
 8002840:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002844:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	ffff87fd 	.word	0xffff87fd
 8002858:	ffff2ffe 	.word	0xffff2ffe
 800285c:	fffec000 	.word	0xfffec000
 8002860:	ffc0efef 	.word	0xffc0efef
 8002864:	7fc0ffff 	.word	0x7fc0ffff

08002868 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b0a4      	sub	sp, #144	@ 0x90
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002876:	2300      	movs	r3, #0
 8002878:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80028c0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028e2:	2300      	movs	r3, #0
 80028e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028ea:	2300      	movs	r3, #0
 80028ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002900:	2320      	movs	r3, #32
 8002902:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002912:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800291c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002924:	2302      	movs	r3, #2
 8002926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002942:	2300      	movs	r3, #0
 8002944:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800294c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fde6 	bl	8002524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002958:	2301      	movs	r3, #1
 800295a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002972:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002976:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800297c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002980:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002988:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fee1 	bl	800275c <ETH_SetDMAConfig>
}
 800299a:	bf00      	nop
 800299c:	3790      	adds	r7, #144	@ 0x90
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e01d      	b.n	80029ec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68d9      	ldr	r1, [r3, #12]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	3206      	adds	r2, #6
 80029e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d9de      	bls.n	80029b0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a00:	461a      	mov	r2, r3
 8002a02:	2303      	movs	r3, #3
 8002a04:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a14:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a24:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e023      	b.n	8002a8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	3212      	adds	r2, #18
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3301      	adds	r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d9d8      	bls.n	8002a42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2303      	movs	r3, #3
 8002aba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ade:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	@ 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002afe:	4b89      	ldr	r3, [pc, #548]	@ (8002d24 <HAL_GPIO_Init+0x234>)
 8002b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b02:	e194      	b.n	8002e2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8186 	beq.w	8002e28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d005      	beq.n	8002b34 <HAL_GPIO_Init+0x44>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d130      	bne.n	8002b96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 0201 	and.w	r2, r3, #1
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d017      	beq.n	8002bd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d123      	bne.n	8002c26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	69b9      	ldr	r1, [r7, #24]
 8002c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80e0 	beq.w	8002e28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c68:	4b2f      	ldr	r3, [pc, #188]	@ (8002d28 <HAL_GPIO_Init+0x238>)
 8002c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d28 <HAL_GPIO_Init+0x238>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c78:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <HAL_GPIO_Init+0x238>)
 8002c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c86:	4a29      	ldr	r2, [pc, #164]	@ (8002d2c <HAL_GPIO_Init+0x23c>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a20      	ldr	r2, [pc, #128]	@ (8002d30 <HAL_GPIO_Init+0x240>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d052      	beq.n	8002d58 <HAL_GPIO_Init+0x268>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <HAL_GPIO_Init+0x244>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_GPIO_Init+0x22e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d38 <HAL_GPIO_Init+0x248>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02b      	beq.n	8002d1a <HAL_GPIO_Init+0x22a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d3c <HAL_GPIO_Init+0x24c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d025      	beq.n	8002d16 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <HAL_GPIO_Init+0x250>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d44 <HAL_GPIO_Init+0x254>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d48 <HAL_GPIO_Init+0x258>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x21a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	@ (8002d4c <HAL_GPIO_Init+0x25c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x216>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_GPIO_Init+0x260>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x212>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_GPIO_Init+0x264>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x20e>
 8002cfa:	2309      	movs	r3, #9
 8002cfc:	e02d      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002cfe:	230a      	movs	r3, #10
 8002d00:	e02b      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d02:	2308      	movs	r3, #8
 8002d04:	e029      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e027      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e025      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e023      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e021      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e01f      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e01d      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01b      	b.n	8002d5a <HAL_GPIO_Init+0x26a>
 8002d22:	bf00      	nop
 8002d24:	58000080 	.word	0x58000080
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	58000400 	.word	0x58000400
 8002d30:	58020000 	.word	0x58020000
 8002d34:	58020400 	.word	0x58020400
 8002d38:	58020800 	.word	0x58020800
 8002d3c:	58020c00 	.word	0x58020c00
 8002d40:	58021000 	.word	0x58021000
 8002d44:	58021400 	.word	0x58021400
 8002d48:	58021800 	.word	0x58021800
 8002d4c:	58021c00 	.word	0x58021c00
 8002d50:	58022000 	.word	0x58022000
 8002d54:	58022400 	.word	0x58022400
 8002d58:	2300      	movs	r3, #0
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f002 0203 	and.w	r2, r2, #3
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	4093      	lsls	r3, r2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6a:	4938      	ldr	r1, [pc, #224]	@ (8002e4c <HAL_GPIO_Init+0x35c>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002dcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f ae63 	bne.w	8002b04 <HAL_GPIO_Init+0x14>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	3724      	adds	r7, #36	@ 0x24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	58000400 	.word	0x58000400

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e6c:	e003      	b.n	8002e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e90:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fe73 	bl	8000b94 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e08b      	b.n	8002fe2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe f806 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	@ 0x24
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e006      	b.n	8002f40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d108      	bne.n	8002f5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	e007      	b.n	8002f6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <HAL_I2C_Init+0x134>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1a      	ldr	r2, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	02008000 	.word	0x02008000

08002ff0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	817b      	strh	r3, [r7, #10]
 8003000:	4613      	mov	r3, r2
 8003002:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	f040 80fd 	bne.w	800320c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x30>
 800301c:	2302      	movs	r3, #2
 800301e:	e0f6      	b.n	800320e <HAL_I2C_Master_Transmit+0x21e>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003028:	f7fe fa6a 	bl	8001500 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2319      	movs	r3, #25
 8003034:	2201      	movs	r2, #1
 8003036:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa0a 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e1      	b.n	800320e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2221      	movs	r2, #33	@ 0x21
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2210      	movs	r2, #16
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	893a      	ldrh	r2, [r7, #8]
 800306a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2bff      	cmp	r3, #255	@ 0xff
 800307a:	d906      	bls.n	800308a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	22ff      	movs	r2, #255	@ 0xff
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003082:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e007      	b.n	800309a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003098:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_I2C_Master_Transmit+0x228>)
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fc05 	bl	80038f4 <I2C_TransferConfig>
 80030ea:	e066      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	8979      	ldrh	r1, [r7, #10]
 80030f4:	4b48      	ldr	r3, [pc, #288]	@ (8003218 <HAL_I2C_Master_Transmit+0x228>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fbfa 	bl	80038f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003100:	e05b      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f9fd 	bl	8003506 <I2C_WaitOnTXISFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07b      	b.n	800320e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d034      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x1ca>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d130      	bne.n	80031ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2200      	movs	r2, #0
 8003160:	2180      	movs	r1, #128	@ 0x80
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f976 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e04d      	b.n	800320e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2bff      	cmp	r3, #255	@ 0xff
 800317a:	d90e      	bls.n	800319a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	@ 0xff
 8003180:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	b2da      	uxtb	r2, r3
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	2300      	movs	r3, #0
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fbae 	bl	80038f4 <I2C_TransferConfig>
 8003198:	e00f      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	8979      	ldrh	r1, [r7, #10]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fb9d 	bl	80038f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d19e      	bne.n	8003102 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f9e3 	bl	8003594 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e01a      	b.n	800320e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2220      	movs	r2, #32
 80031de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_I2C_Master_Transmit+0x22c>)
 80031ec:	400b      	ands	r3, r1
 80031ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	80002000 	.word	0x80002000
 800321c:	fe00e800 	.word	0xfe00e800

08003220 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80db 	bne.w	80033f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_I2C_Master_Receive+0x30>
 800324c:	2302      	movs	r3, #2
 800324e:	e0d4      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003258:	f7fe f952 	bl	8001500 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2319      	movs	r3, #25
 8003264:	2201      	movs	r2, #1
 8003266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8f2 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0bf      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2222      	movs	r2, #34	@ 0x22
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2210      	movs	r2, #16
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2bff      	cmp	r3, #255	@ 0xff
 80032aa:	d90e      	bls.n	80032ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	22ff      	movs	r2, #255	@ 0xff
 80032b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	4b52      	ldr	r3, [pc, #328]	@ (8003404 <HAL_I2C_Master_Receive+0x1e4>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fb16 	bl	80038f4 <I2C_TransferConfig>
 80032c8:	e06d      	b.n	80033a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <HAL_I2C_Master_Receive+0x1e4>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fb05 	bl	80038f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032ea:	e05c      	b.n	80033a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	6a39      	ldr	r1, [r7, #32]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f993 	bl	800361c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e07c      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d034      	beq.n	80033a6 <HAL_I2C_Master_Receive+0x186>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d130      	bne.n	80033a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2200      	movs	r2, #0
 800334c:	2180      	movs	r1, #128	@ 0x80
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f880 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e04d      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2bff      	cmp	r3, #255	@ 0xff
 8003366:	d90e      	bls.n	8003386 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	22ff      	movs	r2, #255	@ 0xff
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	b2da      	uxtb	r2, r3
 8003374:	8979      	ldrh	r1, [r7, #10]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fab8 	bl	80038f4 <I2C_TransferConfig>
 8003384:	e00f      	b.n	80033a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	b2da      	uxtb	r2, r3
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 faa7 	bl	80038f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d19d      	bne.n	80032ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	6a39      	ldr	r1, [r7, #32]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f8ed 	bl	8003594 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01a      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <HAL_I2C_Master_Receive+0x1e8>)
 80033d8:	400b      	ands	r3, r1
 80033da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	80002400 	.word	0x80002400
 8003408:	fe00e800 	.word	0xfe00e800

0800340c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d007      	beq.n	8003448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	619a      	str	r2, [r3, #24]
  }
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	e03b      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f962 	bl	8003734 <I2C_IsErrorOccurred>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e041      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d02d      	beq.n	80034de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe f83d 	bl	8001500 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d122      	bne.n	80034de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d113      	bne.n	80034de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d0b4      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003512:	e033      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f90b 	bl	8003734 <I2C_IsErrorOccurred>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e031      	b.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d025      	beq.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fd ffe6 	bl	8001500 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11a      	bne.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d013      	beq.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e007      	b.n	800358c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d1c4      	bne.n	8003514 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a0:	e02f      	b.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8c4 	bl	8003734 <I2C_IsErrorOccurred>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e02d      	b.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fd ffa3 	bl	8001500 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11a      	bne.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d013      	beq.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b20      	cmp	r3, #32
 800360e:	d1c8      	bne.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800362c:	e071      	b.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f87e 	bl	8003734 <I2C_IsErrorOccurred>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b20      	cmp	r3, #32
 800364e:	d13b      	bne.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d138      	bne.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d105      	bne.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b10      	cmp	r3, #16
 800367c:	d121      	bne.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2210      	movs	r2, #16
 8003684:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2204      	movs	r2, #4
 800368a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2220      	movs	r2, #32
 8003692:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80036a0:	400b      	ands	r3, r1
 80036a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	75fb      	strb	r3, [r7, #23]
 80036c0:	e002      	b.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80036c8:	f7fd ff1a 	bl	8001500 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d00f      	beq.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d002      	beq.n	8003726 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d083      	beq.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	fe00e800 	.word	0xfe00e800

08003734 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d068      	beq.n	8003832 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2210      	movs	r2, #16
 8003766:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003768:	e049      	b.n	80037fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d045      	beq.n	80037fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fd fec5 	bl	8001500 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_IsErrorOccurred+0x54>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d13a      	bne.n	80037fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003792:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800379a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037aa:	d121      	bne.n	80037f0 <I2C_IsErrorOccurred+0xbc>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b2:	d01d      	beq.n	80037f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d01a      	beq.n	80037f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037ca:	f7fd fe99 	bl	8001500 <HAL_GetTick>
 80037ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	e00e      	b.n	80037f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037d2:	f7fd fe95 	bl	8001500 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b19      	cmp	r3, #25
 80037de:	d907      	bls.n	80037f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f043 0320 	orr.w	r3, r3, #32
 80037e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80037ee:	e006      	b.n	80037fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d1e9      	bne.n	80037d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b20      	cmp	r3, #32
 800380a:	d003      	beq.n	8003814 <I2C_IsErrorOccurred+0xe0>
 800380c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0aa      	beq.n	800376a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2220      	movs	r2, #32
 8003822:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f043 0308 	orr.w	r3, r3, #8
 800386c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f043 0302 	orr.w	r3, r3, #2
 800388e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01c      	beq.n	80038e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff fdaf 	bl	800340c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <I2C_IsErrorOccurred+0x1bc>)
 80038ba:	400b      	ands	r3, r1
 80038bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80038e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3728      	adds	r7, #40	@ 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	fe00e800 	.word	0xfe00e800

080038f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	4613      	mov	r3, r2
 8003904:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800390c:	7a7b      	ldrb	r3, [r7, #9]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003914:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	4313      	orrs	r3, r2
 800391e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003922:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	0d5b      	lsrs	r3, r3, #21
 800392e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <I2C_TransferConfig+0x60>)
 8003934:	430b      	orrs	r3, r1
 8003936:	43db      	mvns	r3, r3
 8003938:	ea02 0103 	and.w	r1, r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	03ff63ff 	.word	0x03ff63ff

08003958 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	d138      	bne.n	80039e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003978:	2302      	movs	r3, #2
 800397a:	e032      	b.n	80039e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	@ 0x24
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d139      	bne.n	8003a78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e033      	b.n	8003a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2224      	movs	r2, #36	@ 0x24
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e000      	b.n	8003a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
  }
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0fe      	b.n	8003c96 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fd fafb 	bl	80010a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f005 fc0e 	bl	80092e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7c1a      	ldrb	r2, [r3, #16]
 8003acc:	f88d 2000 	strb.w	r2, [sp]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad4:	f005 fb92 	bl	80091fc <USB_CoreInit>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0d5      	b.n	8003c96 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f005 fc06 	bl	8009302 <USB_SetCurrentMode>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0c6      	b.n	8003c96 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e04a      	b.n	8003ba4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3315      	adds	r3, #21
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3314      	adds	r3, #20
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	b298      	uxth	r0, r3
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	332e      	adds	r3, #46	@ 0x2e
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	331c      	adds	r3, #28
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b76:	7bfa      	ldrb	r2, [r7, #15]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3320      	adds	r3, #32
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	3324      	adds	r3, #36	@ 0x24
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	791b      	ldrb	r3, [r3, #4]
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3af      	bcc.n	8003b0e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	e044      	b.n	8003c3e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	791b      	ldrb	r3, [r3, #4]
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d3b5      	bcc.n	8003bb4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7c1a      	ldrb	r2, [r3, #16]
 8003c50:	f88d 2000 	strb.w	r2, [sp]
 8003c54:	3304      	adds	r3, #4
 8003c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c58:	f005 fba0 	bl	800939c <USB_DevInit>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e013      	b.n	8003c96 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7b1b      	ldrb	r3, [r3, #12]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d102      	bne.n	8003c8a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f80b 	bl	8003ca0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f005 fd5b 	bl	800974a <USB_DevDisconnect>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cce:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	10000003 	.word	0x10000003

08003ce8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d00a      	beq.n	8003d12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cfc:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d001      	beq.n	8003d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01f      	b.n	8003d4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e01d      	b.n	8003d4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d12:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f023 0207 	bic.w	r2, r3, #7
 8003d1a:	490f      	ldr	r1, [pc, #60]	@ (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d22:	f7fd fbed 	bl	8001500 <HAL_GetTick>
 8003d26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d28:	e009      	b.n	8003d3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d2a:	f7fd fbe9 	bl	8001500 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d38:	d901      	bls.n	8003d3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_PWREx_ConfigSupply+0x70>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4a:	d1ee      	bne.n	8003d2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	58024800 	.word	0x58024800

08003d5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	60d3      	str	r3, [r2, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	58024800 	.word	0x58024800

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	@ 0x30
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f000 bc48 	b.w	8004620 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8088 	beq.w	8003eae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9e:	4b99      	ldr	r3, [pc, #612]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003da8:	4b96      	ldr	r3, [pc, #600]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d007      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x48>
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	2b18      	cmp	r3, #24
 8003db8:	d111      	bne.n	8003dde <HAL_RCC_OscConfig+0x62>
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d06d      	beq.n	8003eac <HAL_RCC_OscConfig+0x130>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d169      	bne.n	8003eac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f000 bc21 	b.w	8004620 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x7a>
 8003de8:	4b86      	ldr	r3, [pc, #536]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a85      	ldr	r2, [pc, #532]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e02e      	b.n	8003e54 <HAL_RCC_OscConfig+0xd8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x9c>
 8003dfe:	4b81      	ldr	r3, [pc, #516]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a80      	ldr	r2, [pc, #512]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b7e      	ldr	r3, [pc, #504]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7d      	ldr	r2, [pc, #500]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e01d      	b.n	8003e54 <HAL_RCC_OscConfig+0xd8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0xc0>
 8003e22:	4b78      	ldr	r3, [pc, #480]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a77      	ldr	r2, [pc, #476]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b75      	ldr	r3, [pc, #468]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a74      	ldr	r2, [pc, #464]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0xd8>
 8003e3c:	4b71      	ldr	r3, [pc, #452]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a70      	ldr	r2, [pc, #448]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b6e      	ldr	r3, [pc, #440]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6d      	ldr	r2, [pc, #436]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fb50 	bl	8001500 <HAL_GetTick>
 8003e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fd fb4c 	bl	8001500 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	@ 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e3d4      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e76:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0xe8>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd fb3c 	bl	8001500 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fb38 	bl	8001500 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	@ 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e3c0      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e9e:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x110>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80ca 	beq.w	8004050 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebc:	4b51      	ldr	r3, [pc, #324]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x166>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	2b18      	cmp	r3, #24
 8003ed6:	d156      	bne.n	8003f86 <HAL_RCC_OscConfig+0x20a>
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d151      	bne.n	8003f86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee2:	4b48      	ldr	r3, [pc, #288]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_RCC_OscConfig+0x17e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e392      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003efa:	4b42      	ldr	r3, [pc, #264]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 0219 	bic.w	r2, r3, #25
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	493f      	ldr	r1, [pc, #252]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd faf8 	bl	8001500 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fd faf4 	bl	8001500 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e37c      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f26:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	f7fd fb15 	bl	8001560 <HAL_GetREVID>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d817      	bhi.n	8003f70 <HAL_RCC_OscConfig+0x1f4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b40      	cmp	r3, #64	@ 0x40
 8003f46:	d108      	bne.n	8003f5a <HAL_RCC_OscConfig+0x1de>
 8003f48:	4b2e      	ldr	r3, [pc, #184]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f50:	4a2c      	ldr	r2, [pc, #176]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f58:	e07a      	b.n	8004050 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	031b      	lsls	r3, r3, #12
 8003f68:	4926      	ldr	r1, [pc, #152]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6e:	e06f      	b.n	8004050 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	4921      	ldr	r1, [pc, #132]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f84:	e064      	b.n	8004050 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d047      	beq.n	800401e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 0219 	bic.w	r2, r3, #25
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	491a      	ldr	r1, [pc, #104]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd faae 	bl	8001500 <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd faaa 	bl	8001500 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e332      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	f7fd facb 	bl	8001560 <HAL_GetREVID>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d819      	bhi.n	8004008 <HAL_RCC_OscConfig+0x28c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d108      	bne.n	8003fee <HAL_RCC_OscConfig+0x272>
 8003fdc:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003fe4:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fea:	6053      	str	r3, [r2, #4]
 8003fec:	e030      	b.n	8004050 <HAL_RCC_OscConfig+0x2d4>
 8003fee:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	031b      	lsls	r3, r3, #12
 8003ffc:	4901      	ldr	r1, [pc, #4]	@ (8004004 <HAL_RCC_OscConfig+0x288>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
 8004002:	e025      	b.n	8004050 <HAL_RCC_OscConfig+0x2d4>
 8004004:	58024400 	.word	0x58024400
 8004008:	4b9a      	ldr	r3, [pc, #616]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	4997      	ldr	r1, [pc, #604]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
 800401c:	e018      	b.n	8004050 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401e:	4b95      	ldr	r3, [pc, #596]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a94      	ldr	r2, [pc, #592]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7fd fa69 	bl	8001500 <HAL_GetTick>
 800402e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7fd fa65 	bl	8001500 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e2ed      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004044:	4b8b      	ldr	r3, [pc, #556]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a9 	beq.w	80041b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405e:	4b85      	ldr	r3, [pc, #532]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004066:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004068:	4b82      	ldr	r3, [pc, #520]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d007      	beq.n	8004084 <HAL_RCC_OscConfig+0x308>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b18      	cmp	r3, #24
 8004078:	d13a      	bne.n	80040f0 <HAL_RCC_OscConfig+0x374>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d135      	bne.n	80040f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004084:	4b7b      	ldr	r3, [pc, #492]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_OscConfig+0x320>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	2b80      	cmp	r3, #128	@ 0x80
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e2c1      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409c:	f7fd fa60 	bl	8001560 <HAL_GetREVID>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d817      	bhi.n	80040da <HAL_RCC_OscConfig+0x35e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d108      	bne.n	80040c4 <HAL_RCC_OscConfig+0x348>
 80040b2:	4b70      	ldr	r3, [pc, #448]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040c2:	e075      	b.n	80041b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	069b      	lsls	r3, r3, #26
 80040d2:	4968      	ldr	r1, [pc, #416]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040d8:	e06a      	b.n	80041b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040da:	4b66      	ldr	r3, [pc, #408]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	4962      	ldr	r1, [pc, #392]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ee:	e05f      	b.n	80041b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d042      	beq.n	800417e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80040fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd f9fc 	bl	8001500 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800410c:	f7fd f9f8 	bl	8001500 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e280      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800411e:	4b55      	ldr	r3, [pc, #340]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800412a:	f7fd fa19 	bl	8001560 <HAL_GetREVID>
 800412e:	4603      	mov	r3, r0
 8004130:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004134:	4293      	cmp	r3, r2
 8004136:	d817      	bhi.n	8004168 <HAL_RCC_OscConfig+0x3ec>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	2b20      	cmp	r3, #32
 800413e:	d108      	bne.n	8004152 <HAL_RCC_OscConfig+0x3d6>
 8004140:	4b4c      	ldr	r3, [pc, #304]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004148:	4a4a      	ldr	r2, [pc, #296]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 800414a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800414e:	6053      	str	r3, [r2, #4]
 8004150:	e02e      	b.n	80041b0 <HAL_RCC_OscConfig+0x434>
 8004152:	4b48      	ldr	r3, [pc, #288]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	069b      	lsls	r3, r3, #26
 8004160:	4944      	ldr	r1, [pc, #272]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
 8004166:	e023      	b.n	80041b0 <HAL_RCC_OscConfig+0x434>
 8004168:	4b42      	ldr	r3, [pc, #264]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	493f      	ldr	r1, [pc, #252]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004178:	4313      	orrs	r3, r2
 800417a:	60cb      	str	r3, [r1, #12]
 800417c:	e018      	b.n	80041b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800417e:	4b3d      	ldr	r3, [pc, #244]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3c      	ldr	r2, [pc, #240]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004184:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd f9b9 	bl	8001500 <HAL_GetTick>
 800418e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004192:	f7fd f9b5 	bl	8001500 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e23d      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041a4:	4b33      	ldr	r3, [pc, #204]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d036      	beq.n	800422a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d019      	beq.n	80041f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd f996 	bl	8001500 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fd f992 	bl	8001500 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e21a      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041ea:	4b22      	ldr	r3, [pc, #136]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80041ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x45c>
 80041f6:	e018      	b.n	800422a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fd f97c 	bl	8001500 <HAL_GetTick>
 8004208:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420c:	f7fd f978 	bl	8001500 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e200      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d039      	beq.n	80042aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01c      	beq.n	8004278 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800423e:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004244:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004248:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800424a:	f7fd f959 	bl	8001500 <HAL_GetTick>
 800424e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fd f955 	bl	8001500 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e1dd      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004264:	4b03      	ldr	r3, [pc, #12]	@ (8004274 <HAL_RCC_OscConfig+0x4f8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x4d6>
 8004270:	e01b      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004278:	4b9b      	ldr	r3, [pc, #620]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a9a      	ldr	r2, [pc, #616]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800427e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004282:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004284:	f7fd f93c 	bl	8001500 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800428c:	f7fd f938 	bl	8001500 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e1c0      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800429e:	4b92      	ldr	r3, [pc, #584]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8081 	beq.w	80043ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042b8:	4b8c      	ldr	r3, [pc, #560]	@ (80044ec <HAL_RCC_OscConfig+0x770>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a8b      	ldr	r2, [pc, #556]	@ (80044ec <HAL_RCC_OscConfig+0x770>)
 80042be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c4:	f7fd f91c 	bl	8001500 <HAL_GetTick>
 80042c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042cc:	f7fd f918 	bl	8001500 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e1a0      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042de:	4b83      	ldr	r3, [pc, #524]	@ (80044ec <HAL_RCC_OscConfig+0x770>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x584>
 80042f2:	4b7d      	ldr	r3, [pc, #500]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	4a7c      	ldr	r2, [pc, #496]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fe:	e02d      	b.n	800435c <HAL_RCC_OscConfig+0x5e0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <HAL_RCC_OscConfig+0x5a6>
 8004308:	4b77      	ldr	r3, [pc, #476]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	4a76      	ldr	r2, [pc, #472]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70
 8004314:	4b74      	ldr	r3, [pc, #464]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a73      	ldr	r2, [pc, #460]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004320:	e01c      	b.n	800435c <HAL_RCC_OscConfig+0x5e0>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c8>
 800432a:	4b6f      	ldr	r3, [pc, #444]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	4a6e      	ldr	r2, [pc, #440]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
 8004336:	4b6c      	ldr	r3, [pc, #432]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	4a6b      	ldr	r2, [pc, #428]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6713      	str	r3, [r2, #112]	@ 0x70
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0x5e0>
 8004344:	4b68      	ldr	r3, [pc, #416]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	4a67      	ldr	r2, [pc, #412]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004350:	4b65      	ldr	r3, [pc, #404]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004354:	4a64      	ldr	r2, [pc, #400]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd f8cc 	bl	8001500 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd f8c8 	bl	8001500 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e14e      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004382:	4b59      	ldr	r3, [pc, #356]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ee      	beq.n	800436c <HAL_RCC_OscConfig+0x5f0>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd f8b6 	bl	8001500 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fd f8b2 	bl	8001500 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e138      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043ae:	4b4e      	ldr	r3, [pc, #312]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ee      	bne.n	8004398 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 812d 	beq.w	800461e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043c4:	4b48      	ldr	r3, [pc, #288]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043cc:	2b18      	cmp	r3, #24
 80043ce:	f000 80bd 	beq.w	800454c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	f040 809e 	bne.w	8004518 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043dc:	4b42      	ldr	r3, [pc, #264]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a41      	ldr	r2, [pc, #260]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80043e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd f88a 	bl	8001500 <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd f886 	bl	8001500 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e10e      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004402:	4b39      	ldr	r3, [pc, #228]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800440e:	4b36      	ldr	r3, [pc, #216]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004412:	4b37      	ldr	r3, [pc, #220]	@ (80044f0 <HAL_RCC_OscConfig+0x774>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800441e:	0112      	lsls	r2, r2, #4
 8004420:	430a      	orrs	r2, r1
 8004422:	4931      	ldr	r1, [pc, #196]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	628b      	str	r3, [r1, #40]	@ 0x28
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	3b01      	subs	r3, #1
 800442e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004436:	3b01      	subs	r3, #1
 8004438:	025b      	lsls	r3, r3, #9
 800443a:	b29b      	uxth	r3, r3
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004442:	3b01      	subs	r3, #1
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	3b01      	subs	r3, #1
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004458:	4923      	ldr	r1, [pc, #140]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800445e:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	4a21      	ldr	r2, [pc, #132]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800446a:	4b1f      	ldr	r3, [pc, #124]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800446c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800446e:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <HAL_RCC_OscConfig+0x778>)
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004476:	00d2      	lsls	r2, r2, #3
 8004478:	491b      	ldr	r1, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800447a:	4313      	orrs	r3, r2
 800447c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800447e:	4b1a      	ldr	r3, [pc, #104]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	f023 020c 	bic.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	4917      	ldr	r1, [pc, #92]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004490:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	f023 0202 	bic.w	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	4912      	ldr	r1, [pc, #72]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044a2:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	4a10      	ldr	r2, [pc, #64]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d2:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a04      	ldr	r2, [pc, #16]	@ (80044e8 <HAL_RCC_OscConfig+0x76c>)
 80044d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fd f80f 	bl	8001500 <HAL_GetTick>
 80044e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044e4:	e011      	b.n	800450a <HAL_RCC_OscConfig+0x78e>
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	58024800 	.word	0x58024800
 80044f0:	fffffc0c 	.word	0xfffffc0c
 80044f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fd f802 	bl	8001500 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e08a      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x77c>
 8004516:	e082      	b.n	800461e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b43      	ldr	r3, [pc, #268]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a42      	ldr	r2, [pc, #264]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 800451e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fc ffec 	bl	8001500 <HAL_GetTick>
 8004528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452c:	f7fc ffe8 	bl	8001500 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e070      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800453e:	4b3a      	ldr	r3, [pc, #232]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x7b0>
 800454a:	e068      	b.n	800461e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800454c:	4b36      	ldr	r3, [pc, #216]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004552:	4b35      	ldr	r3, [pc, #212]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	2b01      	cmp	r3, #1
 800455e:	d031      	beq.n	80045c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f003 0203 	and.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d12a      	bne.n	80045c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d122      	bne.n	80045c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d11a      	bne.n	80045c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d111      	bne.n	80045c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d108      	bne.n	80045c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e02b      	b.n	8004620 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80045c8:	4b17      	ldr	r3, [pc, #92]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 80045ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045cc:	08db      	lsrs	r3, r3, #3
 80045ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d01f      	beq.n	800461e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80045de:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	4a11      	ldr	r2, [pc, #68]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ea:	f7fc ff89 	bl	8001500 <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80045f0:	bf00      	nop
 80045f2:	f7fc ff85 	bl	8001500 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d0f9      	beq.n	80045f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 8004600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <HAL_RCC_OscConfig+0x8b0>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800460a:	00d2      	lsls	r2, r2, #3
 800460c:	4906      	ldr	r1, [pc, #24]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 800460e:	4313      	orrs	r3, r2
 8004610:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004612:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	4a04      	ldr	r2, [pc, #16]	@ (8004628 <HAL_RCC_OscConfig+0x8ac>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	@ 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	58024400 	.word	0x58024400
 800462c:	ffff0007 	.word	0xffff0007

08004630 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e19c      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b8a      	ldr	r3, [pc, #552]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d910      	bls.n	8004674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b87      	ldr	r3, [pc, #540]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 020f 	bic.w	r2, r3, #15
 800465a:	4985      	ldr	r1, [pc, #532]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b83      	ldr	r3, [pc, #524]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e184      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	4b7b      	ldr	r3, [pc, #492]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800468c:	429a      	cmp	r2, r3
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004690:	4b78      	ldr	r3, [pc, #480]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4975      	ldr	r1, [pc, #468]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	4b70      	ldr	r3, [pc, #448]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d908      	bls.n	80046d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046be:	4b6d      	ldr	r3, [pc, #436]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	496a      	ldr	r1, [pc, #424]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	4b64      	ldr	r3, [pc, #400]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d908      	bls.n	80046fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ec:	4b61      	ldr	r3, [pc, #388]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	495e      	ldr	r1, [pc, #376]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	4b59      	ldr	r3, [pc, #356]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d908      	bls.n	800472c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800471a:	4b56      	ldr	r3, [pc, #344]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4953      	ldr	r1, [pc, #332]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004728:	4313      	orrs	r3, r2
 800472a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	4b4d      	ldr	r3, [pc, #308]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	429a      	cmp	r2, r3
 8004746:	d908      	bls.n	800475a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b4a      	ldr	r3, [pc, #296]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f023 020f 	bic.w	r2, r3, #15
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4947      	ldr	r1, [pc, #284]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004756:	4313      	orrs	r3, r2
 8004758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d055      	beq.n	8004812 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004766:	4b43      	ldr	r3, [pc, #268]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	4940      	ldr	r1, [pc, #256]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004774:	4313      	orrs	r3, r2
 8004776:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d107      	bne.n	8004790 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004780:	4b3c      	ldr	r3, [pc, #240]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d121      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0f6      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004798:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d115      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0ea      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047b0:	4b30      	ldr	r3, [pc, #192]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0de      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d6      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047d0:	4b28      	ldr	r3, [pc, #160]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f023 0207 	bic.w	r2, r3, #7
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4925      	ldr	r1, [pc, #148]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e2:	f7fc fe8d 	bl	8001500 <HAL_GetTick>
 80047e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ea:	f7fc fe89 	bl	8001500 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0be      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004800:	4b1c      	ldr	r3, [pc, #112]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	429a      	cmp	r2, r3
 8004810:	d1eb      	bne.n	80047ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	4b14      	ldr	r3, [pc, #80]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	429a      	cmp	r2, r3
 800482c:	d208      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482e:	4b11      	ldr	r3, [pc, #68]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f023 020f 	bic.w	r2, r3, #15
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	490e      	ldr	r1, [pc, #56]	@ (8004874 <HAL_RCC_ClockConfig+0x244>)
 800483c:	4313      	orrs	r3, r2
 800483e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d214      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 020f 	bic.w	r2, r3, #15
 8004856:	4906      	ldr	r1, [pc, #24]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <HAL_RCC_ClockConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e086      	b.n	800497e <HAL_RCC_ClockConfig+0x34e>
 8004870:	52002000 	.word	0x52002000
 8004874:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d010      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	4b3f      	ldr	r3, [pc, #252]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004890:	429a      	cmp	r2, r3
 8004892:	d208      	bcs.n	80048a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004894:	4b3c      	ldr	r3, [pc, #240]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4939      	ldr	r1, [pc, #228]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d010      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	4b34      	ldr	r3, [pc, #208]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048be:	429a      	cmp	r2, r3
 80048c0:	d208      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048c2:	4b31      	ldr	r3, [pc, #196]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	492e      	ldr	r1, [pc, #184]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d010      	beq.n	8004902 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	4b28      	ldr	r3, [pc, #160]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d208      	bcs.n	8004902 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048f0:	4b25      	ldr	r3, [pc, #148]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4922      	ldr	r1, [pc, #136]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d010      	beq.n	8004930 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800491a:	429a      	cmp	r2, r3
 800491c:	d208      	bcs.n	8004930 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800491e:	4b1a      	ldr	r3, [pc, #104]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4917      	ldr	r1, [pc, #92]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 800492c:	4313      	orrs	r3, r2
 800492e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004930:	f000 f834 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	4912      	ldr	r1, [pc, #72]	@ (800498c <HAL_RCC_ClockConfig+0x35c>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800494e:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <HAL_RCC_ClockConfig+0x358>)
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	4a0d      	ldr	r2, [pc, #52]	@ (800498c <HAL_RCC_ClockConfig+0x35c>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <HAL_RCC_ClockConfig+0x360>)
 8004966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004968:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <HAL_RCC_ClockConfig+0x364>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800496e:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <HAL_RCC_ClockConfig+0x368>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc fd7a 	bl	800146c <HAL_InitTick>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	58024400 	.word	0x58024400
 800498c:	0800a1b8 	.word	0x0800a1b8
 8004990:	24000004 	.word	0x24000004
 8004994:	24000000 	.word	0x24000000
 8004998:	24000008 	.word	0x24000008

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	@ 0x24
 80049a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a2:	4bb3      	ldr	r3, [pc, #716]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049aa:	2b18      	cmp	r3, #24
 80049ac:	f200 8155 	bhi.w	8004c5a <HAL_RCC_GetSysClockFreq+0x2be>
 80049b0:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	08004a1d 	.word	0x08004a1d
 80049bc:	08004c5b 	.word	0x08004c5b
 80049c0:	08004c5b 	.word	0x08004c5b
 80049c4:	08004c5b 	.word	0x08004c5b
 80049c8:	08004c5b 	.word	0x08004c5b
 80049cc:	08004c5b 	.word	0x08004c5b
 80049d0:	08004c5b 	.word	0x08004c5b
 80049d4:	08004c5b 	.word	0x08004c5b
 80049d8:	08004a43 	.word	0x08004a43
 80049dc:	08004c5b 	.word	0x08004c5b
 80049e0:	08004c5b 	.word	0x08004c5b
 80049e4:	08004c5b 	.word	0x08004c5b
 80049e8:	08004c5b 	.word	0x08004c5b
 80049ec:	08004c5b 	.word	0x08004c5b
 80049f0:	08004c5b 	.word	0x08004c5b
 80049f4:	08004c5b 	.word	0x08004c5b
 80049f8:	08004a49 	.word	0x08004a49
 80049fc:	08004c5b 	.word	0x08004c5b
 8004a00:	08004c5b 	.word	0x08004c5b
 8004a04:	08004c5b 	.word	0x08004c5b
 8004a08:	08004c5b 	.word	0x08004c5b
 8004a0c:	08004c5b 	.word	0x08004c5b
 8004a10:	08004c5b 	.word	0x08004c5b
 8004a14:	08004c5b 	.word	0x08004c5b
 8004a18:	08004a4f 	.word	0x08004a4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a1c:	4b94      	ldr	r3, [pc, #592]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a28:	4b91      	ldr	r3, [pc, #580]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	08db      	lsrs	r3, r3, #3
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	4a90      	ldr	r2, [pc, #576]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
 8004a38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a3a:	e111      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a3c:	4b8d      	ldr	r3, [pc, #564]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a3e:	61bb      	str	r3, [r7, #24]
      break;
 8004a40:	e10e      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a42:	4b8d      	ldr	r3, [pc, #564]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a44:	61bb      	str	r3, [r7, #24]
      break;
 8004a46:	e10b      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a48:	4b8c      	ldr	r3, [pc, #560]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a4a:	61bb      	str	r3, [r7, #24]
      break;
 8004a4c:	e108      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a4e:	4b88      	ldr	r3, [pc, #544]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a58:	4b85      	ldr	r3, [pc, #532]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a64:	4b82      	ldr	r3, [pc, #520]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a6e:	4b80      	ldr	r3, [pc, #512]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80e1 	beq.w	8004c54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f000 8083 	beq.w	8004ba0 <HAL_RCC_GetSysClockFreq+0x204>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	f200 80a1 	bhi.w	8004be4 <HAL_RCC_GetSysClockFreq+0x248>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x114>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d056      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004aae:	e099      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02d      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004abc:	4b6c      	ldr	r3, [pc, #432]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b62      	ldr	r3, [pc, #392]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004afa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b16:	e087      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004c84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b51      	ldr	r3, [pc, #324]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b5a:	e065      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004c88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b40      	ldr	r3, [pc, #256]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b9e:	e043      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004c8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004be2:	e021      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c32:	3301      	adds	r3, #1
 8004c34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4c:	ee17 3a90 	vmov	r3, s15
 8004c50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c52:	e005      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
      break;
 8004c58:	e002      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c5a:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c5c:	61bb      	str	r3, [r7, #24]
      break;
 8004c5e:	bf00      	nop
  }

  return sysclockfreq;
 8004c60:	69bb      	ldr	r3, [r7, #24]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3724      	adds	r7, #36	@ 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	03d09000 	.word	0x03d09000
 8004c78:	003d0900 	.word	0x003d0900
 8004c7c:	007a1200 	.word	0x007a1200
 8004c80:	46000000 	.word	0x46000000
 8004c84:	4c742400 	.word	0x4c742400
 8004c88:	4a742400 	.word	0x4a742400
 8004c8c:	4af42400 	.word	0x4af42400

08004c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c96:	f7ff fe81 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490f      	ldr	r1, [pc, #60]	@ (8004ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	4a09      	ldr	r2, [pc, #36]	@ (8004ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cbe:	5cd3      	ldrb	r3, [r2, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	4a07      	ldr	r2, [pc, #28]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ccc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cce:	4a07      	ldr	r2, [pc, #28]	@ (8004cec <HAL_RCC_GetHCLKFreq+0x5c>)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cd4:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	0800a1b8 	.word	0x0800a1b8
 8004ce8:	24000004 	.word	0x24000004
 8004cec:	24000000 	.word	0x24000000

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cf4:	f7ff ffcc 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4904      	ldr	r1, [pc, #16]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	58024400 	.word	0x58024400
 8004d18:	0800a1b8 	.word	0x0800a1b8

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d20:	f7ff ffb6 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	58024400 	.word	0x58024400
 8004d44:	0800a1b8 	.word	0x0800a1b8

08004d48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b0ca      	sub	sp, #296	@ 0x128
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8004d72:	d049      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d7e:	d02f      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d84:	d828      	bhi.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d8a:	d01a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d90:	d822      	bhi.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d9a:	d007      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d9e:	4bb8      	ldr	r3, [pc, #736]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4ab7      	ldr	r2, [pc, #732]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004daa:	e01a      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db0:	3308      	adds	r3, #8
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 fc8f 	bl	80066d8 <RCCEx_PLL2_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dc0:	e00f      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc6:	3328      	adds	r3, #40	@ 0x28
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fd36 	bl	800683c <RCCEx_PLL3_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dd6:	e004      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dde:	e000      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dea:	4ba5      	ldr	r3, [pc, #660]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df8:	4aa1      	ldr	r2, [pc, #644]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e14:	f04f 0900 	mov.w	r9, #0
 8004e18:	ea58 0309 	orrs.w	r3, r8, r9
 8004e1c:	d047      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d82a      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e28:	a201      	add	r2, pc, #4	@ (adr r2, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e45 	.word	0x08004e45
 8004e34:	08004e53 	.word	0x08004e53
 8004e38:	08004e69 	.word	0x08004e69
 8004e3c:	08004e87 	.word	0x08004e87
 8004e40:	08004e87 	.word	0x08004e87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e44:	4b8e      	ldr	r3, [pc, #568]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	4a8d      	ldr	r2, [pc, #564]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e50:	e01a      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e56:	3308      	adds	r3, #8
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fc3c 	bl	80066d8 <RCCEx_PLL2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e66:	e00f      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6c:	3328      	adds	r3, #40	@ 0x28
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fce3 	bl	800683c <RCCEx_PLL3_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e7c:	e004      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e84:	e000      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e90:	4b7b      	ldr	r3, [pc, #492]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e94:	f023 0107 	bic.w	r1, r3, #7
 8004e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	4a78      	ldr	r2, [pc, #480]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ea4:	e003      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004eba:	f04f 0b00 	mov.w	fp, #0
 8004ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ec2:	d04c      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ece:	d030      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed4:	d829      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ed8:	d02d      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004edc:	d825      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ede:	2b80      	cmp	r3, #128	@ 0x80
 8004ee0:	d018      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ee2:	2b80      	cmp	r3, #128	@ 0x80
 8004ee4:	d821      	bhi.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d007      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004eee:	e01c      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef0:	4b63      	ldr	r3, [pc, #396]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	4a62      	ldr	r2, [pc, #392]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004efc:	e01c      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f02:	3308      	adds	r3, #8
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fbe6 	bl	80066d8 <RCCEx_PLL2_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f12:	e011      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	3328      	adds	r3, #40	@ 0x28
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fc8d 	bl	800683c <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f30:	e002      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f40:	4b4f      	ldr	r3, [pc, #316]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	d053      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f8a:	d035      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f90:	d82e      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f96:	d031      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f9c:	d828      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa2:	d01a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa8:	d822      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fb2:	d007      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb6:	4b32      	ldr	r3, [pc, #200]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	4a31      	ldr	r2, [pc, #196]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e01c      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc8:	3308      	adds	r3, #8
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fb83 	bl	80066d8 <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e011      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	3328      	adds	r3, #40	@ 0x28
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fc2a 	bl	800683c <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fee:	e006      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ff6:	e002      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005006:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800500e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005016:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005018:	430b      	orrs	r3, r1
 800501a:	6593      	str	r3, [r2, #88]	@ 0x58
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005032:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005036:	2300      	movs	r3, #0
 8005038:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800503c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005040:	460b      	mov	r3, r1
 8005042:	4313      	orrs	r3, r2
 8005044:	d056      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800504e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005052:	d038      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005058:	d831      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800505a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800505e:	d034      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005060:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005064:	d82b      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005066:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800506a:	d01d      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800506c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005070:	d825      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800507c:	e01f      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005084:	4ba2      	ldr	r3, [pc, #648]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	4aa1      	ldr	r2, [pc, #644]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800508a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005090:	e01c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005096:	3308      	adds	r3, #8
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f001 fb1c 	bl	80066d8 <RCCEx_PLL2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	3328      	adds	r3, #40	@ 0x28
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fbc3 	bl	800683c <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050c4:	e002      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050e4:	4a8a      	ldr	r2, [pc, #552]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050e6:	430b      	orrs	r3, r1
 80050e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ea:	e003      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005104:	2300      	movs	r3, #0
 8005106:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800510a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d03a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511a:	2b30      	cmp	r3, #48	@ 0x30
 800511c:	d01f      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800511e:	2b30      	cmp	r3, #48	@ 0x30
 8005120:	d819      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005122:	2b20      	cmp	r3, #32
 8005124:	d00c      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005126:	2b20      	cmp	r3, #32
 8005128:	d815      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d019      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800512e:	2b10      	cmp	r3, #16
 8005130:	d111      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005132:	4b77      	ldr	r3, [pc, #476]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	4a76      	ldr	r2, [pc, #472]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800513e:	e011      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005144:	3308      	adds	r3, #8
 8005146:	2102      	movs	r1, #2
 8005148:	4618      	mov	r0, r3
 800514a:	f001 fac5 	bl	80066d8 <RCCEx_PLL2_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005154:	e006      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800515c:	e002      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800515e:	bf00      	nop
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800516c:	4b68      	ldr	r3, [pc, #416]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800516e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005170:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517a:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800517c:	430b      	orrs	r3, r1
 800517e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005196:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800519a:	2300      	movs	r3, #0
 800519c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d051      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b4:	d035      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ba:	d82e      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051c0:	d031      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051c6:	d828      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051cc:	d01a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d2:	d822      	bhi.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051dc:	d007      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051de:	e01c      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051ec:	e01c      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f2:	3308      	adds	r3, #8
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fa6e 	bl	80066d8 <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005202:	e011      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005208:	3328      	adds	r3, #40	@ 0x28
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fb15 	bl	800683c <RCCEx_PLL3_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005218:	e006      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005220:	e002      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005230:	4b37      	ldr	r3, [pc, #220]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005234:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523e:	4a34      	ldr	r2, [pc, #208]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005240:	430b      	orrs	r3, r1
 8005242:	6513      	str	r3, [r2, #80]	@ 0x50
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800524a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800525a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005264:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d056      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005278:	d033      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800527a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800527e:	d82c      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005284:	d02f      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800528a:	d826      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800528c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005290:	d02b      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005296:	d820      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800529c:	d012      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800529e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052a2:	d81a      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d022      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ac:	d115      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	3308      	adds	r3, #8
 80052b4:	2101      	movs	r1, #1
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fa0e 	bl	80066d8 <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052c2:	e015      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c8:	3328      	adds	r3, #40	@ 0x28
 80052ca:	2101      	movs	r1, #1
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 fab5 	bl	800683c <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052e2:	bf00      	nop
 80052e4:	e004      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052e6:	bf00      	nop
 80052e8:	e002      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ea:	bf00      	nop
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10d      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005306:	4a02      	ldr	r2, [pc, #8]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005308:	430b      	orrs	r3, r1
 800530a:	6513      	str	r3, [r2, #80]	@ 0x50
 800530c:	e006      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800530e:	bf00      	nop
 8005310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005332:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d055      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005348:	d033      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800534a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800534e:	d82c      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005354:	d02f      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535a:	d826      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800535c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005360:	d02b      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005362:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005366:	d820      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800536c:	d012      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800536e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005372:	d81a      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d022      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800537c:	d115      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	3308      	adds	r3, #8
 8005384:	2101      	movs	r1, #1
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f9a6 	bl	80066d8 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005392:	e015      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005398:	3328      	adds	r3, #40	@ 0x28
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fa4d 	bl	800683c <RCCEx_PLL3_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053a8:	e00a      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053b0:	e006      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053b2:	bf00      	nop
 80053b4:	e004      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053b6:	bf00      	nop
 80053b8:	e002      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053c8:	4ba3      	ldr	r3, [pc, #652]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053da:	430b      	orrs	r3, r1
 80053dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053de:	e003      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d037      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005412:	d00e      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005418:	d816      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d018      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800541e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005422:	d111      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005424:	4b8c      	ldr	r3, [pc, #560]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	4a8b      	ldr	r2, [pc, #556]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800542e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005430:	e00f      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	3308      	adds	r3, #8
 8005438:	2101      	movs	r1, #1
 800543a:	4618      	mov	r0, r3
 800543c:	f001 f94c 	bl	80066d8 <RCCEx_PLL2_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005446:	e004      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800545a:	4b7f      	ldr	r3, [pc, #508]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800545c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005468:	4a7b      	ldr	r2, [pc, #492]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800546a:	430b      	orrs	r3, r1
 800546c:	6513      	str	r3, [r2, #80]	@ 0x50
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800548e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d039      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d81c      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80054a2:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054e5 	.word	0x080054e5
 80054ac:	080054b9 	.word	0x080054b9
 80054b0:	080054c7 	.word	0x080054c7
 80054b4:	080054e5 	.word	0x080054e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b8:	4b67      	ldr	r3, [pc, #412]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	4a66      	ldr	r2, [pc, #408]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054c4:	e00f      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	3308      	adds	r3, #8
 80054cc:	2102      	movs	r1, #2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 f902 	bl	80066d8 <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054da:	e004      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f2:	f023 0103 	bic.w	r1, r3, #3
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fc:	4a56      	ldr	r2, [pc, #344]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005502:	e003      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005522:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	f000 809f 	beq.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800552e:	4b4b      	ldr	r3, [pc, #300]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4a      	ldr	r2, [pc, #296]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553a:	f7fb ffe1 	bl	8001500 <HAL_GetTick>
 800553e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005542:	e00b      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fb ffdc 	bl	8001500 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b64      	cmp	r3, #100	@ 0x64
 8005552:	d903      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800555a:	e005      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555c:	4b3f      	ldr	r3, [pc, #252]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0ed      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800556c:	2b00      	cmp	r3, #0
 800556e:	d179      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005570:	4b39      	ldr	r3, [pc, #228]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005572:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800557c:	4053      	eors	r3, r2
 800557e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005582:	2b00      	cmp	r3, #0
 8005584:	d015      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005586:	4b34      	ldr	r3, [pc, #208]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005592:	4b31      	ldr	r3, [pc, #196]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005596:	4a30      	ldr	r2, [pc, #192]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800559e:	4b2e      	ldr	r3, [pc, #184]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055be:	d118      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fb ff9e 	bl	8001500 <HAL_GetTick>
 80055c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c8:	e00d      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fb ff99 	bl	8001500 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055da:	429a      	cmp	r2, r3
 80055dc:	d903      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80055e4:	e005      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0eb      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d129      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800560a:	d10e      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800560c:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800561c:	091a      	lsrs	r2, r3, #4
 800561e:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005620:	4013      	ands	r3, r2
 8005622:	4a0d      	ldr	r2, [pc, #52]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005624:	430b      	orrs	r3, r1
 8005626:	6113      	str	r3, [r2, #16]
 8005628:	e005      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800562a:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	4a0a      	ldr	r2, [pc, #40]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005630:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005634:	6113      	str	r3, [r2, #16]
 8005636:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005638:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005646:	4a04      	ldr	r2, [pc, #16]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005648:	430b      	orrs	r3, r1
 800564a:	6713      	str	r3, [r2, #112]	@ 0x70
 800564c:	e00e      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800564e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005656:	e009      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005658:	58024400 	.word	0x58024400
 800565c:	58024800 	.word	0x58024800
 8005660:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f002 0301 	and.w	r3, r2, #1
 8005678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005682:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	f000 8089 	beq.w	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005694:	2b28      	cmp	r3, #40	@ 0x28
 8005696:	d86b      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	08005779 	.word	0x08005779
 80056a4:	08005771 	.word	0x08005771
 80056a8:	08005771 	.word	0x08005771
 80056ac:	08005771 	.word	0x08005771
 80056b0:	08005771 	.word	0x08005771
 80056b4:	08005771 	.word	0x08005771
 80056b8:	08005771 	.word	0x08005771
 80056bc:	08005771 	.word	0x08005771
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005771 	.word	0x08005771
 80056c8:	08005771 	.word	0x08005771
 80056cc:	08005771 	.word	0x08005771
 80056d0:	08005771 	.word	0x08005771
 80056d4:	08005771 	.word	0x08005771
 80056d8:	08005771 	.word	0x08005771
 80056dc:	08005771 	.word	0x08005771
 80056e0:	0800575b 	.word	0x0800575b
 80056e4:	08005771 	.word	0x08005771
 80056e8:	08005771 	.word	0x08005771
 80056ec:	08005771 	.word	0x08005771
 80056f0:	08005771 	.word	0x08005771
 80056f4:	08005771 	.word	0x08005771
 80056f8:	08005771 	.word	0x08005771
 80056fc:	08005771 	.word	0x08005771
 8005700:	08005779 	.word	0x08005779
 8005704:	08005771 	.word	0x08005771
 8005708:	08005771 	.word	0x08005771
 800570c:	08005771 	.word	0x08005771
 8005710:	08005771 	.word	0x08005771
 8005714:	08005771 	.word	0x08005771
 8005718:	08005771 	.word	0x08005771
 800571c:	08005771 	.word	0x08005771
 8005720:	08005779 	.word	0x08005779
 8005724:	08005771 	.word	0x08005771
 8005728:	08005771 	.word	0x08005771
 800572c:	08005771 	.word	0x08005771
 8005730:	08005771 	.word	0x08005771
 8005734:	08005771 	.word	0x08005771
 8005738:	08005771 	.word	0x08005771
 800573c:	08005771 	.word	0x08005771
 8005740:	08005779 	.word	0x08005779
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	3308      	adds	r3, #8
 800574a:	2101      	movs	r1, #1
 800574c:	4618      	mov	r0, r3
 800574e:	f000 ffc3 	bl	80066d8 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005758:	e00f      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	3328      	adds	r3, #40	@ 0x28
 8005760:	2101      	movs	r1, #1
 8005762:	4618      	mov	r0, r3
 8005764:	f001 f86a 	bl	800683c <RCCEx_PLL3_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800576e:	e004      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005776:	e000      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005782:	4bbf      	ldr	r3, [pc, #764]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005786:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005790:	4abb      	ldr	r2, [pc, #748]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6553      	str	r3, [r2, #84]	@ 0x54
 8005796:	e003      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f002 0302 	and.w	r3, r2, #2
 80057ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057ba:	460b      	mov	r3, r1
 80057bc:	4313      	orrs	r3, r2
 80057be:	d041      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d824      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80057ca:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	0800581d 	.word	0x0800581d
 80057d4:	080057e9 	.word	0x080057e9
 80057d8:	080057ff 	.word	0x080057ff
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	0800581d 	.word	0x0800581d
 80057e4:	0800581d 	.word	0x0800581d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ec:	3308      	adds	r3, #8
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 ff71 	bl	80066d8 <RCCEx_PLL2_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057fc:	e00f      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005802:	3328      	adds	r3, #40	@ 0x28
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f818 	bl	800683c <RCCEx_PLL3_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005812:	e004      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800581c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005826:	4b96      	ldr	r3, [pc, #600]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	f023 0107 	bic.w	r1, r3, #7
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005834:	4a92      	ldr	r2, [pc, #584]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005836:	430b      	orrs	r3, r1
 8005838:	6553      	str	r3, [r2, #84]	@ 0x54
 800583a:	e003      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f002 0304 	and.w	r3, r2, #4
 8005850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800585a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d044      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800586c:	2b05      	cmp	r3, #5
 800586e:	d825      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005870:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058c5 	.word	0x080058c5
 800587c:	08005891 	.word	0x08005891
 8005880:	080058a7 	.word	0x080058a7
 8005884:	080058c5 	.word	0x080058c5
 8005888:	080058c5 	.word	0x080058c5
 800588c:	080058c5 	.word	0x080058c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	3308      	adds	r3, #8
 8005896:	2101      	movs	r1, #1
 8005898:	4618      	mov	r0, r3
 800589a:	f000 ff1d 	bl	80066d8 <RCCEx_PLL2_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058a4:	e00f      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3328      	adds	r3, #40	@ 0x28
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 ffc4 	bl	800683c <RCCEx_PLL3_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d2:	f023 0107 	bic.w	r1, r3, #7
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058de:	4a68      	ldr	r2, [pc, #416]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f002 0320 	and.w	r3, r2, #32
 80058fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d055      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800591a:	d033      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800591c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005920:	d82c      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d02f      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592c:	d826      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800592e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005932:	d02b      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005938:	d820      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800593a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800593e:	d012      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005944:	d81a      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d022      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800594e:	d115      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	3308      	adds	r3, #8
 8005956:	2100      	movs	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f000 febd 	bl	80066d8 <RCCEx_PLL2_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005964:	e015      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596a:	3328      	adds	r3, #40	@ 0x28
 800596c:	2102      	movs	r1, #2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ff64 	bl	800683c <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800597a:	e00a      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005982:	e006      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005984:	bf00      	nop
 8005986:	e004      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005988:	bf00      	nop
 800598a:	e002      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800599a:	4b39      	ldr	r3, [pc, #228]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800599c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059aa:	4a35      	ldr	r2, [pc, #212]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d058      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059e6:	d033      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80059e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059ec:	d82c      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f2:	d02f      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f8:	d826      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059fe:	d02b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a04:	d820      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a0a:	d012      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a10:	d81a      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d022      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1a:	d115      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	3308      	adds	r3, #8
 8005a22:	2100      	movs	r1, #0
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fe57 	bl	80066d8 <RCCEx_PLL2_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a30:	e015      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a36:	3328      	adds	r3, #40	@ 0x28
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fefe 	bl	800683c <RCCEx_PLL3_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a46:	e00a      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a4e:	e006      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a50:	bf00      	nop
 8005a52:	e004      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10e      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a66:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a76:	4a02      	ldr	r2, [pc, #8]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7c:	e006      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	d055      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ab4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ab8:	d033      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005aba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005abe:	d82c      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ac4:	d02f      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aca:	d826      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005acc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ad0:	d02b      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ad2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ad6:	d820      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005adc:	d012      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ae2:	d81a      	bhi.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d022      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aec:	d115      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	3308      	adds	r3, #8
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fdee 	bl	80066d8 <RCCEx_PLL2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b02:	e015      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	3328      	adds	r3, #40	@ 0x28
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe95 	bl	800683c <RCCEx_PLL3_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b18:	e00a      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b22:	bf00      	nop
 8005b24:	e004      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b26:	bf00      	nop
 8005b28:	e002      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b38:	4ba1      	ldr	r3, [pc, #644]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b48:	4a9d      	ldr	r2, [pc, #628]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b4e:	e003      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f002 0308 	and.w	r3, r2, #8
 8005b64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d01e      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	3328      	adds	r3, #40	@ 0x28
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fe54 	bl	800683c <RCCEx_PLL3_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ba0:	4b87      	ldr	r3, [pc, #540]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb0:	4a83      	ldr	r2, [pc, #524]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f002 0310 	and.w	r3, r2, #16
 8005bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bcc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	d01e      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be2:	d10c      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be8:	3328      	adds	r3, #40	@ 0x28
 8005bea:	2102      	movs	r1, #2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fe25 	bl	800683c <RCCEx_PLL3_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bfe:	4b70      	ldr	r3, [pc, #448]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c0e:	4a6c      	ldr	r2, [pc, #432]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d03e      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c40:	d022      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c46:	d81b      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c50:	d00b      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c52:	e015      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	3308      	adds	r3, #8
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fd3b 	bl	80066d8 <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c68:	e00f      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	3328      	adds	r3, #40	@ 0x28
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fde2 	bl	800683c <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c7e:	e004      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c92:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ca2:	4a47      	ldr	r2, [pc, #284]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ca8:	e003      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d03b      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cda:	d01f      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005cdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ce0:	d818      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ce6:	d003      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005ce8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cec:	d007      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005cee:	e011      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf0:	4b33      	ldr	r3, [pc, #204]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	4a32      	ldr	r2, [pc, #200]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005cfc:	e00f      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d02:	3328      	adds	r3, #40	@ 0x28
 8005d04:	2101      	movs	r1, #1
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fd98 	bl	800683c <RCCEx_PLL3_Config>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d12:	e004      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d1a:	e000      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d26:	4b26      	ldr	r3, [pc, #152]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	4a22      	ldr	r2, [pc, #136]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d54:	2300      	movs	r3, #0
 8005d56:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d034      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d70:	d007      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d72:	e011      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d74:	4b12      	ldr	r3, [pc, #72]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	4a11      	ldr	r2, [pc, #68]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d80:	e00e      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	3308      	adds	r3, #8
 8005d88:	2102      	movs	r1, #2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fca4 	bl	80066d8 <RCCEx_PLL2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d96:	e003      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db6:	4a02      	ldr	r2, [pc, #8]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dbc:	e006      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005dbe:	bf00      	nop
 8005dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dda:	2300      	movs	r3, #0
 8005ddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dde:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005de2:	460b      	mov	r3, r1
 8005de4:	4313      	orrs	r3, r2
 8005de6:	d00c      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dec:	3328      	adds	r3, #40	@ 0x28
 8005dee:	2102      	movs	r1, #2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fd23 	bl	800683c <RCCEx_PLL3_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e10:	2300      	movs	r3, #0
 8005e12:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d038      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e2a:	d018      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e30:	d811      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e36:	d014      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e3c:	d80b      	bhi.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e46:	d106      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4bc3      	ldr	r3, [pc, #780]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	4ac2      	ldr	r2, [pc, #776]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e54:	e008      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e5e:	bf00      	nop
 8005e60:	e002      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e70:	4bb9      	ldr	r3, [pc, #740]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e80:	4ab5      	ldr	r2, [pc, #724]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e82:	430b      	orrs	r3, r1
 8005e84:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ea2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d009      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005eac:	4baa      	ldr	r3, [pc, #680]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eba:	4aa7      	ldr	r2, [pc, #668]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ece:	2300      	movs	r3, #0
 8005ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ed2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005edc:	4b9e      	ldr	r3, [pc, #632]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005eec:	4a9a      	ldr	r2, [pc, #616]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f00:	2300      	movs	r3, #0
 8005f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f0e:	4b92      	ldr	r3, [pc, #584]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f12:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f30:	2300      	movs	r3, #0
 8005f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	d00e      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f3e:	4b86      	ldr	r3, [pc, #536]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	4a85      	ldr	r2, [pc, #532]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f48:	6113      	str	r3, [r2, #16]
 8005f4a:	4b83      	ldr	r3, [pc, #524]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4c:	6919      	ldr	r1, [r3, #16]
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f56:	4a80      	ldr	r2, [pc, #512]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f78:	4b77      	ldr	r3, [pc, #476]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f86:	4a74      	ldr	r2, [pc, #464]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fb8:	4a67      	ldr	r2, [pc, #412]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d011      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	3308      	adds	r3, #8
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fb78 	bl	80066d8 <RCCEx_PLL2_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	2100      	movs	r1, #0
 8006008:	6239      	str	r1, [r7, #32]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006010:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d011      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	3308      	adds	r3, #8
 8006020:	2101      	movs	r1, #1
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb58 	bl	80066d8 <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800602e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800603a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	2100      	movs	r1, #0
 8006048:	61b9      	str	r1, [r7, #24]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006054:	460b      	mov	r3, r1
 8006056:	4313      	orrs	r3, r2
 8006058:	d011      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3308      	adds	r3, #8
 8006060:	2102      	movs	r1, #2
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fb38 	bl	80066d8 <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	2100      	movs	r1, #0
 8006088:	6139      	str	r1, [r7, #16]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d011      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	3328      	adds	r3, #40	@ 0x28
 80060a0:	2100      	movs	r1, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fbca 	bl	800683c <RCCEx_PLL3_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	2100      	movs	r1, #0
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060d4:	460b      	mov	r3, r1
 80060d6:	4313      	orrs	r3, r2
 80060d8:	d011      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	3328      	adds	r3, #40	@ 0x28
 80060e0:	2101      	movs	r1, #1
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fbaa 	bl	800683c <RCCEx_PLL3_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	2100      	movs	r1, #0
 8006108:	6039      	str	r1, [r7, #0]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006114:	460b      	mov	r3, r1
 8006116:	4313      	orrs	r3, r2
 8006118:	d011      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611e:	3328      	adds	r3, #40	@ 0x28
 8006120:	2102      	movs	r1, #2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb8a 	bl	800683c <RCCEx_PLL3_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800613e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e000      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
}
 800614c:	4618      	mov	r0, r3
 800614e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006152:	46bd      	mov	sp, r7
 8006154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006158:	58024400 	.word	0x58024400

0800615c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006160:	f7fe fd96 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4904      	ldr	r1, [pc, #16]	@ (8006184 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	58024400 	.word	0x58024400
 8006184:	0800a1b8 	.word	0x0800a1b8

08006188 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	@ 0x24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006190:	4ba1      	ldr	r3, [pc, #644]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800619a:	4b9f      	ldr	r3, [pc, #636]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800619c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619e:	0b1b      	lsrs	r3, r3, #12
 80061a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80061b2:	4b99      	ldr	r3, [pc, #612]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8111 	beq.w	80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f000 8083 	beq.w	80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	f200 80a1 	bhi.w	8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d056      	beq.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061f2:	e099      	b.n	8006328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f4:	4b88      	ldr	r3, [pc, #544]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d02d      	beq.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006200:	4b85      	ldr	r3, [pc, #532]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	4a84      	ldr	r2, [pc, #528]	@ (800641c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
 8006210:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b7b      	ldr	r3, [pc, #492]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a03 	vldr	s12, [r7, #12]
 800623e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800625a:	e087      	b.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626e:	4b6a      	ldr	r3, [pc, #424]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006282:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629e:	e065      	b.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b2:	4b59      	ldr	r3, [pc, #356]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e2:	e043      	b.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800642c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f6:	4b48      	ldr	r3, [pc, #288]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006306:	ed97 6a03 	vldr	s12, [r7, #12]
 800630a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800630e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006326:	e021      	b.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a03 	vldr	s12, [r7, #12]
 800634e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800636c:	4b2a      	ldr	r3, [pc, #168]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	0a5b      	lsrs	r3, r3, #9
 8006372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006386:	edd7 6a07 	vldr	s13, [r7, #28]
 800638a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006392:	ee17 2a90 	vmov	r2, s15
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800639a:	4b1f      	ldr	r3, [pc, #124]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c0:	ee17 2a90 	vmov	r2, s15
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80063c8:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ee:	ee17 2a90 	vmov	r2, s15
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063f6:	e008      	b.n	800640a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
}
 800640a:	bf00      	nop
 800640c:	3724      	adds	r7, #36	@ 0x24
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	58024400 	.word	0x58024400
 800641c:	03d09000 	.word	0x03d09000
 8006420:	46000000 	.word	0x46000000
 8006424:	4c742400 	.word	0x4c742400
 8006428:	4a742400 	.word	0x4a742400
 800642c:	4af42400 	.word	0x4af42400

08006430 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006430:	b480      	push	{r7}
 8006432:	b089      	sub	sp, #36	@ 0x24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006438:	4ba1      	ldr	r3, [pc, #644]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006442:	4b9f      	ldr	r3, [pc, #636]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	0d1b      	lsrs	r3, r3, #20
 8006448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800644c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800644e:	4b9c      	ldr	r3, [pc, #624]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800645a:	4b99      	ldr	r3, [pc, #612]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645e:	08db      	lsrs	r3, r3, #3
 8006460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8111 	beq.w	80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b02      	cmp	r3, #2
 8006482:	f000 8083 	beq.w	800658c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b02      	cmp	r3, #2
 800648a:	f200 80a1 	bhi.w	80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d056      	beq.n	8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800649a:	e099      	b.n	80065d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649c:	4b88      	ldr	r3, [pc, #544]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02d      	beq.n	8006504 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a8:	4b85      	ldr	r3, [pc, #532]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	08db      	lsrs	r3, r3, #3
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	4a84      	ldr	r2, [pc, #528]	@ (80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	ee07 3a90 	vmov	s15, r3
 80064c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d2:	4b7b      	ldr	r3, [pc, #492]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006502:	e087      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006516:	4b6a      	ldr	r3, [pc, #424]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006526:	ed97 6a03 	vldr	s12, [r7, #12]
 800652a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800652e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006546:	e065      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006552:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655a:	4b59      	ldr	r3, [pc, #356]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656a:	ed97 6a03 	vldr	s12, [r7, #12]
 800656e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800657e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800658a:	e043      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006596:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800659a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659e:	4b48      	ldr	r3, [pc, #288]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ce:	e021      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e2:	4b37      	ldr	r3, [pc, #220]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006612:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006614:	4b2a      	ldr	r3, [pc, #168]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006618:	0a5b      	lsrs	r3, r3, #9
 800661a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800662a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663a:	ee17 2a90 	vmov	r2, s15
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006642:	4b1f      	ldr	r3, [pc, #124]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006668:	ee17 2a90 	vmov	r2, s15
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006670:	4b13      	ldr	r3, [pc, #76]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	0e1b      	lsrs	r3, r3, #24
 8006676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800668a:	edd7 6a07 	vldr	s13, [r7, #28]
 800668e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006696:	ee17 2a90 	vmov	r2, s15
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800669e:	e008      	b.n	80066b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
}
 80066b2:	bf00      	nop
 80066b4:	3724      	adds	r7, #36	@ 0x24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
 80066c4:	03d09000 	.word	0x03d09000
 80066c8:	46000000 	.word	0x46000000
 80066cc:	4c742400 	.word	0x4c742400
 80066d0:	4a742400 	.word	0x4a742400
 80066d4:	4af42400 	.word	0x4af42400

080066d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066e6:	4b53      	ldr	r3, [pc, #332]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d101      	bne.n	80066f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e099      	b.n	800682a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4e      	ldr	r2, [pc, #312]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80066fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006702:	f7fa fefd 	bl	8001500 <HAL_GetTick>
 8006706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006708:	e008      	b.n	800671c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800670a:	f7fa fef9 	bl	8001500 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e086      	b.n	800682a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800671c:	4b45      	ldr	r3, [pc, #276]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006728:	4b42      	ldr	r3, [pc, #264]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 800672a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	493f      	ldr	r1, [pc, #252]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	628b      	str	r3, [r1, #40]	@ 0x28
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	3b01      	subs	r3, #1
 8006742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	3b01      	subs	r3, #1
 800674c:	025b      	lsls	r3, r3, #9
 800674e:	b29b      	uxth	r3, r3
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	3b01      	subs	r3, #1
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	3b01      	subs	r3, #1
 8006766:	061b      	lsls	r3, r3, #24
 8006768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800676c:	4931      	ldr	r1, [pc, #196]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006772:	4b30      	ldr	r3, [pc, #192]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	492d      	ldr	r1, [pc, #180]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 8006780:	4313      	orrs	r3, r2
 8006782:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006784:	4b2b      	ldr	r3, [pc, #172]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	f023 0220 	bic.w	r2, r3, #32
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4928      	ldr	r1, [pc, #160]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006796:	4b27      	ldr	r3, [pc, #156]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	4a26      	ldr	r2, [pc, #152]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 800679c:	f023 0310 	bic.w	r3, r3, #16
 80067a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067a2:	4b24      	ldr	r3, [pc, #144]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067a6:	4b24      	ldr	r3, [pc, #144]	@ (8006838 <RCCEx_PLL2_Config+0x160>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	69d2      	ldr	r2, [r2, #28]
 80067ae:	00d2      	lsls	r2, r2, #3
 80067b0:	4920      	ldr	r1, [pc, #128]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80067b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067bc:	f043 0310 	orr.w	r3, r3, #16
 80067c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	4a19      	ldr	r2, [pc, #100]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067d4:	e00f      	b.n	80067f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d106      	bne.n	80067ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80067dc:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	4a14      	ldr	r2, [pc, #80]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067e8:	e005      	b.n	80067f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067ea:	4b12      	ldr	r3, [pc, #72]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ee:	4a11      	ldr	r2, [pc, #68]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 80067fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006802:	f7fa fe7d 	bl	8001500 <HAL_GetTick>
 8006806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006808:	e008      	b.n	800681c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800680a:	f7fa fe79 	bl	8001500 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e006      	b.n	800682a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800681c:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <RCCEx_PLL2_Config+0x15c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0f0      	beq.n	800680a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	ffff0007 	.word	0xffff0007

0800683c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800684a:	4b53      	ldr	r3, [pc, #332]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d101      	bne.n	800685a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e099      	b.n	800698e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800685a:	4b4f      	ldr	r3, [pc, #316]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4e      	ldr	r2, [pc, #312]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006866:	f7fa fe4b 	bl	8001500 <HAL_GetTick>
 800686a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800686c:	e008      	b.n	8006880 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800686e:	f7fa fe47 	bl	8001500 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e086      	b.n	800698e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006880:	4b45      	ldr	r3, [pc, #276]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f0      	bne.n	800686e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800688c:	4b42      	ldr	r3, [pc, #264]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	051b      	lsls	r3, r3, #20
 800689a:	493f      	ldr	r1, [pc, #252]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800689c:	4313      	orrs	r3, r2
 800689e:	628b      	str	r3, [r1, #40]	@ 0x28
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	025b      	lsls	r3, r3, #9
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	061b      	lsls	r3, r3, #24
 80068cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068d0:	4931      	ldr	r1, [pc, #196]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068d6:	4b30      	ldr	r3, [pc, #192]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	492d      	ldr	r1, [pc, #180]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	4928      	ldr	r1, [pc, #160]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068fa:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4a26      	ldr	r2, [pc, #152]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006904:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006906:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800690a:	4b24      	ldr	r3, [pc, #144]	@ (800699c <RCCEx_PLL3_Config+0x160>)
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	69d2      	ldr	r2, [r2, #28]
 8006912:	00d2      	lsls	r2, r2, #3
 8006914:	4920      	ldr	r1, [pc, #128]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800691a:	4b1f      	ldr	r3, [pc, #124]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006924:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800692c:	4b1a      	ldr	r3, [pc, #104]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	4a19      	ldr	r2, [pc, #100]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006932:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006936:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006938:	e00f      	b.n	800695a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d106      	bne.n	800694e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006940:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	4a14      	ldr	r2, [pc, #80]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006946:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800694a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800694c:	e005      	b.n	800695a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800694e:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006958:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800695a:	4b0f      	ldr	r3, [pc, #60]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a0e      	ldr	r2, [pc, #56]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006966:	f7fa fdcb 	bl	8001500 <HAL_GetTick>
 800696a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800696c:	e008      	b.n	8006980 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800696e:	f7fa fdc7 	bl	8001500 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e006      	b.n	800698e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <RCCEx_PLL3_Config+0x15c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
 800699c:	ffff0007 	.word	0xffff0007

080069a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e042      	b.n	8006a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fa fafd 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2224      	movs	r2, #36	@ 0x24
 80069ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fa44 	bl	8007e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fcd9 	bl	80073a8 <UART_SetConfig>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e01b      	b.n	8006a38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 fac3 	bl	8007fbc <UART_CheckIdleState>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	@ 0x28
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d17b      	bne.n	8006b52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_UART_Transmit+0x26>
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e074      	b.n	8006b54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2221      	movs	r2, #33	@ 0x21
 8006a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a7a:	f7fa fd41 	bl	8001500 <HAL_GetTick>
 8006a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a98:	d108      	bne.n	8006aac <HAL_UART_Transmit+0x6c>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e003      	b.n	8006ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ab4:	e030      	b.n	8006b18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	2180      	movs	r1, #128	@ 0x80
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f001 fb25 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e03d      	b.n	8006b54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	3302      	adds	r3, #2
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e007      	b.n	8006b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	781a      	ldrb	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	3301      	adds	r3, #1
 8006b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1c8      	bne.n	8006ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2140      	movs	r1, #64	@ 0x40
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f001 faee 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d005      	beq.n	8006b46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e006      	b.n	8006b54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e000      	b.n	8006b54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b52:	2302      	movs	r3, #2
  }
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	@ 0x28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d137      	bne.n	8006be4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_UART_Receive_IT+0x24>
 8006b7a:	88fb      	ldrh	r3, [r7, #6]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e030      	b.n	8006be6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <HAL_UART_Receive_IT+0x94>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d01f      	beq.n	8006bd4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d018      	beq.n	8006bd4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	623b      	str	r3, [r7, #32]
 8006bc2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e6      	bne.n	8006ba2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f001 fb06 	bl	80081ec <UART_Start_Receive_IT>
 8006be0:	4603      	mov	r3, r0
 8006be2:	e000      	b.n	8006be6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006be4:	2302      	movs	r3, #2
  }
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3728      	adds	r7, #40	@ 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	58000c00 	.word	0x58000c00

08006bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b0ba      	sub	sp, #232	@ 0xe8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c22:	4013      	ands	r3, r2
 8006c24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11b      	bne.n	8006c68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d105      	bne.n	8006c54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8377 	beq.w	800734c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
      }
      return;
 8006c66:	e371      	b.n	800734c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8123 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c76:	4b8d      	ldr	r3, [pc, #564]	@ (8006eac <HAL_UART_IRQHandler+0x2b8>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c82:	4b8b      	ldr	r3, [pc, #556]	@ (8006eb0 <HAL_UART_IRQHandler+0x2bc>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8116 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_UART_IRQHandler+0xc8>
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb2:	f043 0201 	orr.w	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d011      	beq.n	8006cec <HAL_UART_IRQHandler+0xf8>
 8006cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce2:	f043 0204 	orr.w	r2, r3, #4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d011      	beq.n	8006d1c <HAL_UART_IRQHandler+0x128>
 8006cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d12:	f043 0202 	orr.w	r2, r3, #2
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d017      	beq.n	8006d58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d105      	bne.n	8006d40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d38:	4b5c      	ldr	r3, [pc, #368]	@ (8006eac <HAL_UART_IRQHandler+0x2b8>)
 8006d3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2208      	movs	r2, #8
 8006d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4e:	f043 0208 	orr.w	r2, r3, #8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d012      	beq.n	8006d8a <HAL_UART_IRQHandler+0x196>
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00c      	beq.n	8006d8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d80:	f043 0220 	orr.w	r2, r3, #32
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 82dd 	beq.w	8007350 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d013      	beq.n	8006dca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dde:	2b40      	cmp	r3, #64	@ 0x40
 8006de0:	d005      	beq.n	8006dee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006de6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d054      	beq.n	8006e98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fb1e 	bl	8008430 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfe:	2b40      	cmp	r3, #64	@ 0x40
 8006e00:	d146      	bne.n	8006e90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1d9      	bne.n	8006e02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d017      	beq.n	8006e88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e5e:	4a15      	ldr	r2, [pc, #84]	@ (8006eb4 <HAL_UART_IRQHandler+0x2c0>)
 8006e60:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fa ffc7 	bl	8001dfc <HAL_DMA_Abort_IT>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d019      	beq.n	8006ea8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006e82:	4610      	mov	r0, r2
 8006e84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e86:	e00f      	b.n	8006ea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa77 	bl	800737c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8e:	e00b      	b.n	8006ea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fa73 	bl	800737c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e96:	e007      	b.n	8006ea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa6f 	bl	800737c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006ea6:	e253      	b.n	8007350 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	bf00      	nop
    return;
 8006eaa:	e251      	b.n	8007350 <HAL_UART_IRQHandler+0x75c>
 8006eac:	10000001 	.word	0x10000001
 8006eb0:	04000120 	.word	0x04000120
 8006eb4:	080084fd 	.word	0x080084fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f040 81e7 	bne.w	8007290 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 81e0 	beq.w	8007290 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 81d9 	beq.w	8007290 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	f040 8151 	bne.w	8007198 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a96      	ldr	r2, [pc, #600]	@ (8007158 <HAL_UART_IRQHandler+0x564>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d068      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a93      	ldr	r2, [pc, #588]	@ (800715c <HAL_UART_IRQHandler+0x568>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d061      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a91      	ldr	r2, [pc, #580]	@ (8007160 <HAL_UART_IRQHandler+0x56c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d05a      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a8e      	ldr	r2, [pc, #568]	@ (8007164 <HAL_UART_IRQHandler+0x570>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d053      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a8c      	ldr	r2, [pc, #560]	@ (8007168 <HAL_UART_IRQHandler+0x574>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04c      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a89      	ldr	r2, [pc, #548]	@ (800716c <HAL_UART_IRQHandler+0x578>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d045      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a87      	ldr	r2, [pc, #540]	@ (8007170 <HAL_UART_IRQHandler+0x57c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d03e      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a84      	ldr	r2, [pc, #528]	@ (8007174 <HAL_UART_IRQHandler+0x580>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d037      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a82      	ldr	r2, [pc, #520]	@ (8007178 <HAL_UART_IRQHandler+0x584>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d030      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a7f      	ldr	r2, [pc, #508]	@ (800717c <HAL_UART_IRQHandler+0x588>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d029      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8007180 <HAL_UART_IRQHandler+0x58c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a7a      	ldr	r2, [pc, #488]	@ (8007184 <HAL_UART_IRQHandler+0x590>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01b      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a78      	ldr	r2, [pc, #480]	@ (8007188 <HAL_UART_IRQHandler+0x594>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d014      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a75      	ldr	r2, [pc, #468]	@ (800718c <HAL_UART_IRQHandler+0x598>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00d      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a73      	ldr	r2, [pc, #460]	@ (8007190 <HAL_UART_IRQHandler+0x59c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d006      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x3e2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a70      	ldr	r2, [pc, #448]	@ (8007194 <HAL_UART_IRQHandler+0x5a0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d106      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x3f0>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	e005      	b.n	8006ff0 <HAL_UART_IRQHandler+0x3fc>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 81ab 	beq.w	8007354 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007004:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007008:	429a      	cmp	r2, r3
 800700a:	f080 81a3 	bcs.w	8007354 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007024:	f000 8087 	beq.w	8007136 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800703c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007056:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800705e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800706a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1da      	bne.n	8007028 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007096:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800709a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800709e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e1      	bne.n	8007072 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e3      	bne.n	80070ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007118:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800711c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e4      	bne.n	80070f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007130:	4618      	mov	r0, r3
 8007132:	f7fa fb45 	bl	80017c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007148:	b29b      	uxth	r3, r3
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	b29b      	uxth	r3, r3
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f91d 	bl	8007390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007156:	e0fd      	b.n	8007354 <HAL_UART_IRQHandler+0x760>
 8007158:	40020010 	.word	0x40020010
 800715c:	40020028 	.word	0x40020028
 8007160:	40020040 	.word	0x40020040
 8007164:	40020058 	.word	0x40020058
 8007168:	40020070 	.word	0x40020070
 800716c:	40020088 	.word	0x40020088
 8007170:	400200a0 	.word	0x400200a0
 8007174:	400200b8 	.word	0x400200b8
 8007178:	40020410 	.word	0x40020410
 800717c:	40020428 	.word	0x40020428
 8007180:	40020440 	.word	0x40020440
 8007184:	40020458 	.word	0x40020458
 8007188:	40020470 	.word	0x40020470
 800718c:	40020488 	.word	0x40020488
 8007190:	400204a0 	.word	0x400204a0
 8007194:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80cf 	beq.w	8007358 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80071ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80ca 	beq.w	8007358 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e4      	bne.n	80071c4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	623b      	str	r3, [r7, #32]
   return(result);
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	4b55      	ldr	r3, [pc, #340]	@ (8007364 <HAL_UART_IRQHandler+0x770>)
 800720e:	4013      	ands	r3, r2
 8007210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800721e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e3      	bne.n	80071fa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60fb      	str	r3, [r7, #12]
   return(result);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	69b9      	ldr	r1, [r7, #24]
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	617b      	str	r3, [r7, #20]
   return(result);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e4      	bne.n	8007246 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f881 	bl	8007390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800728e:	e063      	b.n	8007358 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00e      	beq.n	80072ba <HAL_UART_IRQHandler+0x6c6>
 800729c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80072b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fe80 	bl	8008fb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072b8:	e051      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d014      	beq.n	80072f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d03a      	beq.n	800735c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
    }
    return;
 80072ee:	e035      	b.n	800735c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d009      	beq.n	8007310 <HAL_UART_IRQHandler+0x71c>
 80072fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f90d 	bl	8008528 <UART_EndTransmit_IT>
    return;
 800730e:	e026      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <HAL_UART_IRQHandler+0x73c>
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007320:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 fe59 	bl	8008fe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800732e:	e016      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d010      	beq.n	800735e <HAL_UART_IRQHandler+0x76a>
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007340:	2b00      	cmp	r3, #0
 8007342:	da0c      	bge.n	800735e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fe41 	bl	8008fcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800734a:	e008      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
      return;
 800734c:	bf00      	nop
 800734e:	e006      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
    return;
 8007350:	bf00      	nop
 8007352:	e004      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
      return;
 8007354:	bf00      	nop
 8007356:	e002      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
      return;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <HAL_UART_IRQHandler+0x76a>
    return;
 800735c:	bf00      	nop
  }
}
 800735e:	37e8      	adds	r7, #232	@ 0xe8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	effffffe 	.word	0xeffffffe

08007368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073ac:	b092      	sub	sp, #72	@ 0x48
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4bbe      	ldr	r3, [pc, #760]	@ (80076d0 <UART_SetConfig+0x328>)
 80073d8:	4013      	ands	r3, r2
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4ab3      	ldr	r2, [pc, #716]	@ (80076d4 <UART_SetConfig+0x32c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007410:	4313      	orrs	r3, r2
 8007412:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	4baf      	ldr	r3, [pc, #700]	@ (80076d8 <UART_SetConfig+0x330>)
 800741c:	4013      	ands	r3, r2
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007424:	430b      	orrs	r3, r1
 8007426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	f023 010f 	bic.w	r1, r3, #15
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4aa6      	ldr	r2, [pc, #664]	@ (80076dc <UART_SetConfig+0x334>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d177      	bne.n	8007538 <UART_SetConfig+0x190>
 8007448:	4ba5      	ldr	r3, [pc, #660]	@ (80076e0 <UART_SetConfig+0x338>)
 800744a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007450:	2b28      	cmp	r3, #40	@ 0x28
 8007452:	d86d      	bhi.n	8007530 <UART_SetConfig+0x188>
 8007454:	a201      	add	r2, pc, #4	@ (adr r2, 800745c <UART_SetConfig+0xb4>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	08007501 	.word	0x08007501
 8007460:	08007531 	.word	0x08007531
 8007464:	08007531 	.word	0x08007531
 8007468:	08007531 	.word	0x08007531
 800746c:	08007531 	.word	0x08007531
 8007470:	08007531 	.word	0x08007531
 8007474:	08007531 	.word	0x08007531
 8007478:	08007531 	.word	0x08007531
 800747c:	08007509 	.word	0x08007509
 8007480:	08007531 	.word	0x08007531
 8007484:	08007531 	.word	0x08007531
 8007488:	08007531 	.word	0x08007531
 800748c:	08007531 	.word	0x08007531
 8007490:	08007531 	.word	0x08007531
 8007494:	08007531 	.word	0x08007531
 8007498:	08007531 	.word	0x08007531
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007531 	.word	0x08007531
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007531 	.word	0x08007531
 80074ac:	08007531 	.word	0x08007531
 80074b0:	08007531 	.word	0x08007531
 80074b4:	08007531 	.word	0x08007531
 80074b8:	08007531 	.word	0x08007531
 80074bc:	08007519 	.word	0x08007519
 80074c0:	08007531 	.word	0x08007531
 80074c4:	08007531 	.word	0x08007531
 80074c8:	08007531 	.word	0x08007531
 80074cc:	08007531 	.word	0x08007531
 80074d0:	08007531 	.word	0x08007531
 80074d4:	08007531 	.word	0x08007531
 80074d8:	08007531 	.word	0x08007531
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007531 	.word	0x08007531
 80074e4:	08007531 	.word	0x08007531
 80074e8:	08007531 	.word	0x08007531
 80074ec:	08007531 	.word	0x08007531
 80074f0:	08007531 	.word	0x08007531
 80074f4:	08007531 	.word	0x08007531
 80074f8:	08007531 	.word	0x08007531
 80074fc:	08007529 	.word	0x08007529
 8007500:	2301      	movs	r3, #1
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e222      	b.n	800794e <UART_SetConfig+0x5a6>
 8007508:	2304      	movs	r3, #4
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750e:	e21e      	b.n	800794e <UART_SetConfig+0x5a6>
 8007510:	2308      	movs	r3, #8
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e21a      	b.n	800794e <UART_SetConfig+0x5a6>
 8007518:	2310      	movs	r3, #16
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e216      	b.n	800794e <UART_SetConfig+0x5a6>
 8007520:	2320      	movs	r3, #32
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007526:	e212      	b.n	800794e <UART_SetConfig+0x5a6>
 8007528:	2340      	movs	r3, #64	@ 0x40
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752e:	e20e      	b.n	800794e <UART_SetConfig+0x5a6>
 8007530:	2380      	movs	r3, #128	@ 0x80
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007536:	e20a      	b.n	800794e <UART_SetConfig+0x5a6>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a69      	ldr	r2, [pc, #420]	@ (80076e4 <UART_SetConfig+0x33c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d130      	bne.n	80075a4 <UART_SetConfig+0x1fc>
 8007542:	4b67      	ldr	r3, [pc, #412]	@ (80076e0 <UART_SetConfig+0x338>)
 8007544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b05      	cmp	r3, #5
 800754c:	d826      	bhi.n	800759c <UART_SetConfig+0x1f4>
 800754e:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <UART_SetConfig+0x1ac>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	0800756d 	.word	0x0800756d
 8007558:	08007575 	.word	0x08007575
 800755c:	0800757d 	.word	0x0800757d
 8007560:	08007585 	.word	0x08007585
 8007564:	0800758d 	.word	0x0800758d
 8007568:	08007595 	.word	0x08007595
 800756c:	2300      	movs	r3, #0
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e1ec      	b.n	800794e <UART_SetConfig+0x5a6>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e1e8      	b.n	800794e <UART_SetConfig+0x5a6>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e1e4      	b.n	800794e <UART_SetConfig+0x5a6>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e1e0      	b.n	800794e <UART_SetConfig+0x5a6>
 800758c:	2320      	movs	r3, #32
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e1dc      	b.n	800794e <UART_SetConfig+0x5a6>
 8007594:	2340      	movs	r3, #64	@ 0x40
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e1d8      	b.n	800794e <UART_SetConfig+0x5a6>
 800759c:	2380      	movs	r3, #128	@ 0x80
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e1d4      	b.n	800794e <UART_SetConfig+0x5a6>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a4f      	ldr	r2, [pc, #316]	@ (80076e8 <UART_SetConfig+0x340>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d130      	bne.n	8007610 <UART_SetConfig+0x268>
 80075ae:	4b4c      	ldr	r3, [pc, #304]	@ (80076e0 <UART_SetConfig+0x338>)
 80075b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d826      	bhi.n	8007608 <UART_SetConfig+0x260>
 80075ba:	a201      	add	r2, pc, #4	@ (adr r2, 80075c0 <UART_SetConfig+0x218>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075d9 	.word	0x080075d9
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075e9 	.word	0x080075e9
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	080075f9 	.word	0x080075f9
 80075d4:	08007601 	.word	0x08007601
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e1b6      	b.n	800794e <UART_SetConfig+0x5a6>
 80075e0:	2304      	movs	r3, #4
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e1b2      	b.n	800794e <UART_SetConfig+0x5a6>
 80075e8:	2308      	movs	r3, #8
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ee:	e1ae      	b.n	800794e <UART_SetConfig+0x5a6>
 80075f0:	2310      	movs	r3, #16
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f6:	e1aa      	b.n	800794e <UART_SetConfig+0x5a6>
 80075f8:	2320      	movs	r3, #32
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fe:	e1a6      	b.n	800794e <UART_SetConfig+0x5a6>
 8007600:	2340      	movs	r3, #64	@ 0x40
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e1a2      	b.n	800794e <UART_SetConfig+0x5a6>
 8007608:	2380      	movs	r3, #128	@ 0x80
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e19e      	b.n	800794e <UART_SetConfig+0x5a6>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a35      	ldr	r2, [pc, #212]	@ (80076ec <UART_SetConfig+0x344>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d130      	bne.n	800767c <UART_SetConfig+0x2d4>
 800761a:	4b31      	ldr	r3, [pc, #196]	@ (80076e0 <UART_SetConfig+0x338>)
 800761c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	2b05      	cmp	r3, #5
 8007624:	d826      	bhi.n	8007674 <UART_SetConfig+0x2cc>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <UART_SetConfig+0x284>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	08007645 	.word	0x08007645
 8007630:	0800764d 	.word	0x0800764d
 8007634:	08007655 	.word	0x08007655
 8007638:	0800765d 	.word	0x0800765d
 800763c:	08007665 	.word	0x08007665
 8007640:	0800766d 	.word	0x0800766d
 8007644:	2300      	movs	r3, #0
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e180      	b.n	800794e <UART_SetConfig+0x5a6>
 800764c:	2304      	movs	r3, #4
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e17c      	b.n	800794e <UART_SetConfig+0x5a6>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e178      	b.n	800794e <UART_SetConfig+0x5a6>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e174      	b.n	800794e <UART_SetConfig+0x5a6>
 8007664:	2320      	movs	r3, #32
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e170      	b.n	800794e <UART_SetConfig+0x5a6>
 800766c:	2340      	movs	r3, #64	@ 0x40
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e16c      	b.n	800794e <UART_SetConfig+0x5a6>
 8007674:	2380      	movs	r3, #128	@ 0x80
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e168      	b.n	800794e <UART_SetConfig+0x5a6>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1b      	ldr	r2, [pc, #108]	@ (80076f0 <UART_SetConfig+0x348>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d142      	bne.n	800770c <UART_SetConfig+0x364>
 8007686:	4b16      	ldr	r3, [pc, #88]	@ (80076e0 <UART_SetConfig+0x338>)
 8007688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	2b05      	cmp	r3, #5
 8007690:	d838      	bhi.n	8007704 <UART_SetConfig+0x35c>
 8007692:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <UART_SetConfig+0x2f0>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076b1 	.word	0x080076b1
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076c1 	.word	0x080076c1
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076f5 	.word	0x080076f5
 80076ac:	080076fd 	.word	0x080076fd
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e14a      	b.n	800794e <UART_SetConfig+0x5a6>
 80076b8:	2304      	movs	r3, #4
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e146      	b.n	800794e <UART_SetConfig+0x5a6>
 80076c0:	2308      	movs	r3, #8
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e142      	b.n	800794e <UART_SetConfig+0x5a6>
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e13e      	b.n	800794e <UART_SetConfig+0x5a6>
 80076d0:	cfff69f3 	.word	0xcfff69f3
 80076d4:	58000c00 	.word	0x58000c00
 80076d8:	11fff4ff 	.word	0x11fff4ff
 80076dc:	40011000 	.word	0x40011000
 80076e0:	58024400 	.word	0x58024400
 80076e4:	40004400 	.word	0x40004400
 80076e8:	40004800 	.word	0x40004800
 80076ec:	40004c00 	.word	0x40004c00
 80076f0:	40005000 	.word	0x40005000
 80076f4:	2320      	movs	r3, #32
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e128      	b.n	800794e <UART_SetConfig+0x5a6>
 80076fc:	2340      	movs	r3, #64	@ 0x40
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e124      	b.n	800794e <UART_SetConfig+0x5a6>
 8007704:	2380      	movs	r3, #128	@ 0x80
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e120      	b.n	800794e <UART_SetConfig+0x5a6>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4acb      	ldr	r2, [pc, #812]	@ (8007a40 <UART_SetConfig+0x698>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d176      	bne.n	8007804 <UART_SetConfig+0x45c>
 8007716:	4bcb      	ldr	r3, [pc, #812]	@ (8007a44 <UART_SetConfig+0x69c>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800771e:	2b28      	cmp	r3, #40	@ 0x28
 8007720:	d86c      	bhi.n	80077fc <UART_SetConfig+0x454>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <UART_SetConfig+0x380>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	080077cd 	.word	0x080077cd
 800772c:	080077fd 	.word	0x080077fd
 8007730:	080077fd 	.word	0x080077fd
 8007734:	080077fd 	.word	0x080077fd
 8007738:	080077fd 	.word	0x080077fd
 800773c:	080077fd 	.word	0x080077fd
 8007740:	080077fd 	.word	0x080077fd
 8007744:	080077fd 	.word	0x080077fd
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077fd 	.word	0x080077fd
 8007750:	080077fd 	.word	0x080077fd
 8007754:	080077fd 	.word	0x080077fd
 8007758:	080077fd 	.word	0x080077fd
 800775c:	080077fd 	.word	0x080077fd
 8007760:	080077fd 	.word	0x080077fd
 8007764:	080077fd 	.word	0x080077fd
 8007768:	080077dd 	.word	0x080077dd
 800776c:	080077fd 	.word	0x080077fd
 8007770:	080077fd 	.word	0x080077fd
 8007774:	080077fd 	.word	0x080077fd
 8007778:	080077fd 	.word	0x080077fd
 800777c:	080077fd 	.word	0x080077fd
 8007780:	080077fd 	.word	0x080077fd
 8007784:	080077fd 	.word	0x080077fd
 8007788:	080077e5 	.word	0x080077e5
 800778c:	080077fd 	.word	0x080077fd
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080077fd 	.word	0x080077fd
 8007798:	080077fd 	.word	0x080077fd
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	080077fd 	.word	0x080077fd
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077ed 	.word	0x080077ed
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	080077fd 	.word	0x080077fd
 80077c4:	080077fd 	.word	0x080077fd
 80077c8:	080077f5 	.word	0x080077f5
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e0bc      	b.n	800794e <UART_SetConfig+0x5a6>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e0b8      	b.n	800794e <UART_SetConfig+0x5a6>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e2:	e0b4      	b.n	800794e <UART_SetConfig+0x5a6>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e0b0      	b.n	800794e <UART_SetConfig+0x5a6>
 80077ec:	2320      	movs	r3, #32
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e0ac      	b.n	800794e <UART_SetConfig+0x5a6>
 80077f4:	2340      	movs	r3, #64	@ 0x40
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e0a8      	b.n	800794e <UART_SetConfig+0x5a6>
 80077fc:	2380      	movs	r3, #128	@ 0x80
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e0a4      	b.n	800794e <UART_SetConfig+0x5a6>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a8f      	ldr	r2, [pc, #572]	@ (8007a48 <UART_SetConfig+0x6a0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d130      	bne.n	8007870 <UART_SetConfig+0x4c8>
 800780e:	4b8d      	ldr	r3, [pc, #564]	@ (8007a44 <UART_SetConfig+0x69c>)
 8007810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b05      	cmp	r3, #5
 8007818:	d826      	bhi.n	8007868 <UART_SetConfig+0x4c0>
 800781a:	a201      	add	r2, pc, #4	@ (adr r2, 8007820 <UART_SetConfig+0x478>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007839 	.word	0x08007839
 8007824:	08007841 	.word	0x08007841
 8007828:	08007849 	.word	0x08007849
 800782c:	08007851 	.word	0x08007851
 8007830:	08007859 	.word	0x08007859
 8007834:	08007861 	.word	0x08007861
 8007838:	2300      	movs	r3, #0
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e086      	b.n	800794e <UART_SetConfig+0x5a6>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e082      	b.n	800794e <UART_SetConfig+0x5a6>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e07e      	b.n	800794e <UART_SetConfig+0x5a6>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e07a      	b.n	800794e <UART_SetConfig+0x5a6>
 8007858:	2320      	movs	r3, #32
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e076      	b.n	800794e <UART_SetConfig+0x5a6>
 8007860:	2340      	movs	r3, #64	@ 0x40
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e072      	b.n	800794e <UART_SetConfig+0x5a6>
 8007868:	2380      	movs	r3, #128	@ 0x80
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e06e      	b.n	800794e <UART_SetConfig+0x5a6>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a75      	ldr	r2, [pc, #468]	@ (8007a4c <UART_SetConfig+0x6a4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d130      	bne.n	80078dc <UART_SetConfig+0x534>
 800787a:	4b72      	ldr	r3, [pc, #456]	@ (8007a44 <UART_SetConfig+0x69c>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b05      	cmp	r3, #5
 8007884:	d826      	bhi.n	80078d4 <UART_SetConfig+0x52c>
 8007886:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <UART_SetConfig+0x4e4>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078b5 	.word	0x080078b5
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e050      	b.n	800794e <UART_SetConfig+0x5a6>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e04c      	b.n	800794e <UART_SetConfig+0x5a6>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e048      	b.n	800794e <UART_SetConfig+0x5a6>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e044      	b.n	800794e <UART_SetConfig+0x5a6>
 80078c4:	2320      	movs	r3, #32
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e040      	b.n	800794e <UART_SetConfig+0x5a6>
 80078cc:	2340      	movs	r3, #64	@ 0x40
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e03c      	b.n	800794e <UART_SetConfig+0x5a6>
 80078d4:	2380      	movs	r3, #128	@ 0x80
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e038      	b.n	800794e <UART_SetConfig+0x5a6>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a5b      	ldr	r2, [pc, #364]	@ (8007a50 <UART_SetConfig+0x6a8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d130      	bne.n	8007948 <UART_SetConfig+0x5a0>
 80078e6:	4b57      	ldr	r3, [pc, #348]	@ (8007a44 <UART_SetConfig+0x69c>)
 80078e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	d826      	bhi.n	8007940 <UART_SetConfig+0x598>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <UART_SetConfig+0x550>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007921 	.word	0x08007921
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	08007939 	.word	0x08007939
 8007910:	2302      	movs	r3, #2
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e01a      	b.n	800794e <UART_SetConfig+0x5a6>
 8007918:	2304      	movs	r3, #4
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e016      	b.n	800794e <UART_SetConfig+0x5a6>
 8007920:	2308      	movs	r3, #8
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e012      	b.n	800794e <UART_SetConfig+0x5a6>
 8007928:	2310      	movs	r3, #16
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e00e      	b.n	800794e <UART_SetConfig+0x5a6>
 8007930:	2320      	movs	r3, #32
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e00a      	b.n	800794e <UART_SetConfig+0x5a6>
 8007938:	2340      	movs	r3, #64	@ 0x40
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e006      	b.n	800794e <UART_SetConfig+0x5a6>
 8007940:	2380      	movs	r3, #128	@ 0x80
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e002      	b.n	800794e <UART_SetConfig+0x5a6>
 8007948:	2380      	movs	r3, #128	@ 0x80
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a3f      	ldr	r2, [pc, #252]	@ (8007a50 <UART_SetConfig+0x6a8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	f040 80f8 	bne.w	8007b4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800795a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800795e:	2b20      	cmp	r3, #32
 8007960:	dc46      	bgt.n	80079f0 <UART_SetConfig+0x648>
 8007962:	2b02      	cmp	r3, #2
 8007964:	f2c0 8082 	blt.w	8007a6c <UART_SetConfig+0x6c4>
 8007968:	3b02      	subs	r3, #2
 800796a:	2b1e      	cmp	r3, #30
 800796c:	d87e      	bhi.n	8007a6c <UART_SetConfig+0x6c4>
 800796e:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <UART_SetConfig+0x5cc>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	080079f7 	.word	0x080079f7
 8007978:	08007a6d 	.word	0x08007a6d
 800797c:	080079ff 	.word	0x080079ff
 8007980:	08007a6d 	.word	0x08007a6d
 8007984:	08007a6d 	.word	0x08007a6d
 8007988:	08007a6d 	.word	0x08007a6d
 800798c:	08007a0f 	.word	0x08007a0f
 8007990:	08007a6d 	.word	0x08007a6d
 8007994:	08007a6d 	.word	0x08007a6d
 8007998:	08007a6d 	.word	0x08007a6d
 800799c:	08007a6d 	.word	0x08007a6d
 80079a0:	08007a6d 	.word	0x08007a6d
 80079a4:	08007a6d 	.word	0x08007a6d
 80079a8:	08007a6d 	.word	0x08007a6d
 80079ac:	08007a1f 	.word	0x08007a1f
 80079b0:	08007a6d 	.word	0x08007a6d
 80079b4:	08007a6d 	.word	0x08007a6d
 80079b8:	08007a6d 	.word	0x08007a6d
 80079bc:	08007a6d 	.word	0x08007a6d
 80079c0:	08007a6d 	.word	0x08007a6d
 80079c4:	08007a6d 	.word	0x08007a6d
 80079c8:	08007a6d 	.word	0x08007a6d
 80079cc:	08007a6d 	.word	0x08007a6d
 80079d0:	08007a6d 	.word	0x08007a6d
 80079d4:	08007a6d 	.word	0x08007a6d
 80079d8:	08007a6d 	.word	0x08007a6d
 80079dc:	08007a6d 	.word	0x08007a6d
 80079e0:	08007a6d 	.word	0x08007a6d
 80079e4:	08007a6d 	.word	0x08007a6d
 80079e8:	08007a6d 	.word	0x08007a6d
 80079ec:	08007a5f 	.word	0x08007a5f
 80079f0:	2b40      	cmp	r3, #64	@ 0x40
 80079f2:	d037      	beq.n	8007a64 <UART_SetConfig+0x6bc>
 80079f4:	e03a      	b.n	8007a6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079f6:	f7fe fbb1 	bl	800615c <HAL_RCCEx_GetD3PCLK1Freq>
 80079fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079fc:	e03c      	b.n	8007a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fbc0 	bl	8006188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a0c:	e034      	b.n	8007a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0e:	f107 0318 	add.w	r3, r7, #24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fd0c 	bl	8006430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1c:	e02c      	b.n	8007a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <UART_SetConfig+0x69c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d016      	beq.n	8007a58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a2a:	4b06      	ldr	r3, [pc, #24]	@ (8007a44 <UART_SetConfig+0x69c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	08db      	lsrs	r3, r3, #3
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	4a07      	ldr	r2, [pc, #28]	@ (8007a54 <UART_SetConfig+0x6ac>)
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a3c:	e01c      	b.n	8007a78 <UART_SetConfig+0x6d0>
 8007a3e:	bf00      	nop
 8007a40:	40011400 	.word	0x40011400
 8007a44:	58024400 	.word	0x58024400
 8007a48:	40007800 	.word	0x40007800
 8007a4c:	40007c00 	.word	0x40007c00
 8007a50:	58000c00 	.word	0x58000c00
 8007a54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007a58:	4b9d      	ldr	r3, [pc, #628]	@ (8007cd0 <UART_SetConfig+0x928>)
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a5c:	e00c      	b.n	8007a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8007cd4 <UART_SetConfig+0x92c>)
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a62:	e009      	b.n	8007a78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6a:	e005      	b.n	8007a78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 81de 	beq.w	8007e3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	4a94      	ldr	r2, [pc, #592]	@ (8007cd8 <UART_SetConfig+0x930>)
 8007a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a92:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d305      	bcc.n	8007ab0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d903      	bls.n	8007ab8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ab6:	e1c1      	b.n	8007e3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aba:	2200      	movs	r2, #0
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	60fa      	str	r2, [r7, #12]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac4:	4a84      	ldr	r2, [pc, #528]	@ (8007cd8 <UART_SetConfig+0x930>)
 8007ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2200      	movs	r2, #0
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ada:	f7f8 fc59 	bl	8000390 <__aeabi_uldivmod>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	020b      	lsls	r3, r1, #8
 8007af0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007af4:	0202      	lsls	r2, r0, #8
 8007af6:	6979      	ldr	r1, [r7, #20]
 8007af8:	6849      	ldr	r1, [r1, #4]
 8007afa:	0849      	lsrs	r1, r1, #1
 8007afc:	2000      	movs	r0, #0
 8007afe:	460c      	mov	r4, r1
 8007b00:	4605      	mov	r5, r0
 8007b02:	eb12 0804 	adds.w	r8, r2, r4
 8007b06:	eb43 0905 	adc.w	r9, r3, r5
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	469a      	mov	sl, r3
 8007b12:	4693      	mov	fp, r2
 8007b14:	4652      	mov	r2, sl
 8007b16:	465b      	mov	r3, fp
 8007b18:	4640      	mov	r0, r8
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	f7f8 fc38 	bl	8000390 <__aeabi_uldivmod>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4613      	mov	r3, r2
 8007b26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b2e:	d308      	bcc.n	8007b42 <UART_SetConfig+0x79a>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b36:	d204      	bcs.n	8007b42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b3e:	60da      	str	r2, [r3, #12]
 8007b40:	e17c      	b.n	8007e3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b48:	e178      	b.n	8007e3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b52:	f040 80c5 	bne.w	8007ce0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007b56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	dc48      	bgt.n	8007bf0 <UART_SetConfig+0x848>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db7b      	blt.n	8007c5a <UART_SetConfig+0x8b2>
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d879      	bhi.n	8007c5a <UART_SetConfig+0x8b2>
 8007b66:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <UART_SetConfig+0x7c4>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007bf7 	.word	0x08007bf7
 8007b70:	08007bff 	.word	0x08007bff
 8007b74:	08007c5b 	.word	0x08007c5b
 8007b78:	08007c5b 	.word	0x08007c5b
 8007b7c:	08007c07 	.word	0x08007c07
 8007b80:	08007c5b 	.word	0x08007c5b
 8007b84:	08007c5b 	.word	0x08007c5b
 8007b88:	08007c5b 	.word	0x08007c5b
 8007b8c:	08007c17 	.word	0x08007c17
 8007b90:	08007c5b 	.word	0x08007c5b
 8007b94:	08007c5b 	.word	0x08007c5b
 8007b98:	08007c5b 	.word	0x08007c5b
 8007b9c:	08007c5b 	.word	0x08007c5b
 8007ba0:	08007c5b 	.word	0x08007c5b
 8007ba4:	08007c5b 	.word	0x08007c5b
 8007ba8:	08007c5b 	.word	0x08007c5b
 8007bac:	08007c27 	.word	0x08007c27
 8007bb0:	08007c5b 	.word	0x08007c5b
 8007bb4:	08007c5b 	.word	0x08007c5b
 8007bb8:	08007c5b 	.word	0x08007c5b
 8007bbc:	08007c5b 	.word	0x08007c5b
 8007bc0:	08007c5b 	.word	0x08007c5b
 8007bc4:	08007c5b 	.word	0x08007c5b
 8007bc8:	08007c5b 	.word	0x08007c5b
 8007bcc:	08007c5b 	.word	0x08007c5b
 8007bd0:	08007c5b 	.word	0x08007c5b
 8007bd4:	08007c5b 	.word	0x08007c5b
 8007bd8:	08007c5b 	.word	0x08007c5b
 8007bdc:	08007c5b 	.word	0x08007c5b
 8007be0:	08007c5b 	.word	0x08007c5b
 8007be4:	08007c5b 	.word	0x08007c5b
 8007be8:	08007c5b 	.word	0x08007c5b
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	2b40      	cmp	r3, #64	@ 0x40
 8007bf2:	d02e      	beq.n	8007c52 <UART_SetConfig+0x8aa>
 8007bf4:	e031      	b.n	8007c5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf6:	f7fd f87b 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8007bfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bfc:	e033      	b.n	8007c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bfe:	f7fd f88d 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8007c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c04:	e02f      	b.n	8007c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fabc 	bl	8006188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c14:	e027      	b.n	8007c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c16:	f107 0318 	add.w	r3, r7, #24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fc08 	bl	8006430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c24:	e01f      	b.n	8007c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c26:	4b2d      	ldr	r3, [pc, #180]	@ (8007cdc <UART_SetConfig+0x934>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d009      	beq.n	8007c46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c32:	4b2a      	ldr	r3, [pc, #168]	@ (8007cdc <UART_SetConfig+0x934>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	08db      	lsrs	r3, r3, #3
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	4a24      	ldr	r2, [pc, #144]	@ (8007cd0 <UART_SetConfig+0x928>)
 8007c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c44:	e00f      	b.n	8007c66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c46:	4b22      	ldr	r3, [pc, #136]	@ (8007cd0 <UART_SetConfig+0x928>)
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4a:	e00c      	b.n	8007c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c4c:	4b21      	ldr	r3, [pc, #132]	@ (8007cd4 <UART_SetConfig+0x92c>)
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c50:	e009      	b.n	8007c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c58:	e005      	b.n	8007c66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80e7 	beq.w	8007e3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c72:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <UART_SetConfig+0x930>)
 8007c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c80:	005a      	lsls	r2, r3, #1
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	441a      	add	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d916      	bls.n	8007cc8 <UART_SetConfig+0x920>
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca0:	d212      	bcs.n	8007cc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f023 030f 	bic.w	r3, r3, #15
 8007caa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007cc4:	60da      	str	r2, [r3, #12]
 8007cc6:	e0b9      	b.n	8007e3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cce:	e0b5      	b.n	8007e3c <UART_SetConfig+0xa94>
 8007cd0:	03d09000 	.word	0x03d09000
 8007cd4:	003d0900 	.word	0x003d0900
 8007cd8:	0800a1c8 	.word	0x0800a1c8
 8007cdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ce0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	dc49      	bgt.n	8007d7c <UART_SetConfig+0x9d4>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db7c      	blt.n	8007de6 <UART_SetConfig+0xa3e>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d87a      	bhi.n	8007de6 <UART_SetConfig+0xa3e>
 8007cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <UART_SetConfig+0x950>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d83 	.word	0x08007d83
 8007cfc:	08007d8b 	.word	0x08007d8b
 8007d00:	08007de7 	.word	0x08007de7
 8007d04:	08007de7 	.word	0x08007de7
 8007d08:	08007d93 	.word	0x08007d93
 8007d0c:	08007de7 	.word	0x08007de7
 8007d10:	08007de7 	.word	0x08007de7
 8007d14:	08007de7 	.word	0x08007de7
 8007d18:	08007da3 	.word	0x08007da3
 8007d1c:	08007de7 	.word	0x08007de7
 8007d20:	08007de7 	.word	0x08007de7
 8007d24:	08007de7 	.word	0x08007de7
 8007d28:	08007de7 	.word	0x08007de7
 8007d2c:	08007de7 	.word	0x08007de7
 8007d30:	08007de7 	.word	0x08007de7
 8007d34:	08007de7 	.word	0x08007de7
 8007d38:	08007db3 	.word	0x08007db3
 8007d3c:	08007de7 	.word	0x08007de7
 8007d40:	08007de7 	.word	0x08007de7
 8007d44:	08007de7 	.word	0x08007de7
 8007d48:	08007de7 	.word	0x08007de7
 8007d4c:	08007de7 	.word	0x08007de7
 8007d50:	08007de7 	.word	0x08007de7
 8007d54:	08007de7 	.word	0x08007de7
 8007d58:	08007de7 	.word	0x08007de7
 8007d5c:	08007de7 	.word	0x08007de7
 8007d60:	08007de7 	.word	0x08007de7
 8007d64:	08007de7 	.word	0x08007de7
 8007d68:	08007de7 	.word	0x08007de7
 8007d6c:	08007de7 	.word	0x08007de7
 8007d70:	08007de7 	.word	0x08007de7
 8007d74:	08007de7 	.word	0x08007de7
 8007d78:	08007dd9 	.word	0x08007dd9
 8007d7c:	2b40      	cmp	r3, #64	@ 0x40
 8007d7e:	d02e      	beq.n	8007dde <UART_SetConfig+0xa36>
 8007d80:	e031      	b.n	8007de6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d82:	f7fc ffb5 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8007d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d88:	e033      	b.n	8007df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d8a:	f7fc ffc7 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8007d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d90:	e02f      	b.n	8007df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe f9f6 	bl	8006188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da0:	e027      	b.n	8007df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da2:	f107 0318 	add.w	r3, r7, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fb42 	bl	8006430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db0:	e01f      	b.n	8007df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007db2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e68 <UART_SetConfig+0xac0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8007e68 <UART_SetConfig+0xac0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	08db      	lsrs	r3, r3, #3
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	4a28      	ldr	r2, [pc, #160]	@ (8007e6c <UART_SetConfig+0xac4>)
 8007dca:	fa22 f303 	lsr.w	r3, r2, r3
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dd0:	e00f      	b.n	8007df2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007dd2:	4b26      	ldr	r3, [pc, #152]	@ (8007e6c <UART_SetConfig+0xac4>)
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd6:	e00c      	b.n	8007df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dd8:	4b25      	ldr	r3, [pc, #148]	@ (8007e70 <UART_SetConfig+0xac8>)
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ddc:	e009      	b.n	8007df2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de4:	e005      	b.n	8007df2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007df0:	bf00      	nop
    }

    if (pclk != 0U)
 8007df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d021      	beq.n	8007e3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e74 <UART_SetConfig+0xacc>)
 8007dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	441a      	add	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	2b0f      	cmp	r3, #15
 8007e20:	d909      	bls.n	8007e36 <UART_SetConfig+0xa8e>
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e28:	d205      	bcs.n	8007e36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60da      	str	r2, [r3, #12]
 8007e34:	e002      	b.n	8007e3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2200      	movs	r2, #0
 8007e56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e58:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3748      	adds	r7, #72	@ 0x48
 8007e60:	46bd      	mov	sp, r7
 8007e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e66:	bf00      	nop
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	03d09000 	.word	0x03d09000
 8007e70:	003d0900 	.word	0x003d0900
 8007e74:	0800a1c8 	.word	0x0800a1c8

08007e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01a      	beq.n	8007f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f76:	d10a      	bne.n	8007f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	605a      	str	r2, [r3, #4]
  }
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b098      	sub	sp, #96	@ 0x60
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fcc:	f7f9 fa98 	bl	8001500 <HAL_GetTick>
 8007fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d12f      	bne.n	8008040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f88e 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d022      	beq.n	8008040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800800e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008018:	647b      	str	r3, [r7, #68]	@ 0x44
 800801a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800801e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e063      	b.n	8008108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b04      	cmp	r3, #4
 800804c:	d149      	bne.n	80080e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008056:	2200      	movs	r2, #0
 8008058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f857 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d03c      	beq.n	80080e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	623b      	str	r3, [r7, #32]
   return(result);
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800807c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008086:	633b      	str	r3, [r7, #48]	@ 0x30
 8008088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800808c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e6      	bne.n	8008068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3308      	adds	r3, #8
 80080a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ba:	61fa      	str	r2, [r7, #28]
 80080bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	69b9      	ldr	r1, [r7, #24]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	617b      	str	r3, [r7, #20]
   return(result);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e5      	bne.n	800809a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e012      	b.n	8008108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3758      	adds	r7, #88	@ 0x58
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008120:	e04f      	b.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d04b      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800812a:	f7f9 f9e9 	bl	8001500 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	429a      	cmp	r2, r3
 8008138:	d302      	bcc.n	8008140 <UART_WaitOnFlagUntilTimeout+0x30>
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e04e      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d037      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b80      	cmp	r3, #128	@ 0x80
 8008156:	d034      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b40      	cmp	r3, #64	@ 0x40
 800815c:	d031      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b08      	cmp	r3, #8
 800816a:	d110      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2208      	movs	r2, #8
 8008172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f95b 	bl	8008430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2208      	movs	r2, #8
 800817e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e029      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800819c:	d111      	bne.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f941 	bl	8008430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e00f      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4013      	ands	r3, r2
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	bf0c      	ite	eq
 80081d2:	2301      	moveq	r3, #1
 80081d4:	2300      	movne	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d0a0      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b0a3      	sub	sp, #140	@ 0x8c
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821e:	d10e      	bne.n	800823e <UART_Start_Receive_IT+0x52>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <UART_Start_Receive_IT+0x48>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800822e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008232:	e02d      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	22ff      	movs	r2, #255	@ 0xff
 8008238:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800823c:	e028      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10d      	bne.n	8008262 <UART_Start_Receive_IT+0x76>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d104      	bne.n	8008258 <UART_Start_Receive_IT+0x6c>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	22ff      	movs	r2, #255	@ 0xff
 8008252:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008256:	e01b      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	227f      	movs	r2, #127	@ 0x7f
 800825c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008260:	e016      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800826a:	d10d      	bne.n	8008288 <UART_Start_Receive_IT+0x9c>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <UART_Start_Receive_IT+0x92>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	227f      	movs	r2, #127	@ 0x7f
 8008278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800827c:	e008      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	223f      	movs	r2, #63	@ 0x3f
 8008282:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008286:	e003      	b.n	8008290 <UART_Start_Receive_IT+0xa4>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2222      	movs	r2, #34	@ 0x22
 800829c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80082b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b2:	f043 0301 	orr.w	r3, r3, #1
 80082b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082c4:	673a      	str	r2, [r7, #112]	@ 0x70
 80082c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80082ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80082d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e3      	bne.n	80082a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e0:	d14f      	bne.n	8008382 <UART_Start_Receive_IT+0x196>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d349      	bcc.n	8008382 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f6:	d107      	bne.n	8008308 <UART_Start_Receive_IT+0x11c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4a47      	ldr	r2, [pc, #284]	@ (8008420 <UART_Start_Receive_IT+0x234>)
 8008304:	675a      	str	r2, [r3, #116]	@ 0x74
 8008306:	e002      	b.n	800830e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a46      	ldr	r2, [pc, #280]	@ (8008424 <UART_Start_Receive_IT+0x238>)
 800830c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01a      	beq.n	800834c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800832a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800833a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800833e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008362:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800836c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800836e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800837a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_Start_Receive_IT+0x160>
 8008380:	e046      	b.n	8008410 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838a:	d107      	bne.n	800839c <UART_Start_Receive_IT+0x1b0>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d103      	bne.n	800839c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a24      	ldr	r2, [pc, #144]	@ (8008428 <UART_Start_Receive_IT+0x23c>)
 8008398:	675a      	str	r2, [r3, #116]	@ 0x74
 800839a:	e002      	b.n	80083a2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4a23      	ldr	r2, [pc, #140]	@ (800842c <UART_Start_Receive_IT+0x240>)
 80083a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d019      	beq.n	80083de <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80083be:	677b      	str	r3, [r7, #116]	@ 0x74
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e6      	bne.n	80083aa <UART_Start_Receive_IT+0x1be>
 80083dc:	e018      	b.n	8008410 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	613b      	str	r3, [r7, #16]
   return(result);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f043 0320 	orr.w	r3, r3, #32
 80083f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083fc:	623b      	str	r3, [r7, #32]
 80083fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	61bb      	str	r3, [r7, #24]
   return(result);
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	378c      	adds	r7, #140	@ 0x8c
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	08008c51 	.word	0x08008c51
 8008424:	080088f1 	.word	0x080088f1
 8008428:	08008739 	.word	0x08008739
 800842c:	08008581 	.word	0x08008581

08008430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b095      	sub	sp, #84	@ 0x54
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800844c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008456:	643b      	str	r3, [r7, #64]	@ 0x40
 8008458:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800845c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e6      	bne.n	8008438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	61fb      	str	r3, [r7, #28]
   return(result);
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	4b1e      	ldr	r3, [pc, #120]	@ (80084f8 <UART_EndRxTransfer+0xc8>)
 800847e:	4013      	ands	r3, r2
 8008480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800848a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800848c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d118      	bne.n	80084d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f023 0310 	bic.w	r3, r3, #16
 80084ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6979      	ldr	r1, [r7, #20]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	613b      	str	r3, [r7, #16]
   return(result);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084ec:	bf00      	nop
 80084ee:	3754      	adds	r7, #84	@ 0x54
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	effffffe 	.word	0xeffffffe

080084fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7fe ff2e 	bl	800737c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	60bb      	str	r3, [r7, #8]
   return(result);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	6979      	ldr	r1, [r7, #20]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	613b      	str	r3, [r7, #16]
   return(result);
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e6      	bne.n	8008530 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fe fef9 	bl	8007368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008576:	bf00      	nop
 8008578:	3720      	adds	r7, #32
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b09c      	sub	sp, #112	@ 0x70
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800858e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008598:	2b22      	cmp	r3, #34	@ 0x22
 800859a:	f040 80be 	bne.w	800871a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80085ac:	b2d9      	uxtb	r1, r3
 80085ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085b8:	400a      	ands	r2, r1
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 80a1 	bne.w	800872a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008608:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800860c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e6      	bne.n	80085e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800862a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	667b      	str	r3, [r7, #100]	@ 0x64
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800863a:	647a      	str	r2, [r7, #68]	@ 0x44
 800863c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e5      	bne.n	800861a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a33      	ldr	r2, [pc, #204]	@ (8008734 <UART_RxISR_8BIT+0x1b4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d01f      	beq.n	80086ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	623b      	str	r3, [r7, #32]
   return(result);
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800868e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008698:	633b      	str	r3, [r7, #48]	@ 0x30
 800869a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800869e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e6      	bne.n	800867a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d12e      	bne.n	8008712 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0310 	bic.w	r3, r3, #16
 80086ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	617b      	str	r3, [r7, #20]
   return(result);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d103      	bne.n	8008702 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2210      	movs	r2, #16
 8008700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fe fe40 	bl	8007390 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008710:	e00b      	b.n	800872a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7f8 fa54 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 8008718:	e007      	b.n	800872a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0208 	orr.w	r2, r2, #8
 8008728:	619a      	str	r2, [r3, #24]
}
 800872a:	bf00      	nop
 800872c:	3770      	adds	r7, #112	@ 0x70
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	58000c00 	.word	0x58000c00

08008738 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b09c      	sub	sp, #112	@ 0x70
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008746:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008750:	2b22      	cmp	r3, #34	@ 0x22
 8008752:	f040 80be 	bne.w	80088d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008764:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008766:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800876a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800876e:	4013      	ands	r3, r2
 8008770:	b29a      	uxth	r2, r3
 8008772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008774:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800877a:	1c9a      	adds	r2, r3, #2
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008786:	b29b      	uxth	r3, r3
 8008788:	3b01      	subs	r3, #1
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008798:	b29b      	uxth	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 80a1 	bne.w	80088e2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80087ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087be:	657b      	str	r3, [r7, #84]	@ 0x54
 80087c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e6      	bne.n	80087a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3308      	adds	r3, #8
 80087d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	f023 0301 	bic.w	r3, r3, #1
 80087e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80087f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e5      	bne.n	80087d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a33      	ldr	r2, [pc, #204]	@ (80088ec <UART_RxISR_16BIT+0x1b4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d01f      	beq.n	8008864 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d018      	beq.n	8008864 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008846:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008852:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e6      	bne.n	8008832 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d12e      	bne.n	80088ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f023 0310 	bic.w	r3, r3, #16
 8008886:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6979      	ldr	r1, [r7, #20]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	613b      	str	r3, [r7, #16]
   return(result);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e6      	bne.n	8008872 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b10      	cmp	r3, #16
 80088b0:	d103      	bne.n	80088ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2210      	movs	r2, #16
 80088b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fe fd64 	bl	8007390 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088c8:	e00b      	b.n	80088e2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7f8 f978 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 80088d0:	e007      	b.n	80088e2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	699a      	ldr	r2, [r3, #24]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0208 	orr.w	r2, r2, #8
 80088e0:	619a      	str	r2, [r3, #24]
}
 80088e2:	bf00      	nop
 80088e4:	3770      	adds	r7, #112	@ 0x70
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	58000c00 	.word	0x58000c00

080088f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b0ac      	sub	sp, #176	@ 0xb0
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008926:	2b22      	cmp	r3, #34	@ 0x22
 8008928:	f040 8180 	bne.w	8008c2c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008932:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008936:	e123      	b.n	8008b80 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008942:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008946:	b2d9      	uxtb	r1, r3
 8008948:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800894c:	b2da      	uxtb	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008952:	400a      	ands	r2, r1
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b01      	subs	r3, #1
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800897e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b00      	cmp	r3, #0
 8008988:	d053      	beq.n	8008a32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800898a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d011      	beq.n	80089ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8008996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800899a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2201      	movs	r2, #1
 80089a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b0:	f043 0201 	orr.w	r2, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d011      	beq.n	80089ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80089c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2202      	movs	r2, #2
 80089d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e0:	f043 0204 	orr.w	r2, r3, #4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d011      	beq.n	8008a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80089f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2204      	movs	r2, #4
 8008a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a10:	f043 0202 	orr.w	r2, r3, #2
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7fe fca9 	bl	800737c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 80a0 	bne.w	8008b80 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a64:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008a68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e4      	bne.n	8008a40 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008a86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a88:	4b6e      	ldr	r3, [pc, #440]	@ (8008c44 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3308      	adds	r3, #8
 8008a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a9a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008a9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008aa0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e3      	bne.n	8008a76 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a60      	ldr	r2, [pc, #384]	@ (8008c48 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d021      	beq.n	8008b10 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d01a      	beq.n	8008b10 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008afc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008afe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e4      	bne.n	8008ada <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d130      	bne.n	8008b7a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	f023 0310 	bic.w	r3, r3, #16
 8008b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e4      	bne.n	8008b1e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f003 0310 	and.w	r3, r3, #16
 8008b5e:	2b10      	cmp	r3, #16
 8008b60:	d103      	bne.n	8008b6a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2210      	movs	r2, #16
 8008b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fe fc0c 	bl	8007390 <HAL_UARTEx_RxEventCallback>
 8008b78:	e002      	b.n	8008b80 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7f8 f820 	bl	8000bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d006      	beq.n	8008b96 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f47f aed1 	bne.w	8008938 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ba0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d049      	beq.n	8008c3c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d242      	bcs.n	8008c3c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e3      	bne.n	8008bb6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a16      	ldr	r2, [pc, #88]	@ (8008c4c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008bf2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f043 0320 	orr.w	r3, r3, #32
 8008c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c16:	61bb      	str	r3, [r7, #24]
 8008c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6979      	ldr	r1, [r7, #20]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	613b      	str	r3, [r7, #16]
   return(result);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e4      	bne.n	8008bf4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c2a:	e007      	b.n	8008c3c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699a      	ldr	r2, [r3, #24]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0208 	orr.w	r2, r2, #8
 8008c3a:	619a      	str	r2, [r3, #24]
}
 8008c3c:	bf00      	nop
 8008c3e:	37b0      	adds	r7, #176	@ 0xb0
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	effffffe 	.word	0xeffffffe
 8008c48:	58000c00 	.word	0x58000c00
 8008c4c:	08008581 	.word	0x08008581

08008c50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b0ae      	sub	sp, #184	@ 0xb8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c86:	2b22      	cmp	r3, #34	@ 0x22
 8008c88:	f040 8184 	bne.w	8008f94 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c92:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c96:	e127      	b.n	8008ee8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008caa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008cae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cc0:	1c9a      	adds	r2, r3, #2
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d053      	beq.n	8008d96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d011      	beq.n	8008d1e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00b      	beq.n	8008d1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d14:	f043 0201 	orr.w	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d011      	beq.n	8008d4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00b      	beq.n	8008d4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d44:	f043 0204 	orr.w	r2, r3, #4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d011      	beq.n	8008d7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00b      	beq.n	8008d7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2204      	movs	r2, #4
 8008d6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d74:	f043 0202 	orr.w	r2, r3, #2
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7fe faf7 	bl	800737c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 80a2 	bne.w	8008ee8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008dca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e2      	bne.n	8008da4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008dee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008df0:	4b6e      	ldr	r3, [pc, #440]	@ (8008fac <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008e02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e3      	bne.n	8008dde <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a60      	ldr	r2, [pc, #384]	@ (8008fb0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d021      	beq.n	8008e78 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01a      	beq.n	8008e78 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e4      	bne.n	8008e42 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d130      	bne.n	8008ee2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e96:	f023 0310 	bic.w	r3, r3, #16
 8008e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e4      	bne.n	8008e86 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f003 0310 	and.w	r3, r3, #16
 8008ec6:	2b10      	cmp	r3, #16
 8008ec8:	d103      	bne.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2210      	movs	r2, #16
 8008ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7fe fa58 	bl	8007390 <HAL_UARTEx_RxEventCallback>
 8008ee0:	e002      	b.n	8008ee8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7f7 fe6c 	bl	8000bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ee8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d006      	beq.n	8008efe <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f47f aecd 	bne.w	8008c98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f04:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d049      	beq.n	8008fa4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f16:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d242      	bcs.n	8008fa4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e3      	bne.n	8008f1e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a16      	ldr	r2, [pc, #88]	@ (8008fb4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008f5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f043 0320 	orr.w	r3, r3, #32
 8008f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f7e:	61fb      	str	r3, [r7, #28]
 8008f80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	69b9      	ldr	r1, [r7, #24]
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e4      	bne.n	8008f5c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f92:	e007      	b.n	8008fa4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0208 	orr.w	r2, r2, #8
 8008fa2:	619a      	str	r2, [r3, #24]
}
 8008fa4:	bf00      	nop
 8008fa6:	37b8      	adds	r7, #184	@ 0xb8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	effffffe 	.word	0xeffffffe
 8008fb0:	58000c00 	.word	0x58000c00
 8008fb4:	08008739 	.word	0x08008739

08008fb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_UARTEx_DisableFifoMode+0x16>
 8009006:	2302      	movs	r3, #2
 8009008:	e027      	b.n	800905a <HAL_UARTEx_DisableFifoMode+0x66>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2224      	movs	r2, #36	@ 0x24
 8009016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0201 	bic.w	r2, r2, #1
 8009030:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800907a:	2302      	movs	r3, #2
 800907c:	e02d      	b.n	80090da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2224      	movs	r2, #36	@ 0x24
 800908a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f850 	bl	8009160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e02d      	b.n	8009156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2224      	movs	r2, #36	@ 0x24
 8009106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f812 	bl	8009160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800916c:	2b00      	cmp	r3, #0
 800916e:	d108      	bne.n	8009182 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009180:	e031      	b.n	80091e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009182:	2310      	movs	r3, #16
 8009184:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009186:	2310      	movs	r3, #16
 8009188:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	0e5b      	lsrs	r3, r3, #25
 8009192:	b2db      	uxtb	r3, r3
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	0f5b      	lsrs	r3, r3, #29
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	7b3a      	ldrb	r2, [r7, #12]
 80091ae:	4911      	ldr	r1, [pc, #68]	@ (80091f4 <UARTEx_SetNbDataToProcess+0x94>)
 80091b0:	5c8a      	ldrb	r2, [r1, r2]
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091b6:	7b3a      	ldrb	r2, [r7, #12]
 80091b8:	490f      	ldr	r1, [pc, #60]	@ (80091f8 <UARTEx_SetNbDataToProcess+0x98>)
 80091ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	7b7a      	ldrb	r2, [r7, #13]
 80091cc:	4909      	ldr	r1, [pc, #36]	@ (80091f4 <UARTEx_SetNbDataToProcess+0x94>)
 80091ce:	5c8a      	ldrb	r2, [r1, r2]
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091d4:	7b7a      	ldrb	r2, [r7, #13]
 80091d6:	4908      	ldr	r1, [pc, #32]	@ (80091f8 <UARTEx_SetNbDataToProcess+0x98>)
 80091d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091da:	fb93 f3f2 	sdiv	r3, r3, r2
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	0800a1e0 	.word	0x0800a1e0
 80091f8:	0800a1e8 	.word	0x0800a1e8

080091fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091fc:	b084      	sub	sp, #16
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	f107 001c 	add.w	r0, r7, #28
 800920a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800920e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009212:	2b01      	cmp	r3, #1
 8009214:	d121      	bne.n	800925a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	4b2c      	ldr	r3, [pc, #176]	@ (80092d8 <USB_CoreInit+0xdc>)
 8009228:	4013      	ands	r3, r2
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800923a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800923e:	2b01      	cmp	r3, #1
 8009240:	d105      	bne.n	800924e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 faaa 	bl	80097a8 <USB_CoreReset>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e01b      	b.n	8009292 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa9e 	bl	80097a8 <USB_CoreReset>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009270:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009274:	2b00      	cmp	r3, #0
 8009276:	d106      	bne.n	8009286 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	@ 0x38
 8009284:	e005      	b.n	8009292 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009292:	7fbb      	ldrb	r3, [r7, #30]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d116      	bne.n	80092c6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929c:	b29a      	uxth	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092a6:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <USB_CoreInit+0xe0>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f043 0206 	orr.w	r2, r3, #6
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f043 0220 	orr.w	r2, r3, #32
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092d2:	b004      	add	sp, #16
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	ffbdffbf 	.word	0xffbdffbf
 80092dc:	03ee0000 	.word	0x03ee0000

080092e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f023 0201 	bic.w	r2, r3, #1
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d115      	bne.n	8009350 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009330:	200a      	movs	r0, #10
 8009332:	f7f8 f8f1 	bl	8001518 <HAL_Delay>
      ms += 10U;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	330a      	adds	r3, #10
 800933a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fa25 	bl	800978c <USB_GetMode>
 8009342:	4603      	mov	r3, r0
 8009344:	2b01      	cmp	r3, #1
 8009346:	d01e      	beq.n	8009386 <USB_SetCurrentMode+0x84>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2bc7      	cmp	r3, #199	@ 0xc7
 800934c:	d9f0      	bls.n	8009330 <USB_SetCurrentMode+0x2e>
 800934e:	e01a      	b.n	8009386 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d115      	bne.n	8009382 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009362:	200a      	movs	r0, #10
 8009364:	f7f8 f8d8 	bl	8001518 <HAL_Delay>
      ms += 10U;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	330a      	adds	r3, #10
 800936c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fa0c 	bl	800978c <USB_GetMode>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <USB_SetCurrentMode+0x84>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2bc7      	cmp	r3, #199	@ 0xc7
 800937e:	d9f0      	bls.n	8009362 <USB_SetCurrentMode+0x60>
 8009380:	e001      	b.n	8009386 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e005      	b.n	8009392 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2bc8      	cmp	r3, #200	@ 0xc8
 800938a:	d101      	bne.n	8009390 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800939c:	b084      	sub	sp, #16
 800939e:	b580      	push	{r7, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80093aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
 80093ba:	e009      	b.n	80093d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	3340      	adds	r3, #64	@ 0x40
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3301      	adds	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2b0e      	cmp	r3, #14
 80093d4:	d9f2      	bls.n	80093bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80093d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d11c      	bne.n	8009418 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093ec:	f043 0302 	orr.w	r3, r3, #2
 80093f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	e005      	b.n	8009424 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800942a:	461a      	mov	r2, r3
 800942c:	2300      	movs	r3, #0
 800942e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009430:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009434:	2b01      	cmp	r3, #1
 8009436:	d10d      	bne.n	8009454 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009440:	2100      	movs	r1, #0
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f968 	bl	8009718 <USB_SetDevSpeed>
 8009448:	e008      	b.n	800945c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800944a:	2101      	movs	r1, #1
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f963 	bl	8009718 <USB_SetDevSpeed>
 8009452:	e003      	b.n	800945c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009454:	2103      	movs	r1, #3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f95e 	bl	8009718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800945c:	2110      	movs	r1, #16
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f8fa 	bl	8009658 <USB_FlushTxFifo>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f924 	bl	80096bc <USB_FlushRxFifo>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009484:	461a      	mov	r2, r3
 8009486:	2300      	movs	r3, #0
 8009488:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009490:	461a      	mov	r2, r3
 8009492:	2300      	movs	r3, #0
 8009494:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800949c:	461a      	mov	r2, r3
 800949e:	2300      	movs	r3, #0
 80094a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	e043      	b.n	8009530 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094be:	d118      	bne.n	80094f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094d2:	461a      	mov	r2, r3
 80094d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e013      	b.n	8009504 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e8:	461a      	mov	r2, r3
 80094ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	e008      	b.n	8009504 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094fe:	461a      	mov	r2, r3
 8009500:	2300      	movs	r3, #0
 8009502:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009510:	461a      	mov	r2, r3
 8009512:	2300      	movs	r3, #0
 8009514:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009522:	461a      	mov	r2, r3
 8009524:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	3301      	adds	r3, #1
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009534:	461a      	mov	r2, r3
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	4293      	cmp	r3, r2
 800953a:	d3b5      	bcc.n	80094a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800953c:	2300      	movs	r3, #0
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	e043      	b.n	80095ca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009558:	d118      	bne.n	800958c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800956c:	461a      	mov	r2, r3
 800956e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	e013      	b.n	800959e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009582:	461a      	mov	r2, r3
 8009584:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	e008      	b.n	800959e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009598:	461a      	mov	r2, r3
 800959a:	2300      	movs	r3, #0
 800959c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095aa:	461a      	mov	r2, r3
 80095ac:	2300      	movs	r3, #0
 80095ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095bc:	461a      	mov	r2, r3
 80095be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	3301      	adds	r3, #1
 80095c8:	613b      	str	r3, [r7, #16]
 80095ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095ce:	461a      	mov	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d3b5      	bcc.n	8009542 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80095f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d105      	bne.n	800960c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f043 0210 	orr.w	r2, r3, #16
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <USB_DevInit+0x2b4>)
 8009612:	4313      	orrs	r3, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009618:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	f043 0208 	orr.w	r2, r3, #8
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800962c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009630:	2b01      	cmp	r3, #1
 8009632:	d105      	bne.n	8009640 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	4b06      	ldr	r3, [pc, #24]	@ (8009654 <USB_DevInit+0x2b8>)
 800963a:	4313      	orrs	r3, r2
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800964c:	b004      	add	sp, #16
 800964e:	4770      	bx	lr
 8009650:	803c3800 	.word	0x803c3800
 8009654:	40000004 	.word	0x40000004

08009658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009672:	d901      	bls.n	8009678 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e01b      	b.n	80096b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	daf2      	bge.n	8009666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	019b      	lsls	r3, r3, #6
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800969c:	d901      	bls.n	80096a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e006      	b.n	80096b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0320 	and.w	r3, r3, #32
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	d0f0      	beq.n	8009690 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096d4:	d901      	bls.n	80096da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e018      	b.n	800970c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	daf2      	bge.n	80096c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2210      	movs	r2, #16
 80096ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3301      	adds	r3, #1
 80096f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096f8:	d901      	bls.n	80096fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e006      	b.n	800970c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	f003 0310 	and.w	r3, r3, #16
 8009706:	2b10      	cmp	r3, #16
 8009708:	d0f0      	beq.n	80096ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	68f9      	ldr	r1, [r7, #12]
 8009734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009738:	4313      	orrs	r3, r2
 800973a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009764:	f023 0303 	bic.w	r3, r3, #3
 8009768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009778:	f043 0302 	orr.w	r3, r3, #2
 800977c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	f003 0301 	and.w	r3, r3, #1
}
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097c0:	d901      	bls.n	80097c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e01b      	b.n	80097fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	daf2      	bge.n	80097b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f043 0201 	orr.w	r2, r3, #1
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3301      	adds	r3, #1
 80097e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097ea:	d901      	bls.n	80097f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e006      	b.n	80097fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d0f0      	beq.n	80097de <USB_CoreReset+0x36>

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <siprintf>:
 800980c:	b40e      	push	{r1, r2, r3}
 800980e:	b500      	push	{lr}
 8009810:	b09c      	sub	sp, #112	@ 0x70
 8009812:	ab1d      	add	r3, sp, #116	@ 0x74
 8009814:	9002      	str	r0, [sp, #8]
 8009816:	9006      	str	r0, [sp, #24]
 8009818:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800981c:	4809      	ldr	r0, [pc, #36]	@ (8009844 <siprintf+0x38>)
 800981e:	9107      	str	r1, [sp, #28]
 8009820:	9104      	str	r1, [sp, #16]
 8009822:	4909      	ldr	r1, [pc, #36]	@ (8009848 <siprintf+0x3c>)
 8009824:	f853 2b04 	ldr.w	r2, [r3], #4
 8009828:	9105      	str	r1, [sp, #20]
 800982a:	6800      	ldr	r0, [r0, #0]
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	a902      	add	r1, sp, #8
 8009830:	f000 f9a6 	bl	8009b80 <_svfiprintf_r>
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
 800983a:	b01c      	add	sp, #112	@ 0x70
 800983c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009840:	b003      	add	sp, #12
 8009842:	4770      	bx	lr
 8009844:	24000010 	.word	0x24000010
 8009848:	ffff0208 	.word	0xffff0208

0800984c <memset>:
 800984c:	4402      	add	r2, r0
 800984e:	4603      	mov	r3, r0
 8009850:	4293      	cmp	r3, r2
 8009852:	d100      	bne.n	8009856 <memset+0xa>
 8009854:	4770      	bx	lr
 8009856:	f803 1b01 	strb.w	r1, [r3], #1
 800985a:	e7f9      	b.n	8009850 <memset+0x4>

0800985c <strncmp>:
 800985c:	b510      	push	{r4, lr}
 800985e:	b16a      	cbz	r2, 800987c <strncmp+0x20>
 8009860:	3901      	subs	r1, #1
 8009862:	1884      	adds	r4, r0, r2
 8009864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009868:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800986c:	429a      	cmp	r2, r3
 800986e:	d103      	bne.n	8009878 <strncmp+0x1c>
 8009870:	42a0      	cmp	r0, r4
 8009872:	d001      	beq.n	8009878 <strncmp+0x1c>
 8009874:	2a00      	cmp	r2, #0
 8009876:	d1f5      	bne.n	8009864 <strncmp+0x8>
 8009878:	1ad0      	subs	r0, r2, r3
 800987a:	bd10      	pop	{r4, pc}
 800987c:	4610      	mov	r0, r2
 800987e:	e7fc      	b.n	800987a <strncmp+0x1e>

08009880 <__errno>:
 8009880:	4b01      	ldr	r3, [pc, #4]	@ (8009888 <__errno+0x8>)
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	24000010 	.word	0x24000010

0800988c <__libc_init_array>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	4d0d      	ldr	r5, [pc, #52]	@ (80098c4 <__libc_init_array+0x38>)
 8009890:	4c0d      	ldr	r4, [pc, #52]	@ (80098c8 <__libc_init_array+0x3c>)
 8009892:	1b64      	subs	r4, r4, r5
 8009894:	10a4      	asrs	r4, r4, #2
 8009896:	2600      	movs	r6, #0
 8009898:	42a6      	cmp	r6, r4
 800989a:	d109      	bne.n	80098b0 <__libc_init_array+0x24>
 800989c:	4d0b      	ldr	r5, [pc, #44]	@ (80098cc <__libc_init_array+0x40>)
 800989e:	4c0c      	ldr	r4, [pc, #48]	@ (80098d0 <__libc_init_array+0x44>)
 80098a0:	f000 fc66 	bl	800a170 <_init>
 80098a4:	1b64      	subs	r4, r4, r5
 80098a6:	10a4      	asrs	r4, r4, #2
 80098a8:	2600      	movs	r6, #0
 80098aa:	42a6      	cmp	r6, r4
 80098ac:	d105      	bne.n	80098ba <__libc_init_array+0x2e>
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b4:	4798      	blx	r3
 80098b6:	3601      	adds	r6, #1
 80098b8:	e7ee      	b.n	8009898 <__libc_init_array+0xc>
 80098ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80098be:	4798      	blx	r3
 80098c0:	3601      	adds	r6, #1
 80098c2:	e7f2      	b.n	80098aa <__libc_init_array+0x1e>
 80098c4:	0800a22c 	.word	0x0800a22c
 80098c8:	0800a22c 	.word	0x0800a22c
 80098cc:	0800a22c 	.word	0x0800a22c
 80098d0:	0800a230 	.word	0x0800a230

080098d4 <__retarget_lock_acquire_recursive>:
 80098d4:	4770      	bx	lr

080098d6 <__retarget_lock_release_recursive>:
 80098d6:	4770      	bx	lr

080098d8 <_free_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4605      	mov	r5, r0
 80098dc:	2900      	cmp	r1, #0
 80098de:	d041      	beq.n	8009964 <_free_r+0x8c>
 80098e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e4:	1f0c      	subs	r4, r1, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	bfb8      	it	lt
 80098ea:	18e4      	addlt	r4, r4, r3
 80098ec:	f000 f8e0 	bl	8009ab0 <__malloc_lock>
 80098f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009968 <_free_r+0x90>)
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	b933      	cbnz	r3, 8009904 <_free_r+0x2c>
 80098f6:	6063      	str	r3, [r4, #4]
 80098f8:	6014      	str	r4, [r2, #0]
 80098fa:	4628      	mov	r0, r5
 80098fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009900:	f000 b8dc 	b.w	8009abc <__malloc_unlock>
 8009904:	42a3      	cmp	r3, r4
 8009906:	d908      	bls.n	800991a <_free_r+0x42>
 8009908:	6820      	ldr	r0, [r4, #0]
 800990a:	1821      	adds	r1, r4, r0
 800990c:	428b      	cmp	r3, r1
 800990e:	bf01      	itttt	eq
 8009910:	6819      	ldreq	r1, [r3, #0]
 8009912:	685b      	ldreq	r3, [r3, #4]
 8009914:	1809      	addeq	r1, r1, r0
 8009916:	6021      	streq	r1, [r4, #0]
 8009918:	e7ed      	b.n	80098f6 <_free_r+0x1e>
 800991a:	461a      	mov	r2, r3
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	b10b      	cbz	r3, 8009924 <_free_r+0x4c>
 8009920:	42a3      	cmp	r3, r4
 8009922:	d9fa      	bls.n	800991a <_free_r+0x42>
 8009924:	6811      	ldr	r1, [r2, #0]
 8009926:	1850      	adds	r0, r2, r1
 8009928:	42a0      	cmp	r0, r4
 800992a:	d10b      	bne.n	8009944 <_free_r+0x6c>
 800992c:	6820      	ldr	r0, [r4, #0]
 800992e:	4401      	add	r1, r0
 8009930:	1850      	adds	r0, r2, r1
 8009932:	4283      	cmp	r3, r0
 8009934:	6011      	str	r1, [r2, #0]
 8009936:	d1e0      	bne.n	80098fa <_free_r+0x22>
 8009938:	6818      	ldr	r0, [r3, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	6053      	str	r3, [r2, #4]
 800993e:	4408      	add	r0, r1
 8009940:	6010      	str	r0, [r2, #0]
 8009942:	e7da      	b.n	80098fa <_free_r+0x22>
 8009944:	d902      	bls.n	800994c <_free_r+0x74>
 8009946:	230c      	movs	r3, #12
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	e7d6      	b.n	80098fa <_free_r+0x22>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	1821      	adds	r1, r4, r0
 8009950:	428b      	cmp	r3, r1
 8009952:	bf04      	itt	eq
 8009954:	6819      	ldreq	r1, [r3, #0]
 8009956:	685b      	ldreq	r3, [r3, #4]
 8009958:	6063      	str	r3, [r4, #4]
 800995a:	bf04      	itt	eq
 800995c:	1809      	addeq	r1, r1, r0
 800995e:	6021      	streq	r1, [r4, #0]
 8009960:	6054      	str	r4, [r2, #4]
 8009962:	e7ca      	b.n	80098fa <_free_r+0x22>
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	24000954 	.word	0x24000954

0800996c <sbrk_aligned>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	4e0f      	ldr	r6, [pc, #60]	@ (80099ac <sbrk_aligned+0x40>)
 8009970:	460c      	mov	r4, r1
 8009972:	6831      	ldr	r1, [r6, #0]
 8009974:	4605      	mov	r5, r0
 8009976:	b911      	cbnz	r1, 800997e <sbrk_aligned+0x12>
 8009978:	f000 fba6 	bl	800a0c8 <_sbrk_r>
 800997c:	6030      	str	r0, [r6, #0]
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f000 fba1 	bl	800a0c8 <_sbrk_r>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d103      	bne.n	8009992 <sbrk_aligned+0x26>
 800998a:	f04f 34ff 	mov.w	r4, #4294967295
 800998e:	4620      	mov	r0, r4
 8009990:	bd70      	pop	{r4, r5, r6, pc}
 8009992:	1cc4      	adds	r4, r0, #3
 8009994:	f024 0403 	bic.w	r4, r4, #3
 8009998:	42a0      	cmp	r0, r4
 800999a:	d0f8      	beq.n	800998e <sbrk_aligned+0x22>
 800999c:	1a21      	subs	r1, r4, r0
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 fb92 	bl	800a0c8 <_sbrk_r>
 80099a4:	3001      	adds	r0, #1
 80099a6:	d1f2      	bne.n	800998e <sbrk_aligned+0x22>
 80099a8:	e7ef      	b.n	800998a <sbrk_aligned+0x1e>
 80099aa:	bf00      	nop
 80099ac:	24000950 	.word	0x24000950

080099b0 <_malloc_r>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	1ccd      	adds	r5, r1, #3
 80099b6:	f025 0503 	bic.w	r5, r5, #3
 80099ba:	3508      	adds	r5, #8
 80099bc:	2d0c      	cmp	r5, #12
 80099be:	bf38      	it	cc
 80099c0:	250c      	movcc	r5, #12
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	4606      	mov	r6, r0
 80099c6:	db01      	blt.n	80099cc <_malloc_r+0x1c>
 80099c8:	42a9      	cmp	r1, r5
 80099ca:	d904      	bls.n	80099d6 <_malloc_r+0x26>
 80099cc:	230c      	movs	r3, #12
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	2000      	movs	r0, #0
 80099d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009aac <_malloc_r+0xfc>
 80099da:	f000 f869 	bl	8009ab0 <__malloc_lock>
 80099de:	f8d8 3000 	ldr.w	r3, [r8]
 80099e2:	461c      	mov	r4, r3
 80099e4:	bb44      	cbnz	r4, 8009a38 <_malloc_r+0x88>
 80099e6:	4629      	mov	r1, r5
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff ffbf 	bl	800996c <sbrk_aligned>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	4604      	mov	r4, r0
 80099f2:	d158      	bne.n	8009aa6 <_malloc_r+0xf6>
 80099f4:	f8d8 4000 	ldr.w	r4, [r8]
 80099f8:	4627      	mov	r7, r4
 80099fa:	2f00      	cmp	r7, #0
 80099fc:	d143      	bne.n	8009a86 <_malloc_r+0xd6>
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d04b      	beq.n	8009a9a <_malloc_r+0xea>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	4639      	mov	r1, r7
 8009a06:	4630      	mov	r0, r6
 8009a08:	eb04 0903 	add.w	r9, r4, r3
 8009a0c:	f000 fb5c 	bl	800a0c8 <_sbrk_r>
 8009a10:	4581      	cmp	r9, r0
 8009a12:	d142      	bne.n	8009a9a <_malloc_r+0xea>
 8009a14:	6821      	ldr	r1, [r4, #0]
 8009a16:	1a6d      	subs	r5, r5, r1
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7ff ffa6 	bl	800996c <sbrk_aligned>
 8009a20:	3001      	adds	r0, #1
 8009a22:	d03a      	beq.n	8009a9a <_malloc_r+0xea>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	442b      	add	r3, r5
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	bb62      	cbnz	r2, 8009a8c <_malloc_r+0xdc>
 8009a32:	f8c8 7000 	str.w	r7, [r8]
 8009a36:	e00f      	b.n	8009a58 <_malloc_r+0xa8>
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	1b52      	subs	r2, r2, r5
 8009a3c:	d420      	bmi.n	8009a80 <_malloc_r+0xd0>
 8009a3e:	2a0b      	cmp	r2, #11
 8009a40:	d917      	bls.n	8009a72 <_malloc_r+0xc2>
 8009a42:	1961      	adds	r1, r4, r5
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	6025      	str	r5, [r4, #0]
 8009a48:	bf18      	it	ne
 8009a4a:	6059      	strne	r1, [r3, #4]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	bf08      	it	eq
 8009a50:	f8c8 1000 	streq.w	r1, [r8]
 8009a54:	5162      	str	r2, [r4, r5]
 8009a56:	604b      	str	r3, [r1, #4]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f82f 	bl	8009abc <__malloc_unlock>
 8009a5e:	f104 000b 	add.w	r0, r4, #11
 8009a62:	1d23      	adds	r3, r4, #4
 8009a64:	f020 0007 	bic.w	r0, r0, #7
 8009a68:	1ac2      	subs	r2, r0, r3
 8009a6a:	bf1c      	itt	ne
 8009a6c:	1a1b      	subne	r3, r3, r0
 8009a6e:	50a3      	strne	r3, [r4, r2]
 8009a70:	e7af      	b.n	80099d2 <_malloc_r+0x22>
 8009a72:	6862      	ldr	r2, [r4, #4]
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	bf0c      	ite	eq
 8009a78:	f8c8 2000 	streq.w	r2, [r8]
 8009a7c:	605a      	strne	r2, [r3, #4]
 8009a7e:	e7eb      	b.n	8009a58 <_malloc_r+0xa8>
 8009a80:	4623      	mov	r3, r4
 8009a82:	6864      	ldr	r4, [r4, #4]
 8009a84:	e7ae      	b.n	80099e4 <_malloc_r+0x34>
 8009a86:	463c      	mov	r4, r7
 8009a88:	687f      	ldr	r7, [r7, #4]
 8009a8a:	e7b6      	b.n	80099fa <_malloc_r+0x4a>
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d1fb      	bne.n	8009a8c <_malloc_r+0xdc>
 8009a94:	2300      	movs	r3, #0
 8009a96:	6053      	str	r3, [r2, #4]
 8009a98:	e7de      	b.n	8009a58 <_malloc_r+0xa8>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	6033      	str	r3, [r6, #0]
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f000 f80c 	bl	8009abc <__malloc_unlock>
 8009aa4:	e794      	b.n	80099d0 <_malloc_r+0x20>
 8009aa6:	6005      	str	r5, [r0, #0]
 8009aa8:	e7d6      	b.n	8009a58 <_malloc_r+0xa8>
 8009aaa:	bf00      	nop
 8009aac:	24000954 	.word	0x24000954

08009ab0 <__malloc_lock>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	@ (8009ab8 <__malloc_lock+0x8>)
 8009ab2:	f7ff bf0f 	b.w	80098d4 <__retarget_lock_acquire_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	2400094c 	.word	0x2400094c

08009abc <__malloc_unlock>:
 8009abc:	4801      	ldr	r0, [pc, #4]	@ (8009ac4 <__malloc_unlock+0x8>)
 8009abe:	f7ff bf0a 	b.w	80098d6 <__retarget_lock_release_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	2400094c 	.word	0x2400094c

08009ac8 <__ssputs_r>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	688e      	ldr	r6, [r1, #8]
 8009ace:	461f      	mov	r7, r3
 8009ad0:	42be      	cmp	r6, r7
 8009ad2:	680b      	ldr	r3, [r1, #0]
 8009ad4:	4682      	mov	sl, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	4690      	mov	r8, r2
 8009ada:	d82d      	bhi.n	8009b38 <__ssputs_r+0x70>
 8009adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ae4:	d026      	beq.n	8009b34 <__ssputs_r+0x6c>
 8009ae6:	6965      	ldr	r5, [r4, #20]
 8009ae8:	6909      	ldr	r1, [r1, #16]
 8009aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aee:	eba3 0901 	sub.w	r9, r3, r1
 8009af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009af6:	1c7b      	adds	r3, r7, #1
 8009af8:	444b      	add	r3, r9
 8009afa:	106d      	asrs	r5, r5, #1
 8009afc:	429d      	cmp	r5, r3
 8009afe:	bf38      	it	cc
 8009b00:	461d      	movcc	r5, r3
 8009b02:	0553      	lsls	r3, r2, #21
 8009b04:	d527      	bpl.n	8009b56 <__ssputs_r+0x8e>
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7ff ff52 	bl	80099b0 <_malloc_r>
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	b360      	cbz	r0, 8009b6a <__ssputs_r+0xa2>
 8009b10:	6921      	ldr	r1, [r4, #16]
 8009b12:	464a      	mov	r2, r9
 8009b14:	f000 fae8 	bl	800a0e8 <memcpy>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	6126      	str	r6, [r4, #16]
 8009b26:	6165      	str	r5, [r4, #20]
 8009b28:	444e      	add	r6, r9
 8009b2a:	eba5 0509 	sub.w	r5, r5, r9
 8009b2e:	6026      	str	r6, [r4, #0]
 8009b30:	60a5      	str	r5, [r4, #8]
 8009b32:	463e      	mov	r6, r7
 8009b34:	42be      	cmp	r6, r7
 8009b36:	d900      	bls.n	8009b3a <__ssputs_r+0x72>
 8009b38:	463e      	mov	r6, r7
 8009b3a:	6820      	ldr	r0, [r4, #0]
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	4641      	mov	r1, r8
 8009b40:	f000 faa8 	bl	800a094 <memmove>
 8009b44:	68a3      	ldr	r3, [r4, #8]
 8009b46:	1b9b      	subs	r3, r3, r6
 8009b48:	60a3      	str	r3, [r4, #8]
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	4433      	add	r3, r6
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	2000      	movs	r0, #0
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	462a      	mov	r2, r5
 8009b58:	f000 fad4 	bl	800a104 <_realloc_r>
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d1e0      	bne.n	8009b24 <__ssputs_r+0x5c>
 8009b62:	6921      	ldr	r1, [r4, #16]
 8009b64:	4650      	mov	r0, sl
 8009b66:	f7ff feb7 	bl	80098d8 <_free_r>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	f8ca 3000 	str.w	r3, [sl]
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e7e9      	b.n	8009b52 <__ssputs_r+0x8a>
	...

08009b80 <_svfiprintf_r>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	4698      	mov	r8, r3
 8009b86:	898b      	ldrh	r3, [r1, #12]
 8009b88:	061b      	lsls	r3, r3, #24
 8009b8a:	b09d      	sub	sp, #116	@ 0x74
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	4614      	mov	r4, r2
 8009b92:	d510      	bpl.n	8009bb6 <_svfiprintf_r+0x36>
 8009b94:	690b      	ldr	r3, [r1, #16]
 8009b96:	b973      	cbnz	r3, 8009bb6 <_svfiprintf_r+0x36>
 8009b98:	2140      	movs	r1, #64	@ 0x40
 8009b9a:	f7ff ff09 	bl	80099b0 <_malloc_r>
 8009b9e:	6028      	str	r0, [r5, #0]
 8009ba0:	6128      	str	r0, [r5, #16]
 8009ba2:	b930      	cbnz	r0, 8009bb2 <_svfiprintf_r+0x32>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	b01d      	add	sp, #116	@ 0x74
 8009bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb2:	2340      	movs	r3, #64	@ 0x40
 8009bb4:	616b      	str	r3, [r5, #20]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bba:	2320      	movs	r3, #32
 8009bbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bc4:	2330      	movs	r3, #48	@ 0x30
 8009bc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d64 <_svfiprintf_r+0x1e4>
 8009bca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bce:	f04f 0901 	mov.w	r9, #1
 8009bd2:	4623      	mov	r3, r4
 8009bd4:	469a      	mov	sl, r3
 8009bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bda:	b10a      	cbz	r2, 8009be0 <_svfiprintf_r+0x60>
 8009bdc:	2a25      	cmp	r2, #37	@ 0x25
 8009bde:	d1f9      	bne.n	8009bd4 <_svfiprintf_r+0x54>
 8009be0:	ebba 0b04 	subs.w	fp, sl, r4
 8009be4:	d00b      	beq.n	8009bfe <_svfiprintf_r+0x7e>
 8009be6:	465b      	mov	r3, fp
 8009be8:	4622      	mov	r2, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	4638      	mov	r0, r7
 8009bee:	f7ff ff6b 	bl	8009ac8 <__ssputs_r>
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	f000 80a7 	beq.w	8009d46 <_svfiprintf_r+0x1c6>
 8009bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bfa:	445a      	add	r2, fp
 8009bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 809f 	beq.w	8009d46 <_svfiprintf_r+0x1c6>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c12:	f10a 0a01 	add.w	sl, sl, #1
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	9307      	str	r3, [sp, #28]
 8009c1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c20:	4654      	mov	r4, sl
 8009c22:	2205      	movs	r2, #5
 8009c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c28:	484e      	ldr	r0, [pc, #312]	@ (8009d64 <_svfiprintf_r+0x1e4>)
 8009c2a:	f7f6 fb61 	bl	80002f0 <memchr>
 8009c2e:	9a04      	ldr	r2, [sp, #16]
 8009c30:	b9d8      	cbnz	r0, 8009c6a <_svfiprintf_r+0xea>
 8009c32:	06d0      	lsls	r0, r2, #27
 8009c34:	bf44      	itt	mi
 8009c36:	2320      	movmi	r3, #32
 8009c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c3c:	0711      	lsls	r1, r2, #28
 8009c3e:	bf44      	itt	mi
 8009c40:	232b      	movmi	r3, #43	@ 0x2b
 8009c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c46:	f89a 3000 	ldrb.w	r3, [sl]
 8009c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c4c:	d015      	beq.n	8009c7a <_svfiprintf_r+0xfa>
 8009c4e:	9a07      	ldr	r2, [sp, #28]
 8009c50:	4654      	mov	r4, sl
 8009c52:	2000      	movs	r0, #0
 8009c54:	f04f 0c0a 	mov.w	ip, #10
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c5e:	3b30      	subs	r3, #48	@ 0x30
 8009c60:	2b09      	cmp	r3, #9
 8009c62:	d94b      	bls.n	8009cfc <_svfiprintf_r+0x17c>
 8009c64:	b1b0      	cbz	r0, 8009c94 <_svfiprintf_r+0x114>
 8009c66:	9207      	str	r2, [sp, #28]
 8009c68:	e014      	b.n	8009c94 <_svfiprintf_r+0x114>
 8009c6a:	eba0 0308 	sub.w	r3, r0, r8
 8009c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c72:	4313      	orrs	r3, r2
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	46a2      	mov	sl, r4
 8009c78:	e7d2      	b.n	8009c20 <_svfiprintf_r+0xa0>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	1d19      	adds	r1, r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	9103      	str	r1, [sp, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfbb      	ittet	lt
 8009c86:	425b      	neglt	r3, r3
 8009c88:	f042 0202 	orrlt.w	r2, r2, #2
 8009c8c:	9307      	strge	r3, [sp, #28]
 8009c8e:	9307      	strlt	r3, [sp, #28]
 8009c90:	bfb8      	it	lt
 8009c92:	9204      	strlt	r2, [sp, #16]
 8009c94:	7823      	ldrb	r3, [r4, #0]
 8009c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c98:	d10a      	bne.n	8009cb0 <_svfiprintf_r+0x130>
 8009c9a:	7863      	ldrb	r3, [r4, #1]
 8009c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c9e:	d132      	bne.n	8009d06 <_svfiprintf_r+0x186>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	1d1a      	adds	r2, r3, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	9203      	str	r2, [sp, #12]
 8009ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cac:	3402      	adds	r4, #2
 8009cae:	9305      	str	r3, [sp, #20]
 8009cb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d74 <_svfiprintf_r+0x1f4>
 8009cb4:	7821      	ldrb	r1, [r4, #0]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	4650      	mov	r0, sl
 8009cba:	f7f6 fb19 	bl	80002f0 <memchr>
 8009cbe:	b138      	cbz	r0, 8009cd0 <_svfiprintf_r+0x150>
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	eba0 000a 	sub.w	r0, r0, sl
 8009cc6:	2240      	movs	r2, #64	@ 0x40
 8009cc8:	4082      	lsls	r2, r0
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	3401      	adds	r4, #1
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd4:	4824      	ldr	r0, [pc, #144]	@ (8009d68 <_svfiprintf_r+0x1e8>)
 8009cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cda:	2206      	movs	r2, #6
 8009cdc:	f7f6 fb08 	bl	80002f0 <memchr>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d036      	beq.n	8009d52 <_svfiprintf_r+0x1d2>
 8009ce4:	4b21      	ldr	r3, [pc, #132]	@ (8009d6c <_svfiprintf_r+0x1ec>)
 8009ce6:	bb1b      	cbnz	r3, 8009d30 <_svfiprintf_r+0x1b0>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	3307      	adds	r3, #7
 8009cec:	f023 0307 	bic.w	r3, r3, #7
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	9303      	str	r3, [sp, #12]
 8009cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf6:	4433      	add	r3, r6
 8009cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cfa:	e76a      	b.n	8009bd2 <_svfiprintf_r+0x52>
 8009cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d00:	460c      	mov	r4, r1
 8009d02:	2001      	movs	r0, #1
 8009d04:	e7a8      	b.n	8009c58 <_svfiprintf_r+0xd8>
 8009d06:	2300      	movs	r3, #0
 8009d08:	3401      	adds	r4, #1
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	4620      	mov	r0, r4
 8009d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d18:	3a30      	subs	r2, #48	@ 0x30
 8009d1a:	2a09      	cmp	r2, #9
 8009d1c:	d903      	bls.n	8009d26 <_svfiprintf_r+0x1a6>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0c6      	beq.n	8009cb0 <_svfiprintf_r+0x130>
 8009d22:	9105      	str	r1, [sp, #20]
 8009d24:	e7c4      	b.n	8009cb0 <_svfiprintf_r+0x130>
 8009d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7f0      	b.n	8009d12 <_svfiprintf_r+0x192>
 8009d30:	ab03      	add	r3, sp, #12
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	462a      	mov	r2, r5
 8009d36:	4b0e      	ldr	r3, [pc, #56]	@ (8009d70 <_svfiprintf_r+0x1f0>)
 8009d38:	a904      	add	r1, sp, #16
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	f3af 8000 	nop.w
 8009d40:	1c42      	adds	r2, r0, #1
 8009d42:	4606      	mov	r6, r0
 8009d44:	d1d6      	bne.n	8009cf4 <_svfiprintf_r+0x174>
 8009d46:	89ab      	ldrh	r3, [r5, #12]
 8009d48:	065b      	lsls	r3, r3, #25
 8009d4a:	f53f af2d 	bmi.w	8009ba8 <_svfiprintf_r+0x28>
 8009d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d50:	e72c      	b.n	8009bac <_svfiprintf_r+0x2c>
 8009d52:	ab03      	add	r3, sp, #12
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	462a      	mov	r2, r5
 8009d58:	4b05      	ldr	r3, [pc, #20]	@ (8009d70 <_svfiprintf_r+0x1f0>)
 8009d5a:	a904      	add	r1, sp, #16
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f000 f879 	bl	8009e54 <_printf_i>
 8009d62:	e7ed      	b.n	8009d40 <_svfiprintf_r+0x1c0>
 8009d64:	0800a1f0 	.word	0x0800a1f0
 8009d68:	0800a1fa 	.word	0x0800a1fa
 8009d6c:	00000000 	.word	0x00000000
 8009d70:	08009ac9 	.word	0x08009ac9
 8009d74:	0800a1f6 	.word	0x0800a1f6

08009d78 <_printf_common>:
 8009d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d7c:	4616      	mov	r6, r2
 8009d7e:	4698      	mov	r8, r3
 8009d80:	688a      	ldr	r2, [r1, #8]
 8009d82:	690b      	ldr	r3, [r1, #16]
 8009d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	bfb8      	it	lt
 8009d8c:	4613      	movlt	r3, r2
 8009d8e:	6033      	str	r3, [r6, #0]
 8009d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d94:	4607      	mov	r7, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b10a      	cbz	r2, 8009d9e <_printf_common+0x26>
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	0699      	lsls	r1, r3, #26
 8009da2:	bf42      	ittt	mi
 8009da4:	6833      	ldrmi	r3, [r6, #0]
 8009da6:	3302      	addmi	r3, #2
 8009da8:	6033      	strmi	r3, [r6, #0]
 8009daa:	6825      	ldr	r5, [r4, #0]
 8009dac:	f015 0506 	ands.w	r5, r5, #6
 8009db0:	d106      	bne.n	8009dc0 <_printf_common+0x48>
 8009db2:	f104 0a19 	add.w	sl, r4, #25
 8009db6:	68e3      	ldr	r3, [r4, #12]
 8009db8:	6832      	ldr	r2, [r6, #0]
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	dc26      	bgt.n	8009e0e <_printf_common+0x96>
 8009dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dc4:	6822      	ldr	r2, [r4, #0]
 8009dc6:	3b00      	subs	r3, #0
 8009dc8:	bf18      	it	ne
 8009dca:	2301      	movne	r3, #1
 8009dcc:	0692      	lsls	r2, r2, #26
 8009dce:	d42b      	bmi.n	8009e28 <_printf_common+0xb0>
 8009dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	47c8      	blx	r9
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d01e      	beq.n	8009e1c <_printf_common+0xa4>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	f003 0306 	and.w	r3, r3, #6
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	bf02      	ittt	eq
 8009dea:	68e5      	ldreq	r5, [r4, #12]
 8009dec:	6833      	ldreq	r3, [r6, #0]
 8009dee:	1aed      	subeq	r5, r5, r3
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	bf0c      	ite	eq
 8009df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df8:	2500      	movne	r5, #0
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	bfc4      	itt	gt
 8009dfe:	1a9b      	subgt	r3, r3, r2
 8009e00:	18ed      	addgt	r5, r5, r3
 8009e02:	2600      	movs	r6, #0
 8009e04:	341a      	adds	r4, #26
 8009e06:	42b5      	cmp	r5, r6
 8009e08:	d11a      	bne.n	8009e40 <_printf_common+0xc8>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	e008      	b.n	8009e20 <_printf_common+0xa8>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4652      	mov	r2, sl
 8009e12:	4641      	mov	r1, r8
 8009e14:	4638      	mov	r0, r7
 8009e16:	47c8      	blx	r9
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d103      	bne.n	8009e24 <_printf_common+0xac>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e24:	3501      	adds	r5, #1
 8009e26:	e7c6      	b.n	8009db6 <_printf_common+0x3e>
 8009e28:	18e1      	adds	r1, r4, r3
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	2030      	movs	r0, #48	@ 0x30
 8009e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e32:	4422      	add	r2, r4
 8009e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	e7c7      	b.n	8009dd0 <_printf_common+0x58>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4622      	mov	r2, r4
 8009e44:	4641      	mov	r1, r8
 8009e46:	4638      	mov	r0, r7
 8009e48:	47c8      	blx	r9
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d0e6      	beq.n	8009e1c <_printf_common+0xa4>
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7d9      	b.n	8009e06 <_printf_common+0x8e>
	...

08009e54 <_printf_i>:
 8009e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	7e0f      	ldrb	r7, [r1, #24]
 8009e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e5c:	2f78      	cmp	r7, #120	@ 0x78
 8009e5e:	4691      	mov	r9, r2
 8009e60:	4680      	mov	r8, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	469a      	mov	sl, r3
 8009e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e6a:	d807      	bhi.n	8009e7c <_printf_i+0x28>
 8009e6c:	2f62      	cmp	r7, #98	@ 0x62
 8009e6e:	d80a      	bhi.n	8009e86 <_printf_i+0x32>
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	f000 80d2 	beq.w	800a01a <_printf_i+0x1c6>
 8009e76:	2f58      	cmp	r7, #88	@ 0x58
 8009e78:	f000 80b9 	beq.w	8009fee <_printf_i+0x19a>
 8009e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e84:	e03a      	b.n	8009efc <_printf_i+0xa8>
 8009e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e8a:	2b15      	cmp	r3, #21
 8009e8c:	d8f6      	bhi.n	8009e7c <_printf_i+0x28>
 8009e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8009e94 <_printf_i+0x40>)
 8009e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e94:	08009eed 	.word	0x08009eed
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009e7d 	.word	0x08009e7d
 8009ea0:	08009e7d 	.word	0x08009e7d
 8009ea4:	08009e7d 	.word	0x08009e7d
 8009ea8:	08009e7d 	.word	0x08009e7d
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009e7d 	.word	0x08009e7d
 8009eb4:	08009e7d 	.word	0x08009e7d
 8009eb8:	08009e7d 	.word	0x08009e7d
 8009ebc:	08009e7d 	.word	0x08009e7d
 8009ec0:	0800a001 	.word	0x0800a001
 8009ec4:	08009f2b 	.word	0x08009f2b
 8009ec8:	08009fbb 	.word	0x08009fbb
 8009ecc:	08009e7d 	.word	0x08009e7d
 8009ed0:	08009e7d 	.word	0x08009e7d
 8009ed4:	0800a023 	.word	0x0800a023
 8009ed8:	08009e7d 	.word	0x08009e7d
 8009edc:	08009f2b 	.word	0x08009f2b
 8009ee0:	08009e7d 	.word	0x08009e7d
 8009ee4:	08009e7d 	.word	0x08009e7d
 8009ee8:	08009fc3 	.word	0x08009fc3
 8009eec:	6833      	ldr	r3, [r6, #0]
 8009eee:	1d1a      	adds	r2, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6032      	str	r2, [r6, #0]
 8009ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009efc:	2301      	movs	r3, #1
 8009efe:	e09d      	b.n	800a03c <_printf_i+0x1e8>
 8009f00:	6833      	ldr	r3, [r6, #0]
 8009f02:	6820      	ldr	r0, [r4, #0]
 8009f04:	1d19      	adds	r1, r3, #4
 8009f06:	6031      	str	r1, [r6, #0]
 8009f08:	0606      	lsls	r6, r0, #24
 8009f0a:	d501      	bpl.n	8009f10 <_printf_i+0xbc>
 8009f0c:	681d      	ldr	r5, [r3, #0]
 8009f0e:	e003      	b.n	8009f18 <_printf_i+0xc4>
 8009f10:	0645      	lsls	r5, r0, #25
 8009f12:	d5fb      	bpl.n	8009f0c <_printf_i+0xb8>
 8009f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	da03      	bge.n	8009f24 <_printf_i+0xd0>
 8009f1c:	232d      	movs	r3, #45	@ 0x2d
 8009f1e:	426d      	negs	r5, r5
 8009f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f24:	4859      	ldr	r0, [pc, #356]	@ (800a08c <_printf_i+0x238>)
 8009f26:	230a      	movs	r3, #10
 8009f28:	e011      	b.n	8009f4e <_printf_i+0xfa>
 8009f2a:	6821      	ldr	r1, [r4, #0]
 8009f2c:	6833      	ldr	r3, [r6, #0]
 8009f2e:	0608      	lsls	r0, r1, #24
 8009f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f34:	d402      	bmi.n	8009f3c <_printf_i+0xe8>
 8009f36:	0649      	lsls	r1, r1, #25
 8009f38:	bf48      	it	mi
 8009f3a:	b2ad      	uxthmi	r5, r5
 8009f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f3e:	4853      	ldr	r0, [pc, #332]	@ (800a08c <_printf_i+0x238>)
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	bf14      	ite	ne
 8009f44:	230a      	movne	r3, #10
 8009f46:	2308      	moveq	r3, #8
 8009f48:	2100      	movs	r1, #0
 8009f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f4e:	6866      	ldr	r6, [r4, #4]
 8009f50:	60a6      	str	r6, [r4, #8]
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	bfa2      	ittt	ge
 8009f56:	6821      	ldrge	r1, [r4, #0]
 8009f58:	f021 0104 	bicge.w	r1, r1, #4
 8009f5c:	6021      	strge	r1, [r4, #0]
 8009f5e:	b90d      	cbnz	r5, 8009f64 <_printf_i+0x110>
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	d04b      	beq.n	8009ffc <_printf_i+0x1a8>
 8009f64:	4616      	mov	r6, r2
 8009f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8009f6e:	5dc7      	ldrb	r7, [r0, r7]
 8009f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f74:	462f      	mov	r7, r5
 8009f76:	42bb      	cmp	r3, r7
 8009f78:	460d      	mov	r5, r1
 8009f7a:	d9f4      	bls.n	8009f66 <_printf_i+0x112>
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d10b      	bne.n	8009f98 <_printf_i+0x144>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	07df      	lsls	r7, r3, #31
 8009f84:	d508      	bpl.n	8009f98 <_printf_i+0x144>
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	6861      	ldr	r1, [r4, #4]
 8009f8a:	4299      	cmp	r1, r3
 8009f8c:	bfde      	ittt	le
 8009f8e:	2330      	movle	r3, #48	@ 0x30
 8009f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f98:	1b92      	subs	r2, r2, r6
 8009f9a:	6122      	str	r2, [r4, #16]
 8009f9c:	f8cd a000 	str.w	sl, [sp]
 8009fa0:	464b      	mov	r3, r9
 8009fa2:	aa03      	add	r2, sp, #12
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	f7ff fee6 	bl	8009d78 <_printf_common>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d14a      	bne.n	800a046 <_printf_i+0x1f2>
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb4:	b004      	add	sp, #16
 8009fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	f043 0320 	orr.w	r3, r3, #32
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	4833      	ldr	r0, [pc, #204]	@ (800a090 <_printf_i+0x23c>)
 8009fc4:	2778      	movs	r7, #120	@ 0x78
 8009fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	6831      	ldr	r1, [r6, #0]
 8009fce:	061f      	lsls	r7, r3, #24
 8009fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fd4:	d402      	bmi.n	8009fdc <_printf_i+0x188>
 8009fd6:	065f      	lsls	r7, r3, #25
 8009fd8:	bf48      	it	mi
 8009fda:	b2ad      	uxthmi	r5, r5
 8009fdc:	6031      	str	r1, [r6, #0]
 8009fde:	07d9      	lsls	r1, r3, #31
 8009fe0:	bf44      	itt	mi
 8009fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe6:	6023      	strmi	r3, [r4, #0]
 8009fe8:	b11d      	cbz	r5, 8009ff2 <_printf_i+0x19e>
 8009fea:	2310      	movs	r3, #16
 8009fec:	e7ac      	b.n	8009f48 <_printf_i+0xf4>
 8009fee:	4827      	ldr	r0, [pc, #156]	@ (800a08c <_printf_i+0x238>)
 8009ff0:	e7e9      	b.n	8009fc6 <_printf_i+0x172>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	f023 0320 	bic.w	r3, r3, #32
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	e7f6      	b.n	8009fea <_printf_i+0x196>
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	e7bd      	b.n	8009f7c <_printf_i+0x128>
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	6825      	ldr	r5, [r4, #0]
 800a004:	6961      	ldr	r1, [r4, #20]
 800a006:	1d18      	adds	r0, r3, #4
 800a008:	6030      	str	r0, [r6, #0]
 800a00a:	062e      	lsls	r6, r5, #24
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	d501      	bpl.n	800a014 <_printf_i+0x1c0>
 800a010:	6019      	str	r1, [r3, #0]
 800a012:	e002      	b.n	800a01a <_printf_i+0x1c6>
 800a014:	0668      	lsls	r0, r5, #25
 800a016:	d5fb      	bpl.n	800a010 <_printf_i+0x1bc>
 800a018:	8019      	strh	r1, [r3, #0]
 800a01a:	2300      	movs	r3, #0
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	4616      	mov	r6, r2
 800a020:	e7bc      	b.n	8009f9c <_printf_i+0x148>
 800a022:	6833      	ldr	r3, [r6, #0]
 800a024:	1d1a      	adds	r2, r3, #4
 800a026:	6032      	str	r2, [r6, #0]
 800a028:	681e      	ldr	r6, [r3, #0]
 800a02a:	6862      	ldr	r2, [r4, #4]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4630      	mov	r0, r6
 800a030:	f7f6 f95e 	bl	80002f0 <memchr>
 800a034:	b108      	cbz	r0, 800a03a <_printf_i+0x1e6>
 800a036:	1b80      	subs	r0, r0, r6
 800a038:	6060      	str	r0, [r4, #4]
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	6123      	str	r3, [r4, #16]
 800a03e:	2300      	movs	r3, #0
 800a040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a044:	e7aa      	b.n	8009f9c <_printf_i+0x148>
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	4632      	mov	r2, r6
 800a04a:	4649      	mov	r1, r9
 800a04c:	4640      	mov	r0, r8
 800a04e:	47d0      	blx	sl
 800a050:	3001      	adds	r0, #1
 800a052:	d0ad      	beq.n	8009fb0 <_printf_i+0x15c>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	079b      	lsls	r3, r3, #30
 800a058:	d413      	bmi.n	800a082 <_printf_i+0x22e>
 800a05a:	68e0      	ldr	r0, [r4, #12]
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	4298      	cmp	r0, r3
 800a060:	bfb8      	it	lt
 800a062:	4618      	movlt	r0, r3
 800a064:	e7a6      	b.n	8009fb4 <_printf_i+0x160>
 800a066:	2301      	movs	r3, #1
 800a068:	4632      	mov	r2, r6
 800a06a:	4649      	mov	r1, r9
 800a06c:	4640      	mov	r0, r8
 800a06e:	47d0      	blx	sl
 800a070:	3001      	adds	r0, #1
 800a072:	d09d      	beq.n	8009fb0 <_printf_i+0x15c>
 800a074:	3501      	adds	r5, #1
 800a076:	68e3      	ldr	r3, [r4, #12]
 800a078:	9903      	ldr	r1, [sp, #12]
 800a07a:	1a5b      	subs	r3, r3, r1
 800a07c:	42ab      	cmp	r3, r5
 800a07e:	dcf2      	bgt.n	800a066 <_printf_i+0x212>
 800a080:	e7eb      	b.n	800a05a <_printf_i+0x206>
 800a082:	2500      	movs	r5, #0
 800a084:	f104 0619 	add.w	r6, r4, #25
 800a088:	e7f5      	b.n	800a076 <_printf_i+0x222>
 800a08a:	bf00      	nop
 800a08c:	0800a201 	.word	0x0800a201
 800a090:	0800a212 	.word	0x0800a212

0800a094 <memmove>:
 800a094:	4288      	cmp	r0, r1
 800a096:	b510      	push	{r4, lr}
 800a098:	eb01 0402 	add.w	r4, r1, r2
 800a09c:	d902      	bls.n	800a0a4 <memmove+0x10>
 800a09e:	4284      	cmp	r4, r0
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	d807      	bhi.n	800a0b4 <memmove+0x20>
 800a0a4:	1e43      	subs	r3, r0, #1
 800a0a6:	42a1      	cmp	r1, r4
 800a0a8:	d008      	beq.n	800a0bc <memmove+0x28>
 800a0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0b2:	e7f8      	b.n	800a0a6 <memmove+0x12>
 800a0b4:	4402      	add	r2, r0
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	428a      	cmp	r2, r1
 800a0ba:	d100      	bne.n	800a0be <memmove+0x2a>
 800a0bc:	bd10      	pop	{r4, pc}
 800a0be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0c6:	e7f7      	b.n	800a0b8 <memmove+0x24>

0800a0c8 <_sbrk_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	@ (800a0e4 <_sbrk_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 f8a6 	bl	8001224 <_sbrk>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_sbrk_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_sbrk_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	24000948 	.word	0x24000948

0800a0e8 <memcpy>:
 800a0e8:	440a      	add	r2, r1
 800a0ea:	4291      	cmp	r1, r2
 800a0ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0f0:	d100      	bne.n	800a0f4 <memcpy+0xc>
 800a0f2:	4770      	bx	lr
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0fe:	4291      	cmp	r1, r2
 800a100:	d1f9      	bne.n	800a0f6 <memcpy+0xe>
 800a102:	bd10      	pop	{r4, pc}

0800a104 <_realloc_r>:
 800a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a108:	4680      	mov	r8, r0
 800a10a:	4615      	mov	r5, r2
 800a10c:	460c      	mov	r4, r1
 800a10e:	b921      	cbnz	r1, 800a11a <_realloc_r+0x16>
 800a110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a114:	4611      	mov	r1, r2
 800a116:	f7ff bc4b 	b.w	80099b0 <_malloc_r>
 800a11a:	b92a      	cbnz	r2, 800a128 <_realloc_r+0x24>
 800a11c:	f7ff fbdc 	bl	80098d8 <_free_r>
 800a120:	2400      	movs	r4, #0
 800a122:	4620      	mov	r0, r4
 800a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a128:	f000 f81a 	bl	800a160 <_malloc_usable_size_r>
 800a12c:	4285      	cmp	r5, r0
 800a12e:	4606      	mov	r6, r0
 800a130:	d802      	bhi.n	800a138 <_realloc_r+0x34>
 800a132:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a136:	d8f4      	bhi.n	800a122 <_realloc_r+0x1e>
 800a138:	4629      	mov	r1, r5
 800a13a:	4640      	mov	r0, r8
 800a13c:	f7ff fc38 	bl	80099b0 <_malloc_r>
 800a140:	4607      	mov	r7, r0
 800a142:	2800      	cmp	r0, #0
 800a144:	d0ec      	beq.n	800a120 <_realloc_r+0x1c>
 800a146:	42b5      	cmp	r5, r6
 800a148:	462a      	mov	r2, r5
 800a14a:	4621      	mov	r1, r4
 800a14c:	bf28      	it	cs
 800a14e:	4632      	movcs	r2, r6
 800a150:	f7ff ffca 	bl	800a0e8 <memcpy>
 800a154:	4621      	mov	r1, r4
 800a156:	4640      	mov	r0, r8
 800a158:	f7ff fbbe 	bl	80098d8 <_free_r>
 800a15c:	463c      	mov	r4, r7
 800a15e:	e7e0      	b.n	800a122 <_realloc_r+0x1e>

0800a160 <_malloc_usable_size_r>:
 800a160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a164:	1f18      	subs	r0, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfbc      	itt	lt
 800a16a:	580b      	ldrlt	r3, [r1, r0]
 800a16c:	18c0      	addlt	r0, r0, r3
 800a16e:	4770      	bx	lr

0800a170 <_init>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	bf00      	nop
 800a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a176:	bc08      	pop	{r3}
 800a178:	469e      	mov	lr, r3
 800a17a:	4770      	bx	lr

0800a17c <_fini>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	bf00      	nop
 800a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a182:	bc08      	pop	{r3}
 800a184:	469e      	mov	lr, r3
 800a186:	4770      	bx	lr
